<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lambda on</title><link>https://ikorihn.github.io/digitalgarden/tags/Lambda/</link><description>Recent content in Lambda on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Nov 2022 19:13:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/Lambda/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Lambdaでtmpを使うときの注意</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 30 Nov 2022 19:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</guid><description>#Go #Lambda
https://aws.amazon.com/jp/about-aws/whats-new/2022/03/aws-lambda-configure-ephemeral-storage/ https://cloud5.jp/lambda_tmp_directory/
/tmp を一時領域として10GBまで使うことができる。 Lambdaは一定期間同じインスタンスが再利用され、/tmp 領域も使い回される。 zipファイルを /tmp/ に解凍するようなことをしたとき気をつける必要がある。 前回実行時のファイルが残っている可能性があるので、
ランダムな名称で作成する 処理が終わったら削除する 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import ( &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; ) func createFile(text string) (*os.</description></item><item><title>Lambdaでタイムアウトしたときに処理をしたい</title><link>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Thu, 09 Dec 2021 18:14:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</guid><description>#Go #Lambda
Go の AWS Lambda context オブジェクト - AWS Lambda
Lambda では実行時に context.Context を受け取ることができ、 Lambda が起動した時間＋Lambdaのタイムアウト秒を DeadLine として取得することができる。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package main import ( &amp;#34;context&amp;#34; &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.</description></item><item><title>apigw+lambda知見</title><link>https://ikorihn.github.io/digitalgarden/note/apigw_lambda%E7%9F%A5%E8%A6%8B/</link><pubDate>Sat, 07 Nov 2020 17:35:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/apigw_lambda%E7%9F%A5%E8%A6%8B/</guid><description> lambda endpointをpathごとに作る main関数のみエンドポイントごとに準備 handler関数は共通 handlerの中でpathごとに振り分け endpointは一つのlambda 中でGinなどを使ってrouting Ginを使わなくても単にrequest.pathで分岐処理書けばいいだけ？便利な機能が使える利点があるかもしれない Ginを使わないのであれば、mainが一個になるか複数になるかの違いだけになる endpoint一個だと、同時実行数の制限が懸念</description></item></channel></rss>