<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lambda on</title><link>https://ikorihn.github.io/digitalgarden/tags/Lambda/</link><description>Recent content in Lambda on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 May 2023 21:25:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/Lambda/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenAPIのspecからSAMのTemplate.yamlを生成する</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%AEspec%E3%81%8B%E3%82%89SAM%E3%81%AETemplate.yaml%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</link><pubDate>Fri, 05 May 2023 21:25:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%AEspec%E3%81%8B%E3%82%89SAM%E3%81%AETemplate.yaml%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</guid><description>SAM と OpenAPI を組み合わせて使うときに両方を編集するのが大変&amp;amp;漏れやすいので合わせられる仕組みが欲しかった
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 openapi:3.</description></item><item><title>AWS Lambda</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda/</link><pubDate>Fri, 05 May 2023 20:37:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda/</guid><description/></item><item><title>AWS LambdaでGoのWebサーバーを動作させる</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:30:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</guid><description/></item><item><title>AWS Lambdaでtmpを使うときの注意</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 30 Nov 2022 19:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</guid><description>#Go #Lambda
https://aws.amazon.com/jp/about-aws/whats-new/2022/03/aws-lambda-configure-ephemeral-storage/ https://cloud5.jp/lambda_tmp_directory/
/tmp を一時領域として10GBまで使うことができる。 Lambdaは一定期間同じインスタンスが再利用され、/tmp 領域も使い回される。 zipファイルを /tmp/ に解凍するようなことをしたとき気をつける必要がある。 前回実行時のファイルが残っている可能性があるので、
ランダムな名称で作成する 処理が終わったら削除する 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import ( &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; ) func createFile(text string) (*os.</description></item><item><title>Lambdaでタイムアウトしたときに処理をしたい</title><link>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Thu, 09 Dec 2021 18:14:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</guid><description>#Go #Lambda
Go の AWS Lambda context オブジェクト - AWS Lambda
Lambda では実行時に context.Context を受け取ることができ、 Lambda が起動した時間＋Lambdaのタイムアウト秒を DeadLine として取得することができる。</description></item><item><title>Lambda関数に同時実行数を担保する</title><link>https://ikorihn.github.io/digitalgarden/note/Lambda%E9%96%A2%E6%95%B0%E3%81%AB%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E6%95%B0%E3%82%92%E6%8B%85%E4%BF%9D%E3%81%99%E3%82%8B/</link><pubDate>Sun, 24 Oct 2021 22:34:58 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Lambda%E9%96%A2%E6%95%B0%E3%81%AB%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E6%95%B0%E3%82%92%E6%8B%85%E4%BF%9D%E3%81%99%E3%82%8B/</guid><description>Lambda 関数に冪等にする
Lambda 関数の同時実行数を1にしても冪等性の担保から逃れることは出来ない | by noid11 | Medium
・冪等性はお客様のコードで確保する必要がある
AWS Lambda で保証しているのは最低1回実行することであり1回しか実行しないことではない
同一イベントで同一 Lambda ファンクションが2回起動されることがまれに発生する</description></item><item><title>SQSとLambdaで同時実行数を制御する</title><link>https://ikorihn.github.io/digitalgarden/note/SQS%E3%81%A8Lambda%E3%81%A7%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E6%95%B0%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B/</link><pubDate>Sun, 24 Oct 2021 22:27:56 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/SQS%E3%81%A8Lambda%E3%81%A7%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E6%95%B0%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B/</guid><description>AWS Lambda の同時実行数の上限は、同一アカウントの同一Region内で1000件まで。
同時実行数に達すると、それ以上の呼び出しはスロットリングされ実行されない。
LamdbaのトリガーとしてSQSを設定した場合の挙動について整理する。
AWS SQS + Lambdaの同時実行数の挙動について
SQSとLambdaで実装する直列処理 | DevelopersIO
Lambda Functionの予約された同時実行数を 1に制限する Lambda FunctionのトリガーとしてSQSを指定する SQSをFIFOキューにする 例えば、バッチサイズが3でキューに50個データが有る場合、Lambdaが 17個並列で起動します。 予約された同時実行数を1にしないと、Lambdaが複数起動されてしまい直列に処理ができなくなります。</description></item><item><title>apigw_lambda知見</title><link>https://ikorihn.github.io/digitalgarden/note/apigw_lambda%E7%9F%A5%E8%A6%8B/</link><pubDate>Sat, 07 Nov 2020 17:35:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/apigw_lambda%E7%9F%A5%E8%A6%8B/</guid><description> lambda endpointをpathごとに作る main関数のみエンドポイントごとに準備 handler関数は共通 handlerの中でpathごとに振り分け endpointは一つのlambda 中でGinなどを使ってrouting Ginを使わなくても単にrequest.pathで分岐処理書けばいいだけ？便利な機能が使える利点があるかもしれない Ginを使わないのであれば、mainが一個になるか複数になるかの違いだけになる endpoint一個だと、同時実行数の制限が懸念</description></item></channel></rss>