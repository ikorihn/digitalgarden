<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shell on</title><link>https://ikorihn.github.io/digitalgarden/tags/shell/</link><description>Recent content in shell on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 May 2023 20:36:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>shell script テキストファイルやJSONでfor loopするパターン</title><link>https://ikorihn.github.io/digitalgarden/note/shell-script-%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%84JSON%E3%81%A7for-loop%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</link><pubDate>Fri, 05 May 2023 20:36:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/shell-script-%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%84JSON%E3%81%A7for-loop%E3%81%99%E3%82%8B%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</guid><description>ファイルを読み込んで一行ずつ処理する name_list.txt
1 2 3 John Bob Alice 1 2 3 4 5 6 7 8 while read -r line || [ -n &amp;#34;$line&amp;#34; ] do echo &amp;#34;name: ${line}&amp;#34; done &amp;lt; name_list.</description></item><item><title>zsh</title><link>https://ikorihn.github.io/digitalgarden/note/zsh/</link><pubDate>Fri, 05 May 2023 20:31:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/zsh/</guid><description/></item><item><title>ssh host key verificationに失敗する</title><link>https://ikorihn.github.io/digitalgarden/note/ssh-host-key-verification%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/</link><pubDate>Fri, 05 May 2023 19:07:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/ssh-host-key-verification%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/</guid><description>エンジニアなら知らないとヤバいSSHの基礎 - もちゅろぐ ~/.ssh/known_hosts には接続経験のあるホストの公開鍵を保存してある このファイルに書いてある公開鍵に紐づく秘密鍵があるか検証することで、万が一サーバ側の公開鍵が変更されていても気付ける仕組みとなってます。
ssh-keygen -R $host でknown_hostsを削除できる
ssh-keyscan ssh-keyscan(1) - OpenBSD manual pages hostの公開鍵を収集する
1 2 3 4 5 6 7 8 9 $ ssh-keyscan github.</description></item><item><title>yq</title><link>https://ikorihn.github.io/digitalgarden/note/yq/</link><pubDate>Thu, 04 May 2023 17:44:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/yq/</guid><description/></item><item><title>yq チートシート</title><link>https://ikorihn.github.io/digitalgarden/note/yq-%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88/</link><pubDate>Fri, 27 Jan 2023 13:05:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/yq-%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88/</guid><description>yq にはGo版とPython版があるので、注意する。Go版をここでは使う
https://mikefarah.gitbook.io/yq/ https://github.com/mikefarah/yq
shellの変数を使う このような書き方では変数が正しく利用されない
1 2 MY_NAME=Alice yq &amp;#34;.users.$MY_NAME&amp;#34; group.yaml env や strenv を使うことで環境変数が展開される</description></item><item><title>ssh 踏み台で su user してから接続するssh先をsshconfigで設定する</title><link>https://ikorihn.github.io/digitalgarden/note/ssh-%E8%B8%8F%E3%81%BF%E5%8F%B0%E3%81%A7-su-user-%E3%81%97%E3%81%A6%E3%81%8B%E3%82%89%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8Bssh%E5%85%88%E3%82%92sshconfig%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/</link><pubDate>Tue, 24 Jan 2023 15:22:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/ssh-%E8%B8%8F%E3%81%BF%E5%8F%B0%E3%81%A7-su-user-%E3%81%97%E3%81%A6%E3%81%8B%E3%82%89%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8Bssh%E5%85%88%E3%82%92sshconfig%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/</guid><description>ローカル -&amp;gt; 踏み台 -&amp;gt; 許可されたユーザーにsuする -&amp;gt; ターゲットにssh というケース
functionを作る 1 2 3 4 function ssh_via_bastion() { ssh -t bastion_host &amp;#34;su - superuser -c &amp;#39;ssh $1&amp;#39;&amp;#34; } ssh_via_bastion &amp;lt;target_host&amp;gt; これでもいいが、sshコマンドじゃないしできれば .</description></item><item><title>starship</title><link>https://ikorihn.github.io/digitalgarden/note/starship/</link><pubDate>Fri, 13 Jan 2023 09:47:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/starship/</guid><description>https://starship.rs</description></item><item><title>Powerlevel10k</title><link>https://ikorihn.github.io/digitalgarden/note/Powerlevel10k/</link><pubDate>Fri, 13 Jan 2023 09:44:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Powerlevel10k/</guid><description>https://github.com/romkatv/powerlevel10k/
zshのプロンプト用のtheme
類似 starship</description></item><item><title>shellでwhile readの中で変数を変更しても反映されない</title><link>https://ikorihn.github.io/digitalgarden/note/shell%E3%81%A7while-read%E3%81%AE%E4%B8%AD%E3%81%A7%E5%A4%89%E6%95%B0%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%A6%E3%82%82%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</link><pubDate>Wed, 04 Jan 2023 17:34:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/shell%E3%81%A7while-read%E3%81%AE%E4%B8%AD%E3%81%A7%E5%A4%89%E6%95%B0%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%A6%E3%82%82%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</guid><description>while read でループ実行したいときに、パイプで値を渡すことができる。 このときに、while文の中で変数をアップデートしても、変更が反映されない
1 2 3 4 5 6 7 $ sum=0 $ echo -e &amp;#34;1\n2\n3&amp;#34; | while read -r num; do echo &amp;#34;number: $num&amp;#34;; sum=$((sum+num)); done &amp;lt; &amp;lt;(echo -e &amp;#34;1\n2\n3&amp;#34;) number: 1 number: 2 number: 3 $ echo $sum 0 これは、パイプはサブプロセスで実行されるため親プロセスの変数に影響を与えられないため。 https://unix.</description></item><item><title>jqの配列でループ処理をする</title><link>https://ikorihn.github.io/digitalgarden/note/jq%E3%81%AE%E9%85%8D%E5%88%97%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%97%E5%87%A6%E7%90%86%E3%82%92%E3%81%99%E3%82%8B/</link><pubDate>Wed, 04 Jan 2023 17:20:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jq%E3%81%AE%E9%85%8D%E5%88%97%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%97%E5%87%A6%E7%90%86%E3%82%92%E3%81%99%E3%82%8B/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 [ { &amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;age&amp;#34;: 20 }, { &amp;#34;name&amp;#34;: &amp;#34;Alice&amp;#34;, &amp;#34;age&amp;#34;: 25 }, { &amp;#34;name&amp;#34;: &amp;#34;Bob&amp;#34;, &amp;#34;age&amp;#34;: 14 } ] length を使ってインデックスでアクセスする 1 2 3 4 5 json=$(cat list.</description></item><item><title>jqのクエリ内でshell変数を使う</title><link>https://ikorihn.github.io/digitalgarden/note/jq%E3%81%AE%E3%82%AF%E3%82%A8%E3%83%AA%E5%86%85%E3%81%A7shell%E5%A4%89%E6%95%B0%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Wed, 04 Jan 2023 17:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jq%E3%81%AE%E3%82%AF%E3%82%A8%E3%83%AA%E5%86%85%E3%81%A7shell%E5%A4%89%E6%95%B0%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>文字列結合で変数を埋め込む方法がまっさきに思いつく
1 2 $ name=&amp;#34;bob&amp;#34; $ cat sample.json | jq &amp;#39;.content | select( .name == &amp;#39;$name&amp;#39; )&amp;#39; よりスマートなやり方がjqのオプションである</description></item><item><title>shellのリダイレクト</title><link>https://ikorihn.github.io/digitalgarden/note/shell%E3%81%AE%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88/</link><pubDate>Wed, 04 Jan 2023 16:55:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/shell%E3%81%AE%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88/</guid><description>シェルのリダイレクトとパイプまとめ [Linux] │ Web備忘録
リダイレクト 入出力の向き先を変更する
&amp;gt; n&amp;gt;&amp;amp;m とすると、ファイルディスクリプタnをmにリダイレクトする 2&amp;gt;&amp;amp;1 とすると標準エラー(FD2)の出力先が標準出力(FD1)にマージされる
&amp;gt;&amp;gt; とすると、ファイルを追記モードで開いてリダイレクトする
&amp;lt; 標準入力にリダイレクト
1 cat - &amp;lt;hello.</description></item><item><title>shellのプロセス置換Process Substitution</title><link>https://ikorihn.github.io/digitalgarden/note/shell%E3%81%AE%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E7%BD%AE%E6%8F%9BProcess-Substitution/</link><pubDate>Wed, 04 Jan 2023 16:49:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/shell%E3%81%AE%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E7%BD%AE%E6%8F%9BProcess-Substitution/</guid><description>プロセス置換 (Process Substitution)について - 一から勉強させてください zsh: 14 Expansion
diffとかで見るこの書き方
1 $ diff &amp;lt;(ls one.txt) &amp;lt;(ls two.txt) コマンドの結果をinputとして渡しているように見える。 リダイレクトに見えるが矢印の方向が逆</description></item><item><title>jq</title><link>https://ikorihn.github.io/digitalgarden/note/jq/</link><pubDate>Mon, 29 Aug 2022 14:39:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jq/</guid><description>vimでjqコマンドを使いやすくする 1 2 3 4 5 6 7 8 9 10 &amp;#34; jq command command! -nargs=? Jq call s:Jq(&amp;lt;f-args&amp;gt;) function!</description></item><item><title>wezterm</title><link>https://ikorihn.github.io/digitalgarden/note/wezterm/</link><pubDate>Sat, 20 Aug 2022 22:21:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/wezterm/</guid><description>tab title, pane titleにcurrent pathを設定する OSC https://wezfurlong.org/wezterm/shell-integration.html のページに OSC 133 という単語が出てくる。
エスケープシーケンスで意味のあるマークを挿入して、コマンドの出力を一まとまりに扱うための仕様らしい。 ZshでOSC 133に対応する https://gitlab.freedesktop.org/Per_Bothner/specifications/blob/master/proposals/semantic-prompts.md
ANSI escape sequences にはいくつかカテゴリが存在するらしい よく色つけに使われる \033[XXXm というのもこれ</description></item><item><title>XDG_BASE_DIRECTORYでホームディレクトリを整理する</title><link>https://ikorihn.github.io/digitalgarden/note/XDG_BASE_DIRECTORY%E3%81%A7%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E6%95%B4%E7%90%86%E3%81%99%E3%82%8B/</link><pubDate>Mon, 21 Mar 2022 22:26:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/XDG_BASE_DIRECTORY%E3%81%A7%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E6%95%B4%E7%90%86%E3%81%99%E3%82%8B/</guid><description>参考 ホームディレクトリのドットファイルを整理する。
XDG_CONFIG_HOMEとは https://wiki.archlinux.org/title/XDG_Base_Directory に則って、 ~/.config に設定ファイルを置くとHOMEフォルダがごちゃごちゃしなくていいようなのでやってみる。
https://www.freedesktop.org/wiki/Specifications/ によると、 &amp;lsquo;XDG&amp;rsquo;は Cross-Desktop Group のことらしい
zshの設定ファイルを~/.configにする 環境変数 $ZDOTDIR が設定されていると、そのディレクトリ以下の設定ファイルを見るようになる。 zshはデフォルトで ~/.</description></item><item><title>ネットワークに応じて処理を振り分けるスクリプト</title><link>https://ikorihn.github.io/digitalgarden/public/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><pubDate>Fri, 04 Mar 2022 10:40:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid><description>#shell
ネットワークに応じて処理を振り分けるスクリプト 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #!</description></item><item><title>terminalからアプリケーションを起動・終了する</title><link>https://ikorihn.github.io/digitalgarden/note/terminal%E3%81%8B%E3%82%89%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%B5%B7%E5%8B%95%E7%B5%82%E4%BA%86%E3%81%99%E3%82%8B/</link><pubDate>Fri, 04 Mar 2022 10:37:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/terminal%E3%81%8B%E3%82%89%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%B5%B7%E5%8B%95%E7%B5%82%E4%BA%86%E3%81%99%E3%82%8B/</guid><description>#shell #Mac
起動 1 osascript -e &amp;#34;quit app &amp;#39;&amp;lt;アプリケーション名&amp;gt;&amp;#39;&amp;#34; 終了 1 open -a &amp;#34;&amp;lt;アプリケーション名&amp;gt;&amp;#34; ネットワークに応じて処理を振り分けるスクリプト と組み合わせれば、自宅では起動したいが会社ではオフにしたいアプリケーション(VPNなど)を自動オンオフできる</description></item><item><title>XMLをコマンドラインで操作する</title><link>https://ikorihn.github.io/digitalgarden/note/XML%E3%82%92%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A7%E6%93%8D%E4%BD%9C%E3%81%99%E3%82%8B/</link><pubDate>Mon, 17 Jan 2022 19:19:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/XML%E3%82%92%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A7%E6%93%8D%E4%BD%9C%E3%81%99%E3%82%8B/</guid><description>xmlstarlet を使ってコマンドライン上で XPath を使ったselectやupdateが可能になる
インストール Macの場合 Homebrew で
1 brew install xmlstarlet 使い方 以下のようなxmlを考える
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &amp;lt;contracts&amp;gt; &amp;lt;clients&amp;gt; &amp;lt;client ref=&amp;#34;123&amp;#34;&amp;gt; &amp;lt;name&amp;gt;Nicol&amp;lt;/name&amp;gt; &amp;lt;/client&amp;gt; &amp;lt;client ref=&amp;#34;8234&amp;#34;&amp;gt; &amp;lt;name&amp;gt;Basil&amp;lt;/name&amp;gt; &amp;lt;/client&amp;gt; &amp;lt;/clients&amp;gt; &amp;lt;entries&amp;gt; &amp;lt;entry ref=&amp;#34;63352&amp;#34;&amp;gt; &amp;lt;regCode&amp;gt;BCG&amp;lt;/regCode&amp;gt; &amp;lt;/entry&amp;gt; &amp;lt;entry ref=&amp;#34;3242&amp;#34;&amp;gt; &amp;lt;regCode&amp;gt;TYD&amp;lt;/regCode&amp;gt; &amp;lt;/entry&amp;gt; &amp;lt;/entries&amp;gt; &amp;lt;/contracts&amp;gt; 参照 1 2 3 4 5 6 7 8 $ xmlstarlet sel -t -c &amp;#39;//client[@ref=&amp;#34;123&amp;#34;]&amp;#39; -t -c &amp;#39;/contracts/entries/entry&amp;#39; temp.</description></item><item><title>sshで接続後にコマンドを実行する</title><link>https://ikorihn.github.io/digitalgarden/note/ssh%E3%81%A7%E6%8E%A5%E7%B6%9A%E5%BE%8C%E3%81%AB%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B/</link><pubDate>Mon, 25 Oct 2021 13:36:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/ssh%E3%81%A7%E6%8E%A5%E7%B6%9A%E5%BE%8C%E3%81%AB%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B/</guid><description>踏み台サーバーにログインしたあと、毎回専用ユーザーになるのが面倒だったので調べた
ログイン後別のユーザーになりたい 1 2 3 4 Host bastion_aws HostName x.x.x.x RemoteCommand su - user2 RequestTTY force ログイン後所定のディレクトリに移動したい 1 2 3 4 Host bastion HostName x.</description></item><item><title>自宅と職場でproxy設定を切り替えたい</title><link>https://ikorihn.github.io/digitalgarden/public/%E8%87%AA%E5%AE%85%E3%81%A8%E8%81%B7%E5%A0%B4%E3%81%A7proxy%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%81%9F%E3%81%84/</link><pubDate>Fri, 08 Oct 2021 10:47:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/%E8%87%AA%E5%AE%85%E3%81%A8%E8%81%B7%E5%A0%B4%E3%81%A7proxy%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%81%9F%E3%81%84/</guid><description>出社時と在宅時で、プロキシの接続情報を変更する必要がある。 手で切り替えるのを忘れて社内システムにつながらない…ということがよく発生するので、自動化することにした。
切り替えたい対象 プロキシ設定 git proxyの設定を環境に応じて変更 実現方法 proxy.pac をローカルのhttpサーバーで配布 Macのネットワーク設定 &amp;gt; Location で自宅と職場でproxy.pacのURLをそれぞれ設定 git proxyをset,unsetするコマンドを実行 wifiのSSIDが家か職場を判定して分岐する トリガーはスリープからの復帰時 プロキシ設定について プロキシの設定はproxy.</description></item><item><title>Googleカレンダーの予定時刻になったらMeetを自動で開くようにする</title><link>https://ikorihn.github.io/digitalgarden/public/open-google-meet-at-time/</link><pubDate>Fri, 24 Sep 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/open-google-meet-at-time/</guid><description>1 # This code block gets replaced with the TOC モチベーション オンラインミーティングをGoogle Meetでやっているのですが、気づいたら開始時間を過ぎていることがあります(本当によくない) 通知が来たときに開始までに少し時間があるので別な作業をしてしまうパターンが多いです。
時間になったらMeetの画面を自動で開いて、強制的に作業を中断すればそんなことがなくなる気がします。
方針 Googleカレンダーから予定を取得して、時間になったらそのMeetのURLをブラウザで開くようにしたいと思います。</description></item><item><title>tmuxでssh時に色を変える</title><link>https://ikorihn.github.io/digitalgarden/note/tmux%E3%81%A7ssh%E6%99%82%E3%81%AB%E8%89%B2%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B/</link><pubDate>Thu, 09 Sep 2021 20:04:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/tmux%E3%81%A7ssh%E6%99%82%E3%81%AB%E8%89%B2%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B/</guid><description> https://bacchi.me/linux/change-terminal-bgcolor/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 function ssh() { # tmux起動時 if [[ -n $(printenv TMUX) ]] ; then # 現在のペインIDを記録 local pane_id=$(tmux display -p &amp;#39;#{pane_id}&amp;#39;) # 接続先ホスト名に応じて背景色を切り替え if [[ `echo $1 | grep &amp;#39;prd&amp;#39;` ]] ; then tmux select-pane -P &amp;#39;bg=colour52,fg=white&amp;#39; elif [[ `echo $1 | grep &amp;#39;stg&amp;#39;` ]] ; then tmux select-pane -P &amp;#39;bg=colour25,fg=white&amp;#39; fi # 通常通りssh続行 command ssh $@ # デフォルトの背景色に戻す tmux select-pane -t $pane_id -P &amp;#39;default&amp;#39; else command ssh $@ fi }</description></item><item><title>macでatコマンドを使う</title><link>https://ikorihn.github.io/digitalgarden/note/mac%E3%81%A7at%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Tue, 31 Aug 2021 20:52:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/mac%E3%81%A7at%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>#shell
Macでatコマンドが実行できないときの対処法 - Qiita
1 sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist /usr/libexec/atrun にフルディスクアクセスをつける
コマンドの使い方 atコマンドについて詳しくまとめました 【Linuxコマンド集】</description></item><item><title>tmuxでbrew shellenvがなにも表示されない</title><link>https://ikorihn.github.io/digitalgarden/note/tmux%E3%81%A7brew-shellenv%E3%81%8C%E3%81%AA%E3%81%AB%E3%82%82%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</link><pubDate>Fri, 20 Aug 2021 11:29:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/tmux%E3%81%A7brew-shellenv%E3%81%8C%E3%81%AA%E3%81%AB%E3%82%82%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</guid><description>事象 zshでターミナルを開く → tmuxコマンドでtmuxを開く → brewでインストールしたコマンドがPATHに入っていない
zshenvで eval $(brew shellenv) でPATHを設定しているのだが、 brew shellenv コマンドを実行してもなにも表示されないのが原因のようだった
ソースを見る https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/shellenv.sh
HOMEBREW_SHELLENV_PREFIX と HOMEBREW_PREFIX が同じ場合は何もしないとなっている</description></item><item><title>shell ランダム文字列を生成するワンライナー</title><link>https://ikorihn.github.io/digitalgarden/note/shell-%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B%E3%83%AF%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%8A%E3%83%BC/</link><pubDate>Thu, 29 Jul 2021 18:24:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/shell-%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B%E3%83%AF%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%8A%E3%83%BC/</guid><description>固定文字列を付与したい場合はawkなどでつければよい
1 2 3 4 5 6 7 8 9 10 11 12 $ cat /dev/urandom | tr -dc &amp;#39;a-zA-Z0-9&amp;#39; | fold -w 32 | head -n 10 | awk &amp;#39;{ print &amp;#34;prefix:&amp;#34; $1 }&amp;#39; prefix:0dCIkKBOq8bcM4yCP0Su5AE0yb6OUBtJ prefix:ferc9H8Qx0QvaK3klwAiMGejgWVDycL0 prefix:pYJGcHzrxYtlT8p4dw8JT567XmeljRRq prefix:dJ1g2vryv1U2EmE0fW4bOT8DlW2plXQx prefix:W952QQrK0XFG1hyUzh4vy1D6vWAU2Xt9 prefix:IEXRe5sAhmnYenIhMse2C63qYZSpmlTY prefix:IaMWJGHRqhQXj8RhqsOJtT8OAYAoPvPY prefix:h89cSAk63KSTCa3J880qYmjpoRFHi3DJ prefix:MUEAglVmFbIwCdRzBllDcPIQzIjN0ivu prefix:7sNNrE29j5QaHk1h3zuAaeqSXftzWcn3 仕組み /dev/urandom でランダム文字列を生成 tr -dc 'a-zA-Z0-9': 英数字以外を削除 -d: &amp;lt;文字セット&amp;gt;に含まれる文字があったら削除する -c: &amp;lt;文字セット&amp;gt;に含まれない文字全て（の補集合）を対象とする fold: テキストを指定した幅で改行する</description></item><item><title>dateコマンドでunixtimestampを変換</title><link>https://ikorihn.github.io/digitalgarden/note/date%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7unixtimestamp%E3%82%92%E5%A4%89%E6%8F%9B/</link><pubDate>Mon, 14 Jun 2021 19:02:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/date%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7unixtimestamp%E3%82%92%E5%A4%89%E6%8F%9B/</guid><description>#shell
タイムスタンプから変換 1 2 $ date --iso-8601=&amp;#34;seconds&amp;#34; -d @1632689459 2021-09-27T05:50:59+09:00 タイムスタンプに変換 1 2 $ date +%s --date=&amp;#34;2021-09-27T05:50:59+09:00&amp;#34; 1632689459</description></item><item><title>adbでAndroidの静止画・動画を取るコマンド</title><link>https://ikorihn.github.io/digitalgarden/note/adb%E3%81%A7Android%E3%81%AE%E9%9D%99%E6%AD%A2%E7%94%BB%E5%8B%95%E7%94%BB%E3%82%92%E5%8F%96%E3%82%8B%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</link><pubDate>Tue, 01 Jun 2021 10:46:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/adb%E3%81%A7Android%E3%81%AE%E9%9D%99%E6%AD%A2%E7%94%BB%E5%8B%95%E7%94%BB%E3%82%92%E5%8F%96%E3%82%8B%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</guid><description>https://littlewing.hatenablog.com/entry/2016/12/20/133901 https://qiita.com/AAkira/items/c8537c24d9c13bd39ae1</description></item><item><title>xlsx2csv</title><link>https://ikorihn.github.io/digitalgarden/note/xlsx2csv/</link><pubDate>Thu, 13 May 2021 22:24:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/xlsx2csv/</guid><description>https://github.com/dilshod/xlsx2csv
1 2 3 4 $ xlsx=新しいファイル.xlsx $ xlsx2csv -a -q all $xlsx ${xlsx/.xlsx/} -a: すべてのシートをcsvにする -q: カラムをダブルクウォートで囲む -aをつけると、ディレクトリが作成されその中にシートごとにcsvが作られる</description></item><item><title>fishとfzfを組み合わせる</title><link>https://ikorihn.github.io/digitalgarden/note/fish%E3%81%A8fzf%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B/</link><pubDate>Tue, 11 May 2021 22:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/fish%E3%81%A8fzf%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B/</guid><description>https://github.com/jethrokuan/fzf を使っていた
問題 ファイル名、ディレクトリ名にスペースが含まれていると、tab補完したときに正しく展開されない
解決策 https://github.com/PatrickF1/fzf.fish を使うようにした
標準の CTRL-T を使うだけでもいい気がする</description></item><item><title>fzf.vimの使い方</title><link>https://ikorihn.github.io/digitalgarden/note/fzf.vim%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link><pubDate>Sat, 19 Sep 2020 20:36:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/fzf.vim%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid><description>fzf https://github.com/jethrokuan/fzf#usage
FZF_DEFAULT_COMMAND でfzf実行時に使用するコマンドを指定 ripgrep が高速なのでこんな風にするといい FZF_DEFAULT_COMMAND=rg --hidden -g &amp;quot;!.git/*&amp;quot; -l &amp;quot;&amp;quot; FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob &amp;quot;!.git/*&amp;quot;' で、ctrl-t を押すとfzfが実行される FZF_CTRL_T_OPTS='--preview &amp;quot;bat --color=always --style=header,grid --line-range :100 {}&amp;quot;' プレビューオプション fzf.</description></item></channel></rss>