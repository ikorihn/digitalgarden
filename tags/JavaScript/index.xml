<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on</title><link>https://ikorihn.github.io/digitalgarden/tags/JavaScript/</link><description>Recent content in JavaScript on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 May 2023 22:19:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/JavaScript/index.xml" rel="self" type="application/rss+xml"/><item><title>React</title><link>https://ikorihn.github.io/digitalgarden/note/React/</link><pubDate>Thu, 04 May 2023 22:19:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/React/</guid><description>Reactは、Facebookが開発したJavaScriptのライブラリで、WebアプリケーションやモバイルアプリケーションのUIを構築するために使用される。 コンポーネントと呼ばれる小さな再利用可能なUI要素を組み合わせてアプリケーションを構築する。
宣言的なプログラミングスタイルを採用しているのでロジックと組み合わせたUIの構築がしやすい 仮想DOMを使用するため、UIのレンダリングのパフォーマンスが向上する 大規模なアプリケーションでも、コンポーネントやデータのフローをシンプルに管理できるため、保守性が高く、拡張性にも優れている TypeScript で記述可能</description></item><item><title>Svelte</title><link>https://ikorihn.github.io/digitalgarden/note/Svelte/</link><pubDate>Thu, 04 May 2023 17:05:51 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Svelte/</guid><description>Svelteは、JavaScriptのフレームワークの1つ。 ReactやVueなどフレームワークと同様、開発者がUIコンポーネントを作成し、それらを組み合わせてアプリケーションを構築する。 ただし、仮想DOMを使用していない
ビルド時にコンポーネントをコンパイルし、JavaScriptの実行時にライブラリを必要としない</description></item><item><title>JavaScript xpathで要素を取得する</title><link>https://ikorihn.github.io/digitalgarden/note/JavaScript-xpath%E3%81%A7%E8%A6%81%E7%B4%A0%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</link><pubDate>Thu, 27 Apr 2023 12:21:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/JavaScript-xpath%E3%81%A7%E8%A6%81%E7%B4%A0%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</guid><description>1 2 3 4 5 6 7 8 9 10 11 function getElementByXpath(path) { return document.evaluate( path, document, null, XPathResult.</description></item><item><title>JSDoc VSCodeで型チェックをする</title><link>https://ikorihn.github.io/digitalgarden/note/JSDoc-VSCode%E3%81%A7%E5%9E%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%92%E3%81%99%E3%82%8B/</link><pubDate>Wed, 05 Apr 2023 15:56:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/JSDoc-VSCode%E3%81%A7%E5%9E%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%92%E3%81%99%E3%82%8B/</guid><description>TypeScriptを使おうとするとビルドの手間がかかるので、小さいスクリプトで手軽に型チェックだけしたいときにJSDocで簡易的に型をつけたい。
1行目に @ts-check を書くのが重要
1 // @ts-check @typedef などを書くことで型チェックが行われてハッピーになれる
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /** * @typedef {Object} Payload * @property {string} channel - channelId * @property {Block[]} blocks - block */ /** * @typedef {Object} Block * @property {(&amp;#39;section&amp;#39; | &amp;#39;mrkdwn&amp;#39;)} type - block type * @property {(Block | string)} text - inner block or text */ /** * @param {string} channelId - Slack channel ID * @param {string} message - message * @returns {Payload} */ function slackPayload(channelId, message) { // payloadを作成する処理.</description></item><item><title>lodashを使いたくないでござる</title><link>https://ikorihn.github.io/digitalgarden/note/lodash%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B/</link><pubDate>Mon, 18 Apr 2022 19:58:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/lodash%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84%E3%81%A7%E3%81%94%E3%81%96%E3%82%8B/</guid><description>#JavaScript
lodash やめ方 - Qiita
だいたいはES6標準の書き方で書けるようになっているが、どうしてもlodashの関数を使いたいときがある。 そんなときは https://github.com/angus-c/just/ を使ってみてもいいかもしれない。
lodashの代わりにjustを使う
パッケージはjust-***という名前で単関数が独立している。必要なものだけ使える zero-dependencyな作り。 比較的簡素に作られているので自前実装に参考にしやすい あるいは、lodash自身が個別にモジュール化してくれているのでそれをインストールしてもいいかも
例: https://www.npmjs.com/package/lodash.debounce
1 npm i</description></item><item><title>JavaScriptでJSONをkebab-caseにする</title><link>https://ikorihn.github.io/digitalgarden/note/JavaScript%E3%81%A7JSON%E3%82%92kebab-case%E3%81%AB%E3%81%99%E3%82%8B/</link><pubDate>Thu, 16 Sep 2021 12:16:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/JavaScript%E3%81%A7JSON%E3%82%92kebab-case%E3%81%AB%E3%81%99%E3%82%8B/</guid><description>#JavaScript
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 export const stringifyRoutePoint = (point?</description></item><item><title>Vite</title><link>https://ikorihn.github.io/digitalgarden/note/Vite/</link><pubDate>Wed, 16 Jun 2021 19:54:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Vite/</guid><description>Vite とは
【Vite】 Vue3.0もReactも！ノーバンドルなビルドツール「Vite」を試してみる - Qiita フロントエンドの爆速な開発サーバを実現する Vite を試してみた - SMARTCAMP Engineer Blog
ViteはVue.jsの作者のEvan You氏が開発中のノーバンドルなビルドツールです。 ネイティブのESモジュールのインポートを利用しバンドル不要で高速に動作するdevサーバーと、Rollup.jsをベースとしたプロダクションビルド機能を提供します。 設定不要で.vueのSFC（Single File Components）をコンパイルできて、さらにデフォルトで今開発中のVue3.0が使えます。 しかも、vue-cliのようにVue.</description></item></channel></rss>