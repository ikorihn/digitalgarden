<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenAPI on</title><link>https://ikorihn.github.io/digitalgarden/tags/OpenAPI/</link><description>Recent content in OpenAPI on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 May 2023 12:05:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/OpenAPI/index.xml" rel="self" type="application/rss+xml"/><item><title>Go oapi-codegenを使ったコード生成</title><link>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</link><pubDate>Mon, 29 May 2023 12:05:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</guid><description>導入した結果 仕様書とコードが一致するようになった それぞれの言語向けにAPIレスポンスのコードを実装するコストが減った フロントエンドとバックエンドの実装が並行して進められるようになった 1、2については、APIを変更したときにコードを再生成するとGoやTypeScriptでエラーがでるので、変更が安全に行えるようになりました。
このときの開発チームでは同じ人がフロントエンドとバックエンド両方を実装していたので、3についてはあまり影響がありませんでしたが、開発者が分かれている場合はバックエンドの開発が済んでいなくてもフロントエンドの開発を進められるのは大きな利点だと思います。
一方でイマイチだった点として、生成ツールの吐き出すコードのフォーマットがプロジェクトに合わないものであっても妥協する必要がありました。 出力されるコードのフォーマットはある程度パラメータでコントロールできるものの、その方法を調べるコストやメンテナンスコストを鑑みて、生成されたものにコードフォーマッタをかけるくらいに留めてあとは受け入れることにしました。
やらなかったこと 今回はOpenAPIファイルをもとにしてコードを生成する方針で開発を行いました。
一方で、コードからOpenAPIファイルを生成するアプローチもあります。 yamlを編集するよりもコードを書きたい、コードのほうがコンパイルエラーで検知できたりIDEの恩恵を受けやすいという気持ちはあったのですが、 ライブラリ側がOpenAPI 3.0系に対応するのを待つ必要があったり、使用できるプロパティが制限されたりと不便なところがあったため、このアプローチは取りませんでした。 例えば、Go でコードからOpenAPI(Swagger)を生成するライブラリの中でスター数の多い swag はSwagger 2.</description></item><item><title>OpenAPI</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI/</link><pubDate>Fri, 05 May 2023 21:26:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI/</guid><description>https://swagger.io/specification/
OpenAPI 仕様 (OAS) は、言語に依存しない標準のREST APIのインターフェイスを定義する。 インターフェースの定義は JSON または YAML で記述し、特定の言語に依存しないので、さまざまな言語で利用できる。 ドキュメントから見やすい仕様書を出力したり、 OpenAPI Generator などのツールを使ってさまざまな言語向けにサーバー、クライアントのコードを生成することができる</description></item><item><title>OpenAPIのspecからSAMのTemplate.yamlを生成する</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%AEspec%E3%81%8B%E3%82%89SAM%E3%81%AETemplate.yaml%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</link><pubDate>Fri, 05 May 2023 21:25:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%AEspec%E3%81%8B%E3%82%89SAM%E3%81%AETemplate.yaml%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/</guid><description>SAM と OpenAPI を組み合わせて使うときに両方を編集するのが大変&amp;amp;漏れやすいので合わせられる仕組みが欲しかった
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 openapi:3.</description></item><item><title>OpenAPIでGoとTypeScriptのコード生成</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A7Go%E3%81%A8TypeScript%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</link><pubDate>Thu, 04 May 2023 23:09:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A7Go%E3%81%A8TypeScript%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</guid><description>開発言語・環境 バックエンド Go 1.18 aws-lambda-go v1.32.0 AWS SAM (API Gateway + Lambda) oapi-codegen v1.11.0 フロントエンド TypeScript 4.</description></item><item><title>OpenAPI yamlを編集するときにSwagger Editorなどを使う</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI-yaml%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%ABSwagger-Editor%E3%81%AA%E3%81%A9%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Thu, 05 Jan 2023 16:49:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI-yaml%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%ABSwagger-Editor%E3%81%AA%E3%81%A9%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>OpenAPI specを書くツールをいくつか調べた
vscodeだと拡張を入れてもいまいち補完が効かない Intellij IDEAの OpenAPI Editor が一番良さそうだがJetBrainsライセンス必要 Stoplight Studioはいいけど勝手にファイルをフォーマットかけたりするし重い。会員登録必要 Swagger Editor は補完聞くけどブラウザ上で編集ってのが気持ち悪い Swagger Editorをdockerでローカルに立ち上げて使うのがいいのかな 結論 どちらかが良さそう。書きやすいのはvimで、補完効かせたかったらSwagger Editor</description></item><item><title>OpenAPIとGoでリクエストのバリデーションをする</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A8Go%E3%81%A7%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%99%E3%82%8B/</link><pubDate>Thu, 05 Jan 2023 15:51:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A8Go%E3%81%A7%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%99%E3%82%8B/</guid><description>いつもoapi-codegenでopenapi.yamlからGoのコードを生成するようにしている。 oapi-codegenの使い方については下記参照
OpenAPIでGoとTypeScriptのコード生成
OpenAPI仕様書からGoの構造体を作る
OpenAPIでパラメータに制約をつける OpenAPI Documentでは、JSON Schema の定義に従って schema に制約を書くことができる。 OpenAPI Specification - Version 3.0.3 | Swagger draft-wright-json-schema-validation-00</description></item><item><title>OpenAPI Generator</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI-Generator/</link><pubDate>Wed, 19 May 2021 14:12:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI-Generator/</guid><description>#OpenAPI
伝えたいこと OpenAPI(Swagger)を使って、APIクライアントのコードを自動生成しよう コードと仕様書に齟齬がなくなる Nullable/NonNull、スペルミス、APIインターフェース変更への追従が確実&amp;amp;簡単になる 最初期に導入するほうが効果が高く、途中から導入するのは難しい… コマンド例 1 2 3 4 5 $ docker run --rm -v &amp;#34;${PWD}:/local&amp;#34; openapitools/openapi-generator-cli generate -i https://petstore3.</description></item><item><title>typescript-openapi</title><link>https://ikorihn.github.io/digitalgarden/note/typescript-openapi/</link><pubDate>Tue, 29 Dec 2020 16:35:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/typescript-openapi/</guid><description>typescript openapi https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/typescript-axios.md
package.json
1 2 3 4 5 { &amp;#34;scripts&amp;#34;: { &amp;#34;openapi-generate&amp;#34;: &amp;#34;rm -f api_client/*.ts &amp;amp;&amp;amp; TS_POST_PROCESS_FILE=&amp;#39;yarn prettier --write&amp;#39; openapi-generator-cli generate -i http://localhost:8080/api/v3/api-docs -g typescript-axios -o api_client --additional-properties=disallowAdditionalPropertiesIfNotPresent=false,modelPropertyNaming=camelCase,supportsES6=true,useSingleRequestParameter=true --enable-post-process-file&amp;#34; } }</description></item></channel></rss>