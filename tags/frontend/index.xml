<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>frontend on</title><link>https://ikorihn.github.io/digitalgarden/tags/frontend/</link><description>Recent content in frontend on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 May 2023 20:28:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>imgタグで画像が404のときに代替画像を表示する</title><link>https://ikorihn.github.io/digitalgarden/note/img%E3%82%BF%E3%82%B0%E3%81%A7%E7%94%BB%E5%83%8F%E3%81%8C404%E3%81%AE%E3%81%A8%E3%81%8D%E3%81%AB%E4%BB%A3%E6%9B%BF%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:28:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/img%E3%82%BF%E3%82%B0%E3%81%A7%E7%94%BB%E5%83%8F%E3%81%8C404%E3%81%AE%E3%81%A8%E3%81%8D%E3%81%AB%E4%BB%A3%E6%9B%BF%E7%94%BB%E5%83%8F%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</guid><description>HTML img タグで画像が 404 エラーのときに代替画像を表示する方法 - to-me-mo-rrow - 未来の自分に残すメモ -
TL;DR onerror=&amp;quot;this.src = 'alt.png'; this.removeAttribute('onerror')&amp;quot; を指定 エラー時には代替画像を読み込んで、onerror 属性自身も削除 onload=&amp;quot;this.</description></item><item><title>CORS</title><link>https://ikorihn.github.io/digitalgarden/note/CORS/</link><pubDate>Fri, 05 May 2023 20:27:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/CORS/</guid><description>CORSの仕様はなぜ複雑なのか
Same-origin policy (SOP)</description></item><item><title>TypeScriptのGatsbyをNetlifyでビルドしたときのエラーに対応した</title><link>https://ikorihn.github.io/digitalgarden/blog/build-typescript-on-netlify/</link><pubDate>Sun, 31 Oct 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/blog/build-typescript-on-netlify/</guid><description>事象 TypeScript化したGatsbyをNetlifyでビルドした際に以下のエラーが発生しました。
1 2 3 4 5 6 7 8 $ gatsby build error Error in &amp;#34;/opt/build/repo/gatsby-node.js&amp;#34;: Unexpected token &amp;#39;.</description></item><item><title>Gatsbyでブログを作ったので、構築ログを残す</title><link>https://ikorihn.github.io/digitalgarden/blog/start-blog-with-gatsby/</link><pubDate>Sun, 10 Oct 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/blog/start-blog-with-gatsby/</guid><description>Gatsby.js について https://www.gatsbyjs.com/
Reactでつくられた静的サイトジェネレータ
Reactをビルド時に1回だけ実行し、HTML,JSを生成する。 生成されたファイルをホスティングサービスにデプロイするだけで見られるようになる。
GraphQL Gatsby.jsではビルド時のさまざまなデータをGraphQLで取得する。 Markdown形式で書いた情報を、ファイルシステムから読み込んで、GraphQL経由で取得し、Reactコンポーネント内で表示する。 GatsbyではMarkdownファイルに限らず、様々なデータを data source, data transformer という枠組みで一般化することで、多様な処理を統一的にかつ簡潔に記述することができている。 クライアントはビルド時に形成されたGraphQL DBの全体は必要ないので、「クエリの結果」のみをJSONとして合わせてデプロイする。 starterを使ってblogを作成 テンプレートを利用してブログを構築しました。</description></item><item><title>Udemy Firebase React Hooks(TypeScript)によるWebアプリ開発</title><link>https://ikorihn.github.io/digitalgarden/note/Udemy-Firebase-React-HooksTypeScript%E3%81%AB%E3%82%88%E3%82%8BWeb%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA/</link><pubDate>Sat, 28 Aug 2021 14:43:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Udemy-Firebase-React-HooksTypeScript%E3%81%AB%E3%82%88%E3%82%8BWeb%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA/</guid><description>Twitterのクローンアプリを作成しながら、 React、React Hooks、Redux、Firebase連携、 TypeScript についてまなぶ
https://www.udemy.com/course/firebase-react-hookstypescriptweb/learn/lecture
2021-08-27 React Hooks
useState ステートフック
useState&amp;lt;T&amp;gt;(value) の形式で、参照可能な値と値を更新するための関数を作る
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import React, { useState } from &amp;#39;react&amp;#39;; function Example() { // Declare a new state variable, which we&amp;#39;ll call &amp;#34;count&amp;#34; const [count, setCount] = useState(0); return ( &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt; &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; Click me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } useEffect 副作用フック 関数コンポーネント内で副作用を実行できるようになる</description></item><item><title>NetlifyとGitHubで静的サイトを公開する</title><link>https://ikorihn.github.io/digitalgarden/note/Netlify%E3%81%A8GitHub%E3%81%A7%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</link><pubDate>Mon, 03 May 2021 23:28:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Netlify%E3%81%A8GitHub%E3%81%A7%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/</guid><description>Netlifyの初期設定とデプロイ Netlify にアカウント作成、ログイン(特に難しい手順はないので割愛)
GitHubとの連携 GitHubと連携する場合、Netlifyのアカウント設定でGitHubアカウントと連携しておく
https://app.netlify.com/ から New site from Git をクリック Continuous Deployment で GitHubを選択 公開対象リポジトリを選択 対象ブランチ、デプロイ時に実行するbuildコマンド、公開対象のディレクトリを設定 Deploy Site をクリックするとデプロイされる サイト名変更 Site Settings &amp;gt; General &amp;gt; Change site name で変更</description></item><item><title>Netlify</title><link>https://ikorihn.github.io/digitalgarden/note/Netlify/</link><pubDate>Mon, 03 May 2021 23:24:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Netlify/</guid><description>Netlifyは、静的サイトをホスティングすることができるWebサービス。</description></item></channel></rss>