<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Draft on</title><link>https://ikorihn.github.io/digitalgarden/tags/Draft/</link><description>Recent content in Draft on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 May 2023 12:05:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/Draft/index.xml" rel="self" type="application/rss+xml"/><item><title>Go oapi-codegenを使ったコード生成</title><link>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</link><pubDate>Mon, 29 May 2023 12:05:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</guid><description>導入した結果 仕様書とコードが一致するようになった それぞれの言語向けにAPIレスポンスのコードを実装するコストが減った フロントエンドとバックエンドの実装が並行して進められるようになった 1、2については、APIを変更したときにコードを再生成するとGoやTypeScriptでエラーがでるので、変更が安全に行えるようになりました。
このときの開発チームでは同じ人がフロントエンドとバックエンド両方を実装していたので、3についてはあまり影響がありませんでしたが、開発者が分かれている場合はバックエンドの開発が済んでいなくてもフロントエンドの開発を進められるのは大きな利点だと思います。
一方でイマイチだった点として、生成ツールの吐き出すコードのフォーマットがプロジェクトに合わないものであっても妥協する必要がありました。 出力されるコードのフォーマットはある程度パラメータでコントロールできるものの、その方法を調べるコストやメンテナンスコストを鑑みて、生成されたものにコードフォーマッタをかけるくらいに留めてあとは受け入れることにしました。
やらなかったこと 今回はOpenAPIファイルをもとにしてコードを生成する方針で開発を行いました。
一方で、コードからOpenAPIファイルを生成するアプローチもあります。 yamlを編集するよりもコードを書きたい、コードのほうがコンパイルエラーで検知できたりIDEの恩恵を受けやすいという気持ちはあったのですが、 ライブラリ側がOpenAPI 3.0系に対応するのを待つ必要があったり、使用できるプロパティが制限されたりと不便なところがあったため、このアプローチは取りませんでした。 例えば、Go でコードからOpenAPI(Swagger)を生成するライブラリの中でスター数の多い swag はSwagger 2.</description></item><item><title>AWS LambdaでGoのWebサーバーを動作させる</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:30:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</guid><description/></item><item><title>NeovimとVSCodeで共存する</title><link>https://ikorihn.github.io/digitalgarden/note/Neovim%E3%81%A8VSCode%E3%81%A7%E5%85%B1%E5%AD%98%E3%81%99%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:26:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Neovim%E3%81%A8VSCode%E3%81%A7%E5%85%B1%E5%AD%98%E3%81%99%E3%82%8B/</guid><description/></item></channel></rss>