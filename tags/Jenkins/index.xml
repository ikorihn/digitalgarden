<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jenkins on</title><link>https://ikorihn.github.io/digitalgarden/tags/Jenkins/</link><description>Recent content in Jenkins on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 May 2023 20:29:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/Jenkins/index.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins ビルドの最終更新時刻を確認する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E6%9C%80%E7%B5%82%E6%9B%B4%E6%96%B0%E6%99%82%E5%88%BB%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:29:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E6%9C%80%E7%B5%82%E6%9B%B4%E6%96%B0%E6%99%82%E5%88%BB%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B/</guid><description>Jenkins でビルドの最終更新時刻を確認する
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import java.</description></item><item><title>Jenkinsfile</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkinsfile/</link><pubDate>Thu, 04 May 2023 17:58:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkinsfile/</guid><description>Jenkins Pipeline を書いたファイル</description></item><item><title>Jenkins Pipeline</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-Pipeline/</link><pubDate>Thu, 04 May 2023 17:32:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-Pipeline/</guid><description>note/Jenkins のジョブ設定をPipelineというDSLで定義できる</description></item><item><title>Jenkins</title><link>https://ikorihn.github.io/digitalgarden/note/jenkins/</link><pubDate>Thu, 04 May 2023 17:28:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jenkins/</guid><description>Java製のCI/CDツール</description></item><item><title>Jenkins declarative pipelineでActive Choice Parameterを使う</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-declarative-pipeline%E3%81%A7Active-Choice-Parameter%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Mon, 01 May 2023 16:22:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-declarative-pipeline%E3%81%A7Active-Choice-Parameter%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>Active Choices | Jenkins plugin をつかうと、パラメータを動的に設定できるようになる。
Pipeline Syntaxの画面でparametersブロックを作成できるが、そこに出てこないためscriptで書くしかなさそう。
以下のようにpropertiesで作成する。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 properties([ parameters([ [$class: &amp;#39;ChoiceParameter&amp;#39;, choiceType: &amp;#39;PT_SINGLE_SELECT&amp;#39;, description: &amp;#39;Select a choice&amp;#39;, filterLength: 1, filterable: true, name: &amp;#39;Target&amp;#39;, script: [ $class: &amp;#39;GroovyScript&amp;#39;, fallbackScript: [ classpath: [], sandbox: true, script: &amp;#39;return [&amp;#34;ERROR&amp;#34;]&amp;#39; ], script: [ classpath: [], sandbox: false, script: &amp;#34;&amp;#34;&amp;#34; def lines = new File(&amp;#34;/var/jenkins_home/workspace/paramlist.</description></item><item><title>Jenkins 前回のビルドのarchiveArtifactを取得する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E5%89%8D%E5%9B%9E%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AEarchiveArtifact%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</link><pubDate>Thu, 20 Apr 2023 14:26:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E5%89%8D%E5%9B%9E%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AEarchiveArtifact%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</guid><description>前回のビルドの成果物を取得したいことがたまにあるので調べた。
result.txtをarchiveしているとして考える
ArtifactManagerを使う場合 https://javadoc.jenkins.io/hudson/model/Run.html?is-external=true#getArtifactManager()
Run.getArtifactManager().root().child(&amp;quot;relativepath/to/file&amp;quot;) で VirtualFile が取得できる
1 2 3 4 5 6 script { def build = currentBuild.</description></item><item><title>Jenkins ビルドのChangeSetsを取得する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E3%83%93%E3%83%AB%E3%83%89%E3%81%AEChangeSets%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</link><pubDate>Wed, 19 Apr 2023 13:42:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E3%83%93%E3%83%AB%E3%83%89%E3%81%AEChangeSets%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</guid><description>How to access Changelogs in a Pipeline Job?
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def changeSets = Jenkins.</description></item><item><title>Jenkins kubernetes plugin 3872.v760b_4a_6c126b_ でagent起動しない</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-kubernetes-plugin-3872.v760b_4a_6c126b_-%E3%81%A7agent%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%AA%E3%81%84/</link><pubDate>Tue, 21 Feb 2023 11:21:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-kubernetes-plugin-3872.v760b_4a_6c126b_-%E3%81%A7agent%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%AA%E3%81%84/</guid><description>エラーログ
1 2 3 4 5 6 7 2023-02-21 01:06:57.665+0000 [id=81] WARNING o.c.j.p.k.KubernetesLauncher#launch: Error in provisioning; agent=KubernetesSlave name: jenkins-agent-x86-64-kjhkr, template=PodTemplate{id=&amp;#39;afef69c1-5cc4-48a8-a070-fd6a6fd4f6d1&amp;#39;, name=&amp;#39;jenkins-agent-x86_64&amp;#39;, namespace=&amp;#39;staging-jenkins&amp;#39;, runAsUser=0, runAsGroup=0, slaveConnectTimeout=600, idleMinutes=30, label=&amp;#39;jenkins-agent-x86_64&amp;#39;, serviceAccount=&amp;#39;jenkins&amp;#39;, nodeSelector=&amp;#39;ap-type=cicd-jenkins-slave-kp-staging,arch=amd64&amp;#39;, nodeUsageMode=NORMAL, podRetention=&amp;#39;Never&amp;#39;, annotations=[PodAnnotation{key=&amp;#39;cluster-autoscaler.</description></item><item><title>Jenkins matrixビルドで変数が共有される問題</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-matrix%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E5%A4%89%E6%95%B0%E3%81%8C%E5%85%B1%E6%9C%89%E3%81%95%E3%82%8C%E3%82%8B%E5%95%8F%E9%A1%8C/</link><pubDate>Mon, 13 Feb 2023 12:50:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-matrix%E3%83%93%E3%83%AB%E3%83%89%E3%81%A7%E5%A4%89%E6%95%B0%E3%81%8C%E5%85%B1%E6%9C%89%E3%81%95%E3%82%8C%E3%82%8B%E5%95%8F%E9%A1%8C/</guid><description>matrixを使ってふたつのworker上でビルドしたいとき、実行順によっては
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 pipeline { agent none stages { stage(&amp;#39;parallel&amp;#39;) { matrix { agent { label &amp;#34;worker-${ARCH}&amp;#34; } axes { axis { name &amp;#39;ARCH&amp;#39; values &amp;#39;x86_64&amp;#39;, &amp;#39;armv8&amp;#39; } } stages { stage(&amp;#39;prepare&amp;#39;) { steps { script { env.</description></item><item><title>Jenkins Kubernetes pluginでinheritFromを上書きしつつpod名にprefixをつける</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-Kubernetes-plugin%E3%81%A7inheritFrom%E3%82%92%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%97%E3%81%A4%E3%81%A4pod%E5%90%8D%E3%81%ABprefix%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B/</link><pubDate>Thu, 02 Feb 2023 19:21:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-Kubernetes-plugin%E3%81%A7inheritFrom%E3%82%92%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%97%E3%81%A4%E3%81%A4pod%E5%90%8D%E3%81%ABprefix%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B/</guid><description>configure cloudsの設定でpodTemplateを定義ずみで、 inheritFrom で継承しつつ一部だけを上書きしたいときの書き方
podTemplateの設定
name my-jenkins-agent labels my-jenkins-agent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 pipeline { agent { kubernetes { inheritFrom &amp;#39;my-jenkins-agent&amp;#39; label &amp;#39;my-jenkins-agent&amp;#39; yamlMergeStrategy merge() yaml &amp;#39;&amp;#39;&amp;#39; apiVersion: v1 kind: Pod metadata: labels: some-label: some-label-value spec: containers: - name: maven image: maven:alpine command: - cat tty: true &amp;#39;&amp;#39;&amp;#39; } } stages { stage(&amp;#39;Run maven&amp;#39;) { steps { container(&amp;#39;maven&amp;#39;) { sh &amp;#39;mvn -version&amp;#39; } } } } } こうすると、設定済みのpodTemplateが使われて yaml に書いた定義は反映されない。 labelが完全一致していると上書きできないのかも？</description></item><item><title>Jenkins本体のバージョンとプラグインをスクリプトで最新化する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins%E6%9C%AC%E4%BD%93%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A7%E6%9C%80%E6%96%B0%E5%8C%96%E3%81%99%E3%82%8B/</link><pubDate>Fri, 27 Jan 2023 13:03:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins%E6%9C%AC%E4%BD%93%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A7%E6%9C%80%E6%96%B0%E5%8C%96%E3%81%99%E3%82%8B/</guid><description>jenkinsの最新バージョンを取得するURL https://stackoverflow.com/questions/43857882/how-to-query-the-current-jenkins-lts-version-number
For stable (LTS) https://updates.jenkins.io/stable/latestCore.txt And for the latest https://updates.jenkins.io/latestCore.txt Simple groovy script to upgrade active plugins when new versions are available jenkins safe auto update plugins</description></item><item><title>Jenkins Jenkinsfileをcloneするディレクトリをclean upする</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-Jenkinsfile%E3%82%92clone%E3%81%99%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92clean-up%E3%81%99%E3%82%8B/</link><pubDate>Mon, 12 Dec 2022 19:02:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-Jenkinsfile%E3%82%92clone%E3%81%99%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92clean-up%E3%81%99%E3%82%8B/</guid><description>経緯 Pipelineジョブを途中でabortしたあと再実行したら、gitのindex.lockがあるためfetchができないというエラーが出る場合がある。
1 2 3 4 5 6 7 stderr: fatal: Unable to create &amp;#39;/var/jenkins_home/workspace/MyJob@script/.../.git/index.lock&amp;#39;: File exists. Another git process seems to be running in this repository, e.</description></item><item><title>Jenkins bitbucket-pipelinesで動かす</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-bitbucket-pipelines%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99/</link><pubDate>Sun, 23 Oct 2022 22:18:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-bitbucket-pipelines%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99/</guid><description>Jenkinsをhelm chartを使ってk8sで動かしていて、JCasCのコードをGitで管理していて、設定が正しいのかどうかは反映されるまでわからない これをCIでチェックできるようにしたかった
Jenkins ジョブを GitHub Actions 上で動かせるようになりました を参考にした
Dockerで動かせるようにする 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 services:jenkins:build:context:.</description></item><item><title>Jenkins helm SecretsManagerからSecretを取得してセットする</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-helm-SecretsManager%E3%81%8B%E3%82%89Secret%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%A6%E3%82%BB%E3%83%83%E3%83%88%E3%81%99%E3%82%8B/</link><pubDate>Tue, 13 Sep 2022 12:39:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-helm-SecretsManager%E3%81%8B%E3%82%89Secret%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%A6%E3%82%BB%E3%83%83%E3%83%88%E3%81%99%E3%82%8B/</guid><description>additionalExternalSecrets を使うのがよさそう https://github.com/jenkinsci/helm-charts/tree/main/charts/jenkins#additional-secrets
additionalSecrets は3.3.1で追加されている https://github.com/jenkinsci/helm-charts/commit/f6316c95d264dbf064d0c3cc51836b364650273e
ドキュメントもこのタイミングで更新されている。 https://github.com/jenkinsci/helm-charts/commit/6773a7ff4868a579f54fd6f57d01e2fd3b81e6e6
以前の書き方だと、volumes でsecretsを設定して、mounts で /run/secrets/${KEY} で配置するというのを自分で行っていた https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#kubernetes-secrets
additionalSecrets がExternalSecretsの変更に追従されるようなPRもマージされている(4.x) https://github.com/jenkinsci/helm-charts/pull/645
その他 https://jenkinsci.github.io/kubernetes-credentials-provider-plugin/</description></item><item><title>Jenkins shared library</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-shared-library/</link><pubDate>Fri, 26 Aug 2022 19:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-shared-library/</guid><description>note/Jenkins で複数のプロジェクトがあって、それぞれにビルドやデプロイのジョブを作成している。 同じようなステップを実行するので、共通処理をまとめてメンテナスしやすくしたい。
Jenkins Shared Library Shared Libraryを使うとpipelineからライブラリに定義された関数や変数を使うことができる。 Jenkins Shared Librariesの活用事例の紹介 - DeNA Testing Blog
なんと pipeline {} ごと定義することもできる。</description></item><item><title>Jenkins スクリプトコンソールでpluginやジョブを一覧で出力する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%A7plugin%E3%82%84%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92%E4%B8%80%E8%A6%A7%E3%81%A7%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</link><pubDate>Wed, 20 Jul 2022 15:22:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%A7plugin%E3%82%84%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92%E4%B8%80%E8%A6%A7%E3%81%A7%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</guid><description>plugin一覧を出力する 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def pluginList = new ArrayList(Jenkins.</description></item><item><title>Jenkins PluginをM1 Macで開発する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-Plugin%E3%82%92M1-Mac%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B/</link><pubDate>Tue, 12 Jul 2022 12:23:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-Plugin%E3%82%92M1-Mac%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B/</guid><description>note/Jenkins のプラグインを開発する
Java8が必要 mvn hpi:hpi でビルドするだけならJDK8がインストールされていればOK
Jenkins上で確認したい Docker上でビルドするよろし
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ mvn hpi:hpl [INFO] Scanning for projects.</description></item><item><title>Jenkins Configuration as Code</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-Configuration-as-Code/</link><pubDate>Thu, 07 Jul 2022 19:51:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-Configuration-as-Code/</guid><description>JCasC
Jenkinsの設定をコード化するプラグイン
https://github.com/jenkinsci/configuration-as-code-plugin
Kubernetesで使用する helmを使う https://github.com/jenkinsci/helm-charts
CASC_JENKINS_CONFIG=/var/jenkins_home/casc_config が設定されているので、ここに設定が置かれるように作る
Job DSLとの連携 https://github.com/jenkinsci/job-dsl-plugin/blob/master/docs/JCasC.md
https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/seed-jobs.md
ConfigMapでjobs.yamlを作って $CASC_JENKINS_CONFIG に置く</description></item><item><title>Jenkins JobDSL Tips 外部ファイルをimportするなど</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-JobDSL-Tips-%E5%A4%96%E9%83%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92import%E3%81%99%E3%82%8B%E3%81%AA%E3%81%A9/</link><pubDate>Thu, 07 Jul 2022 19:20:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-JobDSL-Tips-%E5%A4%96%E9%83%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92import%E3%81%99%E3%82%8B%E3%81%AA%E3%81%A9/</guid><description>Jenkins Job DSL Plugin のTIPS
job DSLのサンプル集 https://github.com/edx/jenkins-job-dsl https://github.com/sheehan/job-dsl-gradle-example https://github.com/unguiculus/job-dsl-sample
上級者向けオプション https://github.com/jenkinsci/job-dsl-plugin/blob/master/docs/User-Power-Moves.md
JCasCとの連携 https://github.com/jenkinsci/job-dsl-plugin/blob/master/docs/JCasC.md
You can pass values from the YAML file to the Job DSL script.</description></item><item><title>Jenkins JobDSLをCIでvalidateしたい</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-JobDSL%E3%82%92CI%E3%81%A7validate%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Thu, 07 Jul 2022 19:17:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-JobDSL%E3%82%92CI%E3%81%A7validate%E3%81%97%E3%81%9F%E3%81%84/</guid><description>Jenkins Job DSL Plugin
job-dsl-plugin/Testing-DSL-Scripts.md at master · jenkinsci/job-dsl-plugin · GitHub 公式でtestの方法書いてくれたのでまずはこれを試してみる
gradle初期化 1 gradle init サンプルはバージョン古くて動かなかったので上げてみたけど、testディレクトリが認識されない？のか実行されないで終了する</description></item><item><title>JenkinfsfileをCIでvalidateしたい</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkinfsfile%E3%82%92CI%E3%81%A7validate%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Thu, 07 Jul 2022 11:27:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkinfsfile%E3%82%92CI%E3%81%A7validate%E3%81%97%E3%81%9F%E3%81%84/</guid><description>Jenkins: How do I lint Jenkins pipelines from the command line? - Stack Overflow https://www.jenkins.io/doc/book/pipeline/development/
起動中の note/Jenkins にcurlやsshしてvalidateのAPIを叩くとチェックできる
Linting via the CLI with SSH</description></item><item><title>Jenkins pipelineで他のジョブを停止する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-pipeline%E3%81%A7%E4%BB%96%E3%81%AE%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92%E5%81%9C%E6%AD%A2%E3%81%99%E3%82%8B/</link><pubDate>Tue, 05 Jul 2022 18:16:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-pipeline%E3%81%A7%E4%BB%96%E3%81%AE%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92%E5%81%9C%E6%AD%A2%E3%81%99%E3%82%8B/</guid><description>Jenkins Pipeline
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 pipeline { stages { stage(&amp;#39;abort jobs&amp;#39;) { steps { script { Jenkins.</description></item><item><title>Jenkinsで重いリポジトリをcloneするときに使えるテクニック</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%A7%E9%87%8D%E3%81%84%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92clone%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</link><pubDate>Thu, 26 May 2022 14:45:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%A7%E9%87%8D%E3%81%84%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92clone%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</guid><description>shallow clone, sparse checkoutを使うことで、容量を軽くしてローカルに落とすことができる
Job DSLの場合
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 pipelineJob(&amp;#39;myJob&amp;#39;) { definition { cpsScm { scm { git { configure { git -&amp;gt; // sparse checkout git / &amp;#39;extensions&amp;#39; / &amp;#39;hudson.</description></item><item><title>jenkins JobDSLでclosure内からfunctionを呼ぶ</title><link>https://ikorihn.github.io/digitalgarden/note/jenkins-JobDSL%E3%81%A7closure%E5%86%85%E3%81%8B%E3%82%89function%E3%82%92%E5%91%BC%E3%81%B6/</link><pubDate>Wed, 30 Mar 2022 16:29:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jenkins-JobDSL%E3%81%A7closure%E5%86%85%E3%81%8B%E3%82%89function%E3%82%92%E5%91%BC%E3%81%B6/</guid><description>Jenkins Job DSL Plugin でいい感じに書くためのテクニック
素直に書いた場合は以下のようにそれぞれにジョブの定義を書くことになるが、共通化したい部分が出てくることがある。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 CREDENTIAL_ID = &amp;#39;secret_key&amp;#39; REPO_URL = &amp;#39;https://example.</description></item><item><title>Jenkins Job DSL Plugin</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-Job-DSL-Plugin/</link><pubDate>Mon, 07 Mar 2022 18:52:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-Job-DSL-Plugin/</guid><description>note/Jenkins の設定やジョブをJob DSLという Groovy のDSLで定義することができるようになる
https://plugins.jenkins.io/job-dsl/ https://github.com/jenkinsci/job-dsl-plugin
普通にプラグイン設定画面からインストール可能 GroovyのDSLで、Jenkinsのジョブやフォルダを作成可能にする Groovyスクリプトなので、分岐や反復などを使って自由度高くジョブが作成できる DSLを基に、Jenkinsのジョブごとの設定ファイル(xml)を生成するようなイメージ Playground や コマンドライン でJenkinsに反映させるまえに実際どのようなXMLが生成されるか試すことができる なおPlaygroundでは自分でいれたプラグイン(listGitBranchなど)はチェックすることができない DSLからジョブを作成する方法 Jenkinsジョブを作成 設定でBuild stepに Process Job DSL があるので選択する 手で直接入力したければ、 Use the provided DSL script にチェックを入れてDSLを入力 Look on Filesystem でサーバー上のファイルを指定することも可能 設定完了したら保存して、ジョブを実行する 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 folder(&amp;#39;deplly&amp;#39;) { description(&amp;#39;Folder for deploy&amp;#39;) } pipelineJob(&amp;#34;deploy/server&amp;#34;) { description(&amp;#34;デプロイジョブ&amp;#34;) parameters { stringParam(&amp;#34;FILE&amp;#34;, &amp;#34;exec.</description></item><item><title>Jenkins-job-dslで少しだけ違うジョブをまとめて定義する</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-job-dsl%E3%81%A7%E5%B0%91%E3%81%97%E3%81%A0%E3%81%91%E9%81%95%E3%81%86%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</link><pubDate>Mon, 07 Mar 2022 17:45:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-job-dsl%E3%81%A7%E5%B0%91%E3%81%97%E3%81%A0%E3%81%91%E9%81%95%E3%81%86%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</guid><description>Jenkins Job DSL Plugin で環境ごとにジョブが分かれていて微妙にパラメータが異なる場合や、異なるサービスで似たジョブを複製したいときはままあると思いますが。 GUI上でぽちぽちするのは時間がかかるし間違えるので、Jenkinsサーバーに入ってconfig.xmlをコピーして書き換えるみたいなことをやったりしますが、 Jenkins Job DSL Plugin を使うとこの問題が解決します。
類似: Jenkins JobDSLでclosure内からfunctionを呼ぶ
Groovyスクリプトでジョブを作成する Jenkins Job DSL Plugin は結局Groovyなので、ある程度自由に記述ができます。 配列を定義して、異なる部分だけを変数にするといったやり方で、見通しもよく複製することができます。</description></item><item><title>Jenkinsfileをリロードする</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkinsfile%E3%82%92%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</link><pubDate>Thu, 27 Jan 2022 17:01:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkinsfile%E3%82%92%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</guid><description>Jenkinsfile 内でパラメータを parameters ブロックで定義しても、一度実行しないと反映されない。
https://stackoverflow.com/questions/44422691/how-to-force-jenkins-to-reload-a-jenkinsfile refresh用のパラメータを定義しておくのが常套手段
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 pipeline { agent any parameters { booleanParam(name: &amp;#39;Refresh&amp;#39;, defaultValue: false, description: &amp;#39;Read Jenkinsfile and exit.</description></item><item><title>Jenkinsでraw htmlを説明文に書けるようにする</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%A7raw-html%E3%82%92%E8%AA%AC%E6%98%8E%E6%96%87%E3%81%AB%E6%9B%B8%E3%81%91%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</link><pubDate>Tue, 25 Jan 2022 23:08:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%A7raw-html%E3%82%92%E8%AA%AC%E6%98%8E%E6%96%87%E3%81%AB%E6%9B%B8%E3%81%91%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</guid><description>htmlタグがエスケープされずに装飾できるようになる
OWASP Markup Formatter をインストール
グローバルセキュリティの設定 &amp;gt; マークアップ記法 &amp;gt; Safe HTML に変更</description></item><item><title>Jenkins HTML Publisherで公開したHTMLにCSSが当たらない</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-HTML-Publisher%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9FHTML%E3%81%ABCSS%E3%81%8C%E5%BD%93%E3%81%9F%E3%82%89%E3%81%AA%E3%81%84/</link><pubDate>Thu, 20 Jan 2022 16:41:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-HTML-Publisher%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9FHTML%E3%81%ABCSS%E3%81%8C%E5%BD%93%E3%81%9F%E3%82%89%E3%81%AA%E3%81%84/</guid><description>事象 Jenkins - HTML Publisher Plugin - No CSS is displayed when report is viewed in Jenkins Server
note/Jenkins HTML Publisher Pluginで公開したhtmlで、CSSが読み込まれずスタイルが当たらない。 ブラウザのコンソールに以下のエラーメッセージが出ていた。</description></item><item><title>Jenkinsの見た目をカスタマイズ</title><link>https://ikorihn.github.io/digitalgarden/blog/jenkins-ui-customize/</link><pubDate>Mon, 27 Sep 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/blog/jenkins-ui-customize/</guid><description>1 # This code block gets replaced with the TOC モチベーション Jenkins のデフォルトの見た目は古臭いので、好きなテーマに変更したい。 また、環境ごとの違いをひと目でわかりやすくすることで事故を防ぐ。
jenkins-material-theme をダウンロード http://afonsof.</description></item><item><title>Jenkins PipelineでParameterのFileが動作しないバグ</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins-Pipeline%E3%81%A7Parameter%E3%81%AEFile%E3%81%8C%E5%8B%95%E4%BD%9C%E3%81%97%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0/</link><pubDate>Tue, 21 Sep 2021 19:20:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins-Pipeline%E3%81%A7Parameter%E3%81%AEFile%E3%81%8C%E5%8B%95%E4%BD%9C%E3%81%97%E3%81%AA%E3%81%84%E3%83%90%E3%82%B0/</guid><description>note/Jenkins pluginのバグ
https://issues.jenkins.io/browse/JENKINS-27413 https://stackoverflow.com/questions/38080876/jenkins-pipeline-job-with-file-parameter
pipelineじゃなくふつうのジョブでパラメータにFileを指定する分には問題ない
pipelineで指定するとファイルがアップロードされない
1 2 3 4 5 6 7 8 pipeline { agent any parameters { file ( name: &amp;#39;file.</description></item><item><title>jenkinsの見た目をカスタマイズ</title><link>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%81%AE%E8%A6%8B%E3%81%9F%E7%9B%AE%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/</link><pubDate>Wed, 25 Aug 2021 16:51:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%81%AE%E8%A6%8B%E3%81%9F%E7%9B%AE%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/</guid><description>note/Jenkins のデフォルトの見た目は古臭いので、好きなテーマに変更する。 また、環境ごとの違いをひと目でわかりやすくすることで事故を防ぐ。
jenkins-material-theme をダウンロード http://afonsof.com/jenkins-material-theme/ から色とロゴを指定してテーマをダウンロードする。
プラグインを設定 [Jenkinsの管理] -&amp;gt; [プラグインの管理] -&amp;gt; [利用可能] -&amp;gt; Simple Theme Plugin をインストール</description></item><item><title>jenkinsのEC2Slaveの初期化</title><link>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%81%AEEC2Slave%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96/</link><pubDate>Mon, 14 Jun 2021 19:06:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%81%AEEC2Slave%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96/</guid><description>Jenkins EC2 は init scriptの他にUser dataでも初期化処理をかける
こうかくと、yum updateされる
1 2 3 4 #cloud-config timezone: &amp;#34;Asia/Tokyo&amp;#34; repo_update: true repo_upgrade: all これはそもそもAmazon EC2の機能でcloud initによる初期処理を行っている</description></item><item><title>JenkinsのHTMLPublisherPluginでCSSが適用されない</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%AEHTMLPublisherPlugin%E3%81%A7CSS%E3%81%8C%E9%81%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</link><pubDate>Tue, 01 Jun 2021 18:44:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%AEHTMLPublisherPlugin%E3%81%A7CSS%E3%81%8C%E9%81%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</guid><description>https://techblog.recochoku.jp/1285 https://stackoverflow.com/questions/35783964/jenkins-html-publisher-plugin-no-css-is-displayed-when-report-is-viewed-in-j
原因 https://www.jenkins.io/doc/book/security/configuring-content-security-policy/
Content Security Policyが設定されていて、デフォルトではブロックされる
解決策 Javaオプションで hudson.model.DirectoryBrowserSupport.CSP を設定すればよい
1. JenkinsのスクリプトコンソールからCSPを設定する 1 System.setProperty(&amp;#34;hudson.model.DirectoryBrowserSupport.CSP&amp;#34;, &amp;#34;default-src https: &amp;#39;unsafe-inline&amp;#39;&amp;#34;) ただし、一時的な設定で、再起動するともとに戻る</description></item><item><title>JenkinsにBlueOcean入れる</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%ABBlueOcean%E5%85%A5%E3%82%8C%E3%82%8B/</link><pubDate>Tue, 01 Jun 2021 11:25:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%81%ABBlueOcean%E5%85%A5%E3%82%8C%E3%82%8B/</guid><description>https://cloudbees.techmatrix.jp/blog/first-time-blue-ocean/
始めに Jenkins 2.0からパイプラインが、そしてJenkins 2.7からはBlue Oceanプラグインが利用可能となりました。
パイプラインとは 従来Jenkinsはフリースタイルジョブでジョブを定義していました。ただフリースタイルジョブでは、例えば条件ロジックを組めなかったり、ジョブの途中で停止してしまった場合に最初から始めなければならなかったりと現実的にCI/CDを実現するには多くの制約がありました。
それらの問題を解消するために登場したのがパイプラインです。
パイプラインとは、Jenkins2.0から登場した公式のプラグインであり、CI/CDのフローをコードとして定義するためのツールです。なお、パイプラインにはスクリプトパイプラインと宣言型パイプラインの2種類がありますが、今回はBlue Oceanを利用するために宣言型パイプラインを用います。
どういったことができる？ パイプラインの特徴や、フリースタイルジョブと比べての利点について説明していきます。
まずパイプラインはJenkinsfileというApache GroovyをベースにしたDSLで記載されたスクリプトファイルです。 1つのスクリプトファイルでCI/CDのフローを記載することが可能です。
従来、複数のジョブをつなげていくにはビルド・トリガを用いて連結していく必要がありましたが、一目見るだけではどのようにジョブがつながっているのかがわかりませんでした。 タスクの名称をナンバリングするといった方法で運用回避されていたかと思います。 全体像がわかりづらく、業務引継ぎ等を考えると非常にネガティブな状況でした。</description></item><item><title>Jenkinsジョブをcurlでエクスポートインポート</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92curl%E3%81%A7%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88/</link><pubDate>Sun, 30 May 2021 18:46:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92curl%E3%81%A7%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88/</guid><description>note/Jenkins ジョブ設定をcurlでインポートしたい
crumbIssuer/api/xml にBASIC認証でGETリクエストをなげ、/defaultCrumbIssuer/crumbRequestField と /defaultCrumbIssuer//crumb/ をコロンで結合したものがcrumb cookieにcrumbを保存する cookieとBASIC認証を使って、 http://jenkins-url.com/path/to/job/directory/createItem?name=${job_name} にpostする リクエストボディにエクスポートしたジョブのxmlを指定する 1 2 3 $ curl -O -u $user:$passwd &amp;#39;[http://old-jenkins/job/job_name/config.</description></item><item><title>Jenkinsジョブでgit-lfsを使用して一部だけpullしたい</title><link>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%82%B8%E3%83%A7%E3%83%96%E3%81%A7git-lfs%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E4%B8%80%E9%83%A8%E3%81%A0%E3%81%91pull%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Fri, 19 Feb 2021 18:26:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Jenkins%E3%82%B8%E3%83%A7%E3%83%96%E3%81%A7git-lfs%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E4%B8%80%E9%83%A8%E3%81%A0%E3%81%91pull%E3%81%97%E3%81%9F%E3%81%84/</guid><description>Jenkinsとgitlfs やりたいこと Jenkinsのgit pluginで一部だけgit lfs pullしたい
わかっていること git lfs pull -I &amp;quot;$target&amp;quot; で対象のディレクトリ・ファイルだけダウンロードできる git lfs install --skip-smudge しておかないと、最初のcheckoutで全部git lfs pullしようとするっぽい JenkinsのGit Pluginがcloneするより前に git lfs install --skip-smudge git init git lfs install &amp;ndash;skip-smudge &amp;ndash;local git remote add origin https://${BITBUCKET_ CREDENTIAL}@bitbucket.</description></item><item><title>jenkinsのslaveからssh公開鍵認証がうまく行かなかった</title><link>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%81%AEslave%E3%81%8B%E3%82%89ssh%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E8%A1%8C%E3%81%8B%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F/</link><pubDate>Tue, 12 Jan 2021 12:36:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%81%AEslave%E3%81%8B%E3%82%89ssh%E5%85%AC%E9%96%8B%E9%8D%B5%E8%AA%8D%E8%A8%BC%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E8%A1%8C%E3%81%8B%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F/</guid><description>jenkins ssh 考えてみたら当たり前って感じだけど、Slaveに鍵を置いていない場合、slaveからsshすることができない
解決方法 認証情報にJenkinsのssh鍵を設定
ビルドの設定で、 秘密テキストや秘密ファイルを使用する にチェックして設定
1 2 3 4 SSH User Private Key Key File Variable: SSH_KEY 認証情報: 上記で設定した認証情報を選択 シェル実行時に鍵ファイルを指定</description></item><item><title>jenkinsサーバーにbrewを入れたがpathが認識されない</title><link>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%ABbrew%E3%82%92%E5%85%A5%E3%82%8C%E3%81%9F%E3%81%8Cpath%E3%81%8C%E8%AA%8D%E8%AD%98%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</link><pubDate>Wed, 09 Dec 2020 10:56:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/jenkins%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%ABbrew%E3%82%92%E5%85%A5%E3%82%8C%E3%81%9F%E3%81%8Cpath%E3%81%8C%E8%AA%8D%E8%AD%98%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84/</guid><description>トラブルシュート PATHが認識されない Jenkinsの管理 -&amp;gt; システムの設定 -&amp;gt; グローバルプロパティにPATHを設定してもうまく設定されない
1 2 キー: PATH 値: /usr/local/bin:$PATH ではなく
1 2 キー: PATH+EXTRA 値: /usr/local/bin とする。EXTRAの部分はなんでもいいみたい</description></item></channel></rss>