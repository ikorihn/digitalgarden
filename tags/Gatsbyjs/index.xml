<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gatsbyjs on</title><link>https://ikorihn.github.io/digitalgarden/tags/Gatsbyjs/</link><description>Recent content in Gatsbyjs on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 31 Oct 2021 19:00:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/Gatsbyjs/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScriptのGatsbyをNetlifyでビルドしたときのエラーに対応した</title><link>https://ikorihn.github.io/digitalgarden/public/build-typescript-on-netlify/</link><pubDate>Sun, 31 Oct 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/build-typescript-on-netlify/</guid><description>事象 TypeScript化したGatsbyをNetlifyでビルドした際に以下のエラーが発生しました。
1 2 3 4 5 6 7 8 $ gatsby build error Error in &amp;#34;/opt/build/repo/gatsby-node.js&amp;#34;: Unexpected token &amp;#39;.</description></item><item><title>GatsbyjsでTailwindをつかう</title><link>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%A7Tailwind%E3%82%92%E3%81%A4%E3%81%8B%E3%81%86/</link><pubDate>Sun, 10 Oct 2021 23:47:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%A7Tailwind%E3%82%92%E3%81%A4%E3%81%8B%E3%81%86/</guid><description>#Gatsbyjs #TailwindCSS
https://www.gatsbyjs.com/docs/how-to/styling/tailwind-css/</description></item><item><title>Gatsbyでブログを作ったので、構築ログを残す</title><link>https://ikorihn.github.io/digitalgarden/public/start-blog-with-gatsby/</link><pubDate>Sun, 10 Oct 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/start-blog-with-gatsby/</guid><description>Gatsby.js について https://www.gatsbyjs.com/
Reactでつくられた静的サイトジェネレータ
Reactをビルド時に1回だけ実行し、HTML,JSを生成する。 生成されたファイルをホスティングサービスにデプロイするだけで見られるようになる。
GraphQL Gatsby.jsではビルド時のさまざまなデータをGraphQLで取得する。 Markdown形式で書いた情報を、ファイルシステムから読み込んで、GraphQL経由で取得し、Reactコンポーネント内で表示する。 GatsbyではMarkdownファイルに限らず、様々なデータを data source, data transformer という枠組みで一般化することで、多様な処理を統一的にかつ簡潔に記述することができている。 クライアントはビルド時に形成されたGraphQL DBの全体は必要ないので、「クエリの結果」のみをJSONとして合わせてデプロイする。 starterを使ってblogを作成 テンプレートを利用してブログを構築しました。</description></item><item><title>Gatsbyjsに目次を追加する</title><link>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%AB%E7%9B%AE%E6%AC%A1%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/</link><pubDate>Mon, 03 May 2021 11:11:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%AB%E7%9B%AE%E6%AC%A1%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/</guid><description>各ページに目次を追加したい
前提条件 目次ボタンはhタグ内に#を使った「ページ内リンク」となるので
ページ内リンクを取り扱うプラグインとの併用がほぼ必須となっている。
私が合わせて使っているページ内リンクプラグインは次
gatsby-remark-autolink-headers | GatsbyJS
こちらの設置方法も記事にしてある。
【Gatsby.js】見出しにページ内リンクを設定するプラグイン「gatsby-remark-autolink-headers」 | Blog
gatsby-remark-autolink-headers
プラグインを追加 gatsby-remark-table-of-contents</description></item><item><title>GatsbyjsにSNSアイコン</title><link>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%ABSNS%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3/</link><pubDate>Sun, 02 May 2021 22:19:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%ABSNS%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3/</guid><description>FontAwesomeをインストール https://fontawesome.com/how-to-use/on-the-web/using-with/react
1 yarn add @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome @fortawesome/free-brands-svg-icons コンポーネントを利用する 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import{FontAwesomeIcon}from&amp;#39;@fortawesome/react-fontawesome&amp;#39;import{faGithubSquare,faTwitterSquare,}from&amp;#39;@fortawesome/free-brands-svg-icons&amp;#39;//.</description></item><item><title>GatsbyjsのTypeScript化</title><link>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%AETypeScript%E5%8C%96/</link><pubDate>Sun, 02 May 2021 21:53:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Gatsbyjs%E3%81%AETypeScript%E5%8C%96/</guid><description>Gatsby.js を TypeScript 化する
tsconfig.jsonを追加 tsconfig.json
GraphQL Schema, リクエストの型生成 Gatsby はリソースに対して GraphQL でリクエストを送りデータを取得する GraphQL リクエストのレスポンスの型を、 gatsby-plugin-typegen を使い生成する。</description></item><item><title>Gatsby.js</title><link>https://ikorihn.github.io/digitalgarden/note/Gatsby.js/</link><pubDate>Sun, 02 May 2021 20:35:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Gatsby.js/</guid><description>Reactの静的サイトジェネレータ
https://www.gatsbyjs.com/
動作 Reactアプリをビルド時に1回実行し、HTML,JSを生成する。 生成されたファイルをホスティングサービスにデプロイするだけで見られるようになる
ビルド時GraphQL Gatsby.jsではビルド時のさまざまなデータをGraphQLで取得する。
Markdown形式のテキスト情報を、ファイルシステムから読み込んで、GraphQL経由で取得し、Reactコンポーネント内で表示する。 GatsbyではMarkdownに限らず様々なデータを、 data source, data transformer という枠組みで一般化することで、多様な処理を統一的にかつ簡潔に記述することができている。
クライアントはビルド時に形成されたGraphQL DBの全体は必要ないので、「クエリの結果」のみをJSONとして合わせてデプロイする。
プラグイン データを作成するために、 data transformer, data sourceがプラグインとして利用できる。</description></item><item><title>GatsbyとNetlifyでブログ作成</title><link>https://ikorihn.github.io/digitalgarden/note/Gatsby%E3%81%A8Netlify%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E4%BD%9C%E6%88%90/</link><pubDate>Sun, 02 May 2021 20:25:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Gatsby%E3%81%A8Netlify%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E4%BD%9C%E6%88%90/</guid><description>Gatsby.jsとNetlifyでブログを作成して公開する手順
Netlify Netlify、GitHubリポジトリを設定する
NetlifyとGitHubで静的サイトを公開する
Gatsby.js Gatsby.js
CLIインストール 1 npm install -g gatsby-cli プロジェクト作成 gatsby new &amp;lt;名前&amp;gt; &amp;lt;スターター&amp;gt; で作成できる。</description></item></channel></rss>