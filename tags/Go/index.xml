<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on</title><link>https://ikorihn.github.io/digitalgarden/tags/Go/</link><description>Recent content in Go on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 May 2023 12:05:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/Go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go oapi-codegenを使ったコード生成</title><link>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</link><pubDate>Mon, 29 May 2023 12:05:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</guid><description>導入した結果 仕様書とコードが一致するようになった それぞれの言語向けにAPIレスポンスのコードを実装するコストが減った フロントエンドとバックエンドの実装が並行して進められるようになった 1、2については、APIを変更したときにコードを再生成するとGoやTypeScriptでエラーがでるので、変更が安全に行えるようになりました。
このときの開発チームでは同じ人がフロントエンドとバックエンド両方を実装していたので、3についてはあまり影響がありませんでしたが、開発者が分かれている場合はバックエンドの開発が済んでいなくてもフロントエンドの開発を進められるのは大きな利点だと思います。
一方でイマイチだった点として、生成ツールの吐き出すコードのフォーマットがプロジェクトに合わないものであっても妥協する必要がありました。 出力されるコードのフォーマットはある程度パラメータでコントロールできるものの、その方法を調べるコストやメンテナンスコストを鑑みて、生成されたものにコードフォーマッタをかけるくらいに留めてあとは受け入れることにしました。
やらなかったこと 今回はOpenAPIファイルをもとにしてコードを生成する方針で開発を行いました。
一方で、コードからOpenAPIファイルを生成するアプローチもあります。 yamlを編集するよりもコードを書きたい、コードのほうがコンパイルエラーで検知できたりIDEの恩恵を受けやすいという気持ちはあったのですが、 ライブラリ側がOpenAPI 3.0系に対応するのを待つ必要があったり、使用できるプロパティが制限されたりと不便なところがあったため、このアプローチは取りませんでした。 例えば、Go でコードからOpenAPI(Swagger)を生成するライブラリの中でスター数の多い swag はSwagger 2.</description></item><item><title>chromedpを使ってGoでChromeを自動操作する</title><link>https://ikorihn.github.io/digitalgarden/blog/chromedp%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7Chrome%E3%82%92%E8%87%AA%E5%8B%95%E6%93%8D%E4%BD%9C%E3%81%99%E3%82%8B/</link><pubDate>Sun, 28 May 2023 18:29:44 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/blog/chromedp%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7Chrome%E3%82%92%E8%87%AA%E5%8B%95%E6%93%8D%E4%BD%9C%E3%81%99%E3%82%8B/</guid><description>普段の業務でWebページを開いてグラフをキャプチャしたり、勤怠入力をしたりといったルーチンの作業を自動化できないかなと思いました。
こうしたブラウザの操作を自動化する分野では Selenium や Puppetter が有名ですが、環境構築が面倒だったのでGopherな自分としてはGoでスクリプトを書きたいと思います。
chromedp はChromeをGoで操作することのできるライブラリです。 Chrome DevTools Protocol をサポートしていて、スクレイピングでDOMを操作する以外にもこのプロトコルでスクリーンショットを取ったりすることもできます。
GitHub - chromedp/chromedp: A faster, simpler way to drive browsers supporting the Chrome DevTools Protocol.</description></item><item><title>Go GORMでSQL実行前後に実行されるHookを登録する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-GORM%E3%81%A7SQL%E5%AE%9F%E8%A1%8C%E5%89%8D%E5%BE%8C%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8BHook%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B/</link><pubDate>Fri, 19 May 2023 17:54:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-GORM%E3%81%A7SQL%E5%AE%9F%E8%A1%8C%E5%89%8D%E5%BE%8C%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8BHook%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B/</guid><description>構造体単位で適用する gorm.DB全体に適用する Plugin を使ってGlobalに設定することも可能
定義済みのcallbackはこちら https://github.com/go-gorm/gorm/blob/master/callbacks/callbacks.go
Query() に対して gorm:query という名前で定義済みなので、それのあとに実行するPluginは以下のように書ける
1 2 3 gormDb.Callback().Query().After(&amp;#34;gorm:query&amp;#34;).Register(&amp;#34;custom_after_query&amp;#34;, func(tx *gorm.DB) { fmt.Printf(&amp;#34;sql ==&amp;gt; %v, var ==&amp;gt; %v\n&amp;#34;, tx.</description></item><item><title>Go Neovimでtemplateのsyntax highlightを効かせる</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Neovim%E3%81%A7template%E3%81%AEsyntax-highlight%E3%82%92%E5%8A%B9%E3%81%8B%E3%81%9B%E3%82%8B/</link><pubDate>Fri, 19 May 2023 11:55:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Neovim%E3%81%A7template%E3%81%AEsyntax-highlight%E3%82%92%E5%8A%B9%E3%81%8B%E3%81%9B%E3%82%8B/</guid><description>これを入れた
GitHub - ngalaiko/tree-sitter-go-template: Golang template grammar for tree-sitter Golang template grammar for tree-sitter. Contribute to ngalaiko/tree-sitter-go-template development by creating an account on GitHub.</description></item><item><title>go モジュールのタグを別のコミットハッシュにつけ直したらcacheが残っていてパッケージうまく読み込めなかった</title><link>https://ikorihn.github.io/digitalgarden/note/go-%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%BF%E3%82%B0%E3%82%92%E5%88%A5%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AB%E3%81%A4%E3%81%91%E7%9B%B4%E3%81%97%E3%81%9F%E3%82%89cache%E3%81%8C%E6%AE%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%81%A6%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%86%E3%81%BE%E3%81%8F%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F/</link><pubDate>Thu, 18 May 2023 19:25:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%BF%E3%82%B0%E3%82%92%E5%88%A5%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AB%E3%81%A4%E3%81%91%E7%9B%B4%E3%81%97%E3%81%9F%E3%82%89cache%E3%81%8C%E6%AE%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%81%A6%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%86%E3%81%BE%E3%81%8F%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F/</guid><description>そもそもそんなことしないほうがいいというのは承知で、開発中のパッケージなどでタグをうちまちがえたので修正したところ新しいコミットがダウンロードされなかった。
手順 モジュールAのコミットAにtag v1.0.0をつけてpush モジュールAを使っているリポジトリで go get ~~~@v1.0.0 モジュールAでファイル追加してコミットする(コミットB) v1.0.0を消してコミットBにv1.0.0をつけなおしてpush 再度 go get ~~~@v1.0.0 したが変更がないためダウンロードしてくれなかった 解消方法 go clean -modcache でクリアして、go.</description></item><item><title>Hugo 外部リンクをカードで表示する</title><link>https://ikorihn.github.io/digitalgarden/note/Hugo-%E5%A4%96%E9%83%A8%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E3%82%AB%E3%83%BC%E3%83%89%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</link><pubDate>Sun, 07 May 2023 16:19:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Hugo-%E5%A4%96%E9%83%A8%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E3%82%AB%E3%83%BC%E3%83%89%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</guid><description>Hugo で、ブログでよく見るリンクをカードで表示するやつをやりたい
resources.GetRemote を利用することで、ビルドのタイミングで指定したURLへアクセスしてリソースを取得できる
v0.91.0 で入った機能
作り方 shortcode/card-link.html
外部リソースを取得 1 {{$remote:=resources.GetRemote&amp;#34;https://www.example.com/styles.scss&amp;#34;}} スタイル Hugoでついに外部URLのブログカードを作れるようになった【自作ショートコード】 | Hugoブログテーマ「Salt」</description></item><item><title>go 1.19アップデート内容</title><link>https://ikorihn.github.io/digitalgarden/note/go-1.19%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E5%86%85%E5%AE%B9/</link><pubDate>Fri, 05 May 2023 20:33:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-1.19%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E5%86%85%E5%AE%B9/</guid><description>Go Memory Modelを読む【入門編】 - Google スライド What is Soft Memory Limit? - Speaker Deck [shared] 20220815 What&amp;rsquo;s new in Go 1.</description></item><item><title>AWS LambdaでGoのWebサーバーを動作させる</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:30:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</guid><description/></item><item><title>go カスタムエラー</title><link>https://ikorihn.github.io/digitalgarden/note/go-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A8%E3%83%A9%E3%83%BC/</link><pubDate>Fri, 05 May 2023 19:06:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A8%E3%83%A9%E3%83%BC/</guid><description>Go でカスタムエラーを作る
aws-sdk-go-v2 でのエラーハンドリング https://github.com/aws/aws-sdk-go-v2/issues/1110
1 2 3 4 5 6 7 if err != nil { var myerr *MyError if errors.</description></item><item><title>Hugo</title><link>https://ikorihn.github.io/digitalgarden/note/Hugo/</link><pubDate>Fri, 05 May 2023 10:08:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Hugo/</guid><description/></item><item><title>Hugo relative link</title><link>https://ikorihn.github.io/digitalgarden/note/Hugo-relative-link/</link><pubDate>Fri, 05 May 2023 10:04:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Hugo-relative-link/</guid><description>Relative linking in Hugo - Nick&amp;rsquo;s Blog and Digital Garden
Hugo では相対パスでのリンクが現在サポートされていない。 かわりに、 ref と relerf を使って他のページヘのリンクを書くことができる Shortcodes | Hugo</description></item><item><title>OpenAPIでGoとTypeScriptのコード生成</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A7Go%E3%81%A8TypeScript%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</link><pubDate>Thu, 04 May 2023 23:09:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A7Go%E3%81%A8TypeScript%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</guid><description>開発言語・環境 バックエンド Go 1.18 aws-lambda-go v1.32.0 AWS SAM (API Gateway + Lambda) oapi-codegen v1.11.0 フロントエンド TypeScript 4.</description></item><item><title>Go</title><link>https://ikorihn.github.io/digitalgarden/note/Go/</link><pubDate>Thu, 04 May 2023 22:28:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go/</guid><description>Googleが開発したオープンソースのプログラミング言語 CやC++などの言語からの影響を受けており、静的型付け、メモリ安全性、ガベージコレクション、クロスプラットフォームなどの特徴がある。
シンプルで扱いやすく、高速であり、並行処理に強みを持っている。 Webアプリケーションの開発やシステムプログラミングなどにも広く使われている。</description></item><item><title>Go ターミナルのプロンプトでpasswordを入力する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%A7password%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B/</link><pubDate>Wed, 26 Apr 2023 12:10:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%A7password%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B/</guid><description>ターミナル上でパスワードを入力するとき、画面上には表示されないようにしたい。
そんなときに golang.org/x/crypto の ssh/terminal が使える
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func askCred() (string, string) { reader := bufio.</description></item><item><title>Go OSのcredential管理を利用する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-OS%E3%81%AEcredential%E7%AE%A1%E7%90%86%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</link><pubDate>Wed, 26 Apr 2023 12:06:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-OS%E3%81%AEcredential%E7%AE%A1%E7%90%86%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</guid><description>パスワードを使用するツールを作っていて、設定ファイルにパスワードを書きたくなかったため、GoでOSの管理ツールに保存、取得する方法を調べた。
MacであればKeychain、WindowsであればCredential Managerがある https://support.apple.com/guide/keychain-access/what-is-keychain-access-kyca1083/mac https://support.microsoft.com/en-us/windows/accessing-credential-manager-1b5c916a-6a16-889f-8581-fc16e8165ac0
ライブラリ zalando/go-keyring: Cross-platform keyring interface for Go が良さそう。
Linux含め各OSに対応していて、OS Xは /usr/bin/security (OS X keychain のインターフェース)、Windowsは https://github.</description></item><item><title>緯度経度で2地点間の距離を計算する</title><link>https://ikorihn.github.io/digitalgarden/note/%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6%E3%81%A72%E5%9C%B0%E7%82%B9%E9%96%93%E3%81%AE%E8%B7%9D%E9%9B%A2%E3%82%92%E8%A8%88%E7%AE%97%E3%81%99%E3%82%8B/</link><pubDate>Thu, 30 Mar 2023 17:44:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6%E3%81%A72%E5%9C%B0%E7%82%B9%E9%96%93%E3%81%AE%E8%B7%9D%E9%9B%A2%E3%82%92%E8%A8%88%E7%AE%97%E3%81%99%E3%82%8B/</guid><description>いろいろな計算式があり、精度と速度の一長一短 緯度経度を用いた3つの距離計算方法 測地線距離計算式・計算ライブラリの精度評価 - 330k info
Haversine: 完全球体とみなした計算。Great-circle distance(大円距離) Hubeny (Simple): ヒュベニの式の簡易版。カシミール3Dという地図ソフトで使われている Hubeny (Full): ヒュベニの式のオリジナル版 Vincenty: Vincentyによる式。回転楕円体上の測地線 Lambert: Lambertによる式。Geographical distance Andoyer-Lambert: Andoyerが補正を加えたもの。測地線航海算法(Geodesic Sailing) Andoyer-Lambert-Thomas: さらにThomasが補正を加えたもの。 Go言語での実装 有名所 https://pkg.</description></item><item><title>Go Echoサーバー</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC/</link><pubDate>Thu, 19 Jan 2023 10:14:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC/</guid><description>#Go
エラーハンドリング Error Handling | Echo - High performance, minimalist Go web framework</description></item><item><title>LocustとBoomerを使ってGoで負荷試験のスクリプトを書く</title><link>https://ikorihn.github.io/digitalgarden/note/Locust%E3%81%A8Boomer%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8F/</link><pubDate>Thu, 05 Jan 2023 18:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Locust%E3%81%A8Boomer%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8F/</guid><description>DMMプラットフォームを支える負荷試験基盤 - Speaker Deck gRPC + Locust + boomerで負荷試験をしてみた - Qiita
Locust はPythonでスクリプトを書く。 Goで負荷試験の処理を書きたくなったので、 Boomer を調べてみた k6もいいけど
シナリオを作成 ライブラリを取得</description></item><item><title>OpenAPIとGoでリクエストのバリデーションをする</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A8Go%E3%81%A7%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%99%E3%82%8B/</link><pubDate>Thu, 05 Jan 2023 15:51:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A8Go%E3%81%A7%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%99%E3%82%8B/</guid><description>いつもoapi-codegenでopenapi.yamlからGoのコードを生成するようにしている。 oapi-codegenの使い方については下記参照
OpenAPIでGoとTypeScriptのコード生成
OpenAPI仕様書からGoの構造体を作る
OpenAPIでパラメータに制約をつける OpenAPI Documentでは、JSON Schema の定義に従って schema に制約を書くことができる。 OpenAPI Specification - Version 3.0.3 | Swagger draft-wright-json-schema-validation-00</description></item><item><title>Go プライベートリポジトリに対してsshを使ってgo getする</title><link>https://ikorihn.github.io/digitalgarden/note/Go-%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6ssh%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6go-get%E3%81%99%E3%82%8B/</link><pubDate>Wed, 28 Dec 2022 18:05:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6ssh%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6go-get%E3%81%99%E3%82%8B/</guid><description>#Go #git
go get 時にはgit cloneが動いているのでgitの設定でコントロールできる。
tl;dr 環境変数 GOPRIVATE=&amp;lt;private repository&amp;gt; を設定する 例 export GOPRIVATE=github.com/PRIVATE 秘密鍵などsshの設定をしたい場合は環境変数 GIT_SSH_COMMAND を設定する 例 export GIT_SSH_COMMAND=ssh -i ~/.</description></item><item><title>Go Sentryに送信する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Sentry%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link><pubDate>Tue, 27 Dec 2022 10:12:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Sentry%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid><description>#Go
GoのコードでSentryにメッセージを送信するやり方
普通のGoのコード GoでSentryにエラーを送信する場合、 https://github.com/getsentry/sentry-go を使う。 以前はraven-goという名前だったので、古いページではこちらで記載されているかも。
Webフレームワーク等を使わないプレーンなGoのコードの場合、 github.com/getsentry/sentry-go をimportして呼び出せばよい
Go | Sentry Documentation
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.</description></item><item><title>Go vscode-goでgoimports時にlocalを指定する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-vscode-go%E3%81%A7goimports%E6%99%82%E3%81%ABlocal%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</link><pubDate>Thu, 22 Dec 2022 11:12:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-vscode-go%E3%81%A7goimports%E6%99%82%E3%81%ABlocal%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</guid><description>vscodeでGoのコードフォーマットに &amp;quot;go.formatTool&amp;quot;: &amp;quot;goimports&amp;quot; を指定していて、-local オプションが効かなかったので調べた。 -local は、-local &amp;quot;github.com/my/module&amp;quot; のように指定すると、importをサードパーティのモジュールと自身のモジュールでグループ分けしてくれるオプション
1 2 3 4 5 6 7 8 9 10 import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.</description></item><item><title>Go http.ClientのConnection設定値について調査</title><link>https://ikorihn.github.io/digitalgarden/note/Go-http.Client%E3%81%AEConnection%E8%A8%AD%E5%AE%9A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E6%9F%BB/</link><pubDate>Tue, 20 Dec 2022 18:17:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-http.Client%E3%81%AEConnection%E8%A8%AD%E5%AE%9A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E6%9F%BB/</guid><description>#Go
Go言語: http.Client のコネクション管理 (HTTP/1.x) - Qiita [Go] 前方互換性を保ちながらhttp.DefaultTransportからチューニングしたhttp.Transportをつくる - My External Storage
http.Client の Transport にコネクションプール関連のパラメータが設定できる。
MaxIdleConns Transport 全体で保持できる空きコネクション総数。デフォルトは100 MaxIdleConnsPerHost 接続先ごとに保持できる空きコネクション総数。デフォルトは2 MaxConnsPerHost 接続先ごとのコネクション総数(使用中・空き・接続中のものを含む)。デフォルトは0(無制限) IdleConnTimeout 空きコネクションを保持できる最長時間。デフォルトは90秒 調査用コード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 package main import ( &amp;#34;crypto/tls&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/http/httptrace&amp;#34; &amp;#34;sync &amp;#34;time&amp;#34; ) var urls = []string{ &amp;#34;http://httpbin.</description></item><item><title>Go http.ServerのGraceful shutdown</title><link>https://ikorihn.github.io/digitalgarden/note/Go-http.Server%E3%81%AEGraceful-shutdown/</link><pubDate>Sun, 18 Dec 2022 13:42:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-http.Server%E3%81%AEGraceful-shutdown/</guid><description>#Go
Go 1.8 からはhttp.ServerにGraceful Shutdownを行うための仕組みが備わっている context.Contextを渡すことで猶予時間を決めてリクエスト中の処理の終了を待つことができる
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package main import ( &amp;#34;context&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;syscall&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.</description></item><item><title>Go Revel入門</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Revel%E5%85%A5%E9%96%80/</link><pubDate>Wed, 14 Dec 2022 14:34:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Revel%E5%85%A5%E9%96%80/</guid><description>https://revel.github.io/tutorial/index.html
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # revelコマンドをインストール $ go install github.</description></item><item><title>Go Ginに入門してみる</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Gin%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</link><pubDate>Tue, 13 Dec 2022 15:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Gin%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</guid><description>#Go
Quickstart | Gin Web Framework
1 go get -u github.com/gin-gonic/gin main.go
1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &amp;#34;github.</description></item><item><title>AWS Lambdaでtmpを使うときの注意</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 30 Nov 2022 19:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</guid><description>#Go #Lambda
https://aws.amazon.com/jp/about-aws/whats-new/2022/03/aws-lambda-configure-ephemeral-storage/ https://cloud5.jp/lambda_tmp_directory/
/tmp を一時領域として10GBまで使うことができる。 Lambdaは一定期間同じインスタンスが再利用され、/tmp 領域も使い回される。 zipファイルを /tmp/ に解凍するようなことをしたとき気をつける必要がある。 前回実行時のファイルが残っている可能性があるので、
ランダムな名称で作成する 処理が終わったら削除する 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import ( &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; ) func createFile(text string) (*os.</description></item><item><title>GoのメトリクスをPrometheusで収集する</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AE%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9%E3%82%92Prometheus%E3%81%A7%E5%8F%8E%E9%9B%86%E3%81%99%E3%82%8B/</link><pubDate>Tue, 22 Nov 2022 16:48:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AE%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9%E3%82%92Prometheus%E3%81%A7%E5%8F%8E%E9%9B%86%E3%81%99%E3%82%8B/</guid><description>http.ServerのメトリクスをPrometheusで出力する https://prometheus.io/docs/tutorials/instrumenting_http_server_in_go/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.</description></item><item><title>Go echoサーバーのテスト</title><link>https://ikorihn.github.io/digitalgarden/note/Go-echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Tue, 22 Nov 2022 16:42:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description>#Go
echoのHandlerのテストは基本公式ドキュメントの通りにやればできる https://echo.labstack.com/guide/testing/
ファイルのアップロードとテキストのパラメータを同時に送る https://stackoverflow.com/questions/7223616/http-post-file-multipart
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 import ( &amp;#34;bytes&amp;#34; &amp;#34;image&amp;#34; &amp;#34;image/color&amp;#34; &amp;#34;image/png&amp;#34; &amp;#34;mime/multipart&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/http/httptest&amp;#34; &amp;#34;net/textproto&amp;#34; &amp;#34;testing&amp;#34; &amp;#34;github.</description></item><item><title>Go circuit breakerパターンを実装する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-circuit-breaker%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B/</link><pubDate>Fri, 18 Nov 2022 10:01:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-circuit-breaker%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B/</guid><description>#Go
https://learn.microsoft.com/en-us/azure/architecture/framework/resiliency/reliability-patterns
Make resilient Go net/http servers using timeouts, deadlines and context cancellation · Ilija Eftimov 👨‍🚀
マイクロサービスにおいてサービスがダウンしているときに一定時間アクセスを行わないようにすることで回復させやすくするパターン。 電気回路のサーキットブレーカーをオープンすることでショートするのを防ぐのに似ている</description></item><item><title>Go gomock を使ったテスト</title><link>https://ikorihn.github.io/digitalgarden/note/Go-gomock-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Thu, 17 Nov 2022 13:50:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-gomock-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%86%E3%82%B9%E3%83%88/</guid><description>#Go
https://github.com/golang/mock
Goのinterfaceからmockを生成するツール + 生成したコードをテストコード内で利用するためのライブラリ
s3api.go
1 2 3 4 5 type S3Api interface { DeleteObject(ctx context.Context, params *s3.</description></item><item><title>記事メモ ZOZOTOWNのGo言語におけるマイクロサービス開発の共通規約を守るための取り組み</title><link>https://ikorihn.github.io/digitalgarden/note/%E8%A8%98%E4%BA%8B%E3%83%A1%E3%83%A2-ZOZOTOWN%E3%81%AEGo%E8%A8%80%E8%AA%9E%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E9%96%8B%E7%99%BA%E3%81%AE%E5%85%B1%E9%80%9A%E8%A6%8F%E7%B4%84%E3%82%92%E5%AE%88%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF/</link><pubDate>Tue, 04 Oct 2022 23:31:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/%E8%A8%98%E4%BA%8B%E3%83%A1%E3%83%A2-ZOZOTOWN%E3%81%AEGo%E8%A8%80%E8%AA%9E%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E9%96%8B%E7%99%BA%E3%81%AE%E5%85%B1%E9%80%9A%E8%A6%8F%E7%B4%84%E3%82%92%E5%AE%88%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF/</guid><description>ZOZOTOWNのGo言語におけるマイクロサービス開発の共通規約を守るための取り組み - ZOZO TECH BLOG 開発テンプレートを用意しておいて、各マイクロサービスが最低限守って欲しい規約を守らせる バックエンドの共通規約の実装例として次のようなものがあります。 トレース ヘッダー処理 認証 必ず出力してほしい項目についてはロガーのライブラリを作っておいて共通化するのありだね リクエストスコープ全体で使いたいものはcontextに入れておくのがよさげ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func RequestMiddleware(next http.</description></item><item><title>Goでhttpコネクションを再利用されるように書く</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7http%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E6%9B%B8%E3%81%8F/</link><pubDate>Fri, 06 May 2022 19:31:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7http%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E6%9B%B8%E3%81%8F/</guid><description>#Go
responseを捨ててしまうと、resp.Body.Close() ができなくなるのでだめ 最後まで読み切ってCloseしてないとkeep-aliveしない for-loopの中でリクエストする場合きっちり毎回Closeする Goのnet/httpのclientでなぜresponseBodyをClose、読み切らなくてはいけないのか
responseBodyをCloseしないとコネクションがブロックしてしまい再利用されず、古い接続が残ったまま、新しく接続するたびに新しいGoroutineとファイルディスクリプタを作ってしまう responseBodyを読み切らないとkeepAliveされずコネクションが終了してしまい再利用されず、接続のたびに新しい接続を作ってしまう。 Connection re-use in Golang with http.Client - stuartleeks.</description></item><item><title>Go Conference 2022 Spring</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Conference-2022-Spring/</link><pubDate>Sat, 23 Apr 2022 10:36:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Conference-2022-Spring/</guid><description>#Go #meetup
https://gocon.jp/2022spring/schedule/#day_2022-04-23
資料まとめ Go Conference 2022 Spring参加メモ
静的解析 go/ast めっちゃ便利じゃん、意外と難しくない ファイルを読み込んでastでパースするといい感じにツリーができて、複雑度判定のコードを書いたりできる
PHPからリプレースした ヤプリで創業以来のPHPをGoで書き換える
「社内で導入実績があった」 やりたかったら小さいツールからでも実績作るの大事だよなー。ワイが先駆者だ
DBが混沌としているがリプレース対象はアプリケーションのみ カラムに巨大JSONを突っ込んでいるさまをchaos jsonって命名するのすき、現場は地獄 database/sql では、Scannerインターフェースを満たすように実装すれば、Selectしたときに実行されるので好きなパース処理がかける カオスを下層レイヤに閉じ込めることができた 型があるのはすばらしい エラーの握りつぶしが減る 環境構築が楽 標準パッケージが読みやすい 標準パッケージをコードリーディングする会、いいね うちでもやってみてもいいのかも？ GC Discordがパフォーマンスの理由からGoからRustに書き換えたけど、本当にそうなの？ Goのバージョンが古いので、現在ではもっと改善されている Stop The Worldの時間にSLOが設けられていて、1ms未満 GCのアルゴリズムは古くからあるものに改良を加えている concurrent mark and sweep 並行処理を使っている https://github.</description></item><item><title>go-taskを使ってGo,Echoの環境でホットリロードする</title><link>https://ikorihn.github.io/digitalgarden/note/go-task%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6GoEcho%E3%81%AE%E7%92%B0%E5%A2%83%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</link><pubDate>Mon, 18 Apr 2022 13:07:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-task%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6GoEcho%E3%81%AE%E7%92%B0%E5%A2%83%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</guid><description>#Go
GoのホットリロードはRealizeやAirを使っていたが、 go-task がいい感じにMakefileを置き換えてくれてホットリロードも実現できるので使ってみた。
go-taskでサーバーのライブリロードを実現する - Qiita
watch機能があり、 sources で指定したファイルに変更があった場合にリロードしてくれる。
1 task -w &amp;lt;TASK&amp;gt; これだけだと、起動済みサーバーを終了してから再起動とはならないので、PIDを保存しておいてSIGTERMでkillする</description></item><item><title>OpenAPI仕様書からGoの構造体を作る</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E4%BB%95%E6%A7%98%E6%9B%B8%E3%81%8B%E3%82%89Go%E3%81%AE%E6%A7%8B%E9%80%A0%E4%BD%93%E3%82%92%E4%BD%9C%E3%82%8B/</link><pubDate>Fri, 08 Apr 2022 16:28:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E4%BB%95%E6%A7%98%E6%9B%B8%E3%81%8B%E3%82%89Go%E3%81%AE%E6%A7%8B%E9%80%A0%E4%BD%93%E3%82%92%E4%BD%9C%E3%82%8B/</guid><description>https://github.com/OpenAPITools/openapi-generator
https://github.com/deepmap/oapi-codegen
1 $ oapi-codegen -generate &amp;#34;types,server&amp;#34; -package &amp;#34;openapi&amp;#34; openapi.yaml &amp;gt; openapi.gen.go oapi-codegen で生成したstructにURLパラメータをバインドできない https://github.</description></item><item><title>Lambdaでタイムアウトしたときに処理をしたい</title><link>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Thu, 09 Dec 2021 18:14:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</guid><description>#Go #Lambda
Go の AWS Lambda context オブジェクト - AWS Lambda
Lambda では実行時に context.Context を受け取ることができ、 Lambda が起動した時間＋Lambdaのタイムアウト秒を DeadLine として取得することができる。</description></item><item><title>aws-sdk-go-v2 でのエラーハンドリング</title><link>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2-%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/</link><pubDate>Wed, 01 Dec 2021 10:54:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2-%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/</guid><description>#Go #AWS
aws-sdk-go-v2 でのエラーハンドリング https://aws.github.io/aws-sdk-go-v2/docs/migrating/#errors-types v1ではawserrパッケージがあったが、v2では github.com/aws/aws-sdk-go-v2/service/&amp;lt;service&amp;gt;/types に該当のエラーの型があるのでcastする 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // V2 import &amp;#34;context&amp;#34; import &amp;#34;github.</description></item><item><title>goでDBに絡むテストをしたい</title><link>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7DB%E3%81%AB%E7%B5%A1%E3%82%80%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Sun, 28 Nov 2021 22:29:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7DB%E3%81%AB%E7%B5%A1%E3%82%80%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</guid><description>#Go
GolangでDBアクセスがあるユニットテストのやり方を考える - Qiita
SQLが実行される箇所をmockする(実際にDBに接続してSQLの結果を得る必要がない場合)
sqlmock を使う 実際のDBとテストデータを用意してSQLも実際に実行する
テスト用DBの用意
https://github.</description></item><item><title>zap.Loggerでログ出力時にSentryにも出力する</title><link>https://ikorihn.github.io/digitalgarden/note/zap.Logger%E3%81%A7%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E6%99%82%E3%81%ABSentry%E3%81%AB%E3%82%82%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</link><pubDate>Thu, 30 Sep 2021 21:15:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/zap.Logger%E3%81%A7%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E6%99%82%E3%81%ABSentry%E3%81%AB%E3%82%82%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</guid><description>https://docs.sentry.io/platforms/go/
zap初期化時に、Hookを登録することができる。 zapcore.Entryを引数に取るので、そこからメッセージやログレベルを取得してやればよい
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.</description></item><item><title>aws-sdk-go-v2を使う</title><link>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Wed, 18 Aug 2021 12:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>AWS を Go で操作するライブラリ
aws-sdk-go-v2が2021-01-19にリリースされた。 AWS SDK for Go のバージョン 2 が一般公開されました
https://aws.amazon.com/jp/sdk-for-go/
AWS SDK for Go を使用すると、AWS の使用を迅速に開始できます。この SDK を使用して、Amazon S3、Amazon DynamoDB、Amazon SQS などの AWS の各種サービスと Go アプリケーションを簡単に統合できます。</description></item><item><title>go_mockery</title><link>https://ikorihn.github.io/digitalgarden/note/go_mockery/</link><pubDate>Wed, 14 Jul 2021 20:41:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go_mockery/</guid><description>go_testifyを使う でtestify/mockを使ったが、 mockを手で作成するのは骨が折れる
そこでtestifyのmock生成には mockery を使うと便利
インストール dockerやbrewでもインストールできる。go install で入れる場合は以下
1 go install github.com/vektra/mockery/v2@latest gomockとの比較 mockライブラリといえば gomock も有名</description></item><item><title>go_jsonにmapをmarshalする</title><link>https://ikorihn.github.io/digitalgarden/note/go_json%E3%81%ABmap%E3%82%92marshal%E3%81%99%E3%82%8B/</link><pubDate>Wed, 07 Jul 2021 12:08:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go_json%E3%81%ABmap%E3%82%92marshal%E3%81%99%E3%82%8B/</guid><description>#Go
map[string]interface{} をmarshal,unmarshalできる
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type required struct { Name string Age int } type param struct { required Option map[string]interface{} } func main() { js := `{ &amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;age&amp;#34;: 25, &amp;#34;option&amp;#34;: { &amp;#34;address&amp;#34;: { &amp;#34;postal&amp;#34;: 1555555, &amp;#34;name&amp;#34;: &amp;#34;X-X-X&amp;#34; }, &amp;#34;height&amp;#34;: 172 } }` var param param err := json.</description></item><item><title>GoでJSONの時刻を扱う場合</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7JSON%E3%81%AE%E6%99%82%E5%88%BB%E3%82%92%E6%89%B1%E3%81%86%E5%A0%B4%E5%90%88/</link><pubDate>Mon, 05 Jul 2021 10:59:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7JSON%E3%81%AE%E6%99%82%E5%88%BB%E3%82%92%E6%89%B1%E3%81%86%E5%A0%B4%E5%90%88/</guid><description>#Go
JSONのmarshal/unmarshalで日時フォーマットを指定する データをJSONに変換するときに任意のフォーマットを設定する - Qiita
Marshaler, Unmarshaler インターフェースを実装することで、任意のフォーマットを指定することができる
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) const ( p = `{&amp;#34;time&amp;#34;: &amp;#34;2021/07/01 19:30:00&amp;#34;}` ) type Message struct { Time JSONTime `json:&amp;#34;time&amp;#34;` } type JSONTime struct { time.</description></item><item><title>goでsingleton</title><link>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7singleton/</link><pubDate>Fri, 02 Jul 2021 17:59:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7singleton/</guid><description>#Go
How singleton pattern works with Golang | by Jefferson Otoni Lima | Golang Issue | Medium Go 言語における Singleton Pattern | text.</description></item><item><title>Goに三項演算子が採用されない理由</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AB%E4%B8%89%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%8C%E6%8E%A1%E7%94%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E7%90%86%E7%94%B1/</link><pubDate>Sun, 20 Jun 2021 23:30:20 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AB%E4%B8%89%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%8C%E6%8E%A1%E7%94%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E7%90%86%E7%94%B1/</guid><description>#Go
Goに三項演算子が採用されない理由 if-elseは長くなるが間違いない、明確 結局、分岐は行をわけて分岐が目で追えるほうがデバッグしやすい カバレッジは行単位で計測されることが多く、三項演算子だとカバレッジが正しく計測できない switch文もある コミュニティは賛成派４０％、否定派６０％程度。しかし賛成比率が上がってもそれだけで採用されることはなさそう</description></item><item><title>gomplate</title><link>https://ikorihn.github.io/digitalgarden/note/gomplate/</link><pubDate>Wed, 09 Jun 2021 18:59:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/gomplate/</guid><description>#Go
https://docs.gomplate.ca/installing/
goのテンプレートエンジン
使い方
1 2 3 $ echo &amp;#39;My voice is my {{.Env.THING}}. {{(datasource &amp;#34;vault&amp;#34;).value}}&amp;#39; \ | docker run -i -e THING=passport -v /home/me/.</description></item><item><title>NatureRemo</title><link>https://ikorihn.github.io/digitalgarden/note/NatureRemo/</link><pubDate>Mon, 09 Nov 2020 19:42:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/NatureRemo/</guid><description>2020-11-18 Nature Remo Go 勉強会 シングルバイナリにこだわる (@fujiwara) Go で Lambda ランタイムの寿命に影響されにくい 起動が早い LambdaでもCLIでも動く一個のバイナリを置いておきたい AWS_EXECUTION_ENV の環境変数があるかどうかで判別 Lambdaでは起動時にコマンドライン引数を指定できないのでflagは環境変数でも指定できるようにしておく Lambdaでもそうでない環境でも動くようにしておくとEC2への移植性が高まる fluct事例 (@suzu_v) スループット ちょっとビルド・テストをしやすくしたいときにGoがちょうどいい Nature Remo (@songmu) github.</description></item><item><title>pver_with_cobra</title><link>https://ikorihn.github.io/digitalgarden/note/pver_with_cobra/</link><pubDate>Sat, 26 Sep 2020 16:02:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/pver_with_cobra/</guid><description>pver_with_cobra cobra init cobra add new関数でコマンドを初期化 DIのためと思ってそうしたけど、後でroot.go内で初期化するようにしたので必要なかった rootコマンドはテストしづらくなるが、rootには機能もたせないのがよさそう testを追加 cmd.SetOut でbufferに出力させる cmdパッケージは入出力、serviceパッケージはビジネスロジック、infraパッケージはAPI,DBみたいにわけた テストは書きやすくなった気がする ダックタイピングがちょっとわかった service層にはinterfaceをもたせてinfra層で実装することで依存関係逆転させた デバッグ目的以外でcmd層以外では出力しない</description></item></channel></rss>