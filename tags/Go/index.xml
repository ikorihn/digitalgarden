<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on</title><link>https://ikorihn.github.io/digitalgarden/tags/Go/</link><description>Recent content in Go on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Aug 2023 18:03:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/Go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 呼び出し元の関数名を含めてログ出力する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E5%85%83%E3%81%AE%E9%96%A2%E6%95%B0%E5%90%8D%E3%82%92%E5%90%AB%E3%82%81%E3%81%A6%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</link><pubDate>Mon, 07 Aug 2023 18:03:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E5%85%83%E3%81%AE%E9%96%A2%E6%95%B0%E5%90%8D%E3%82%92%E5%90%AB%E3%82%81%E3%81%A6%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</guid><description>複数箇所にデバッグ用のログを仕込むにあたって、呼び出し元を勝手に挿入してくれると助かるので方法を調べた。 https://stackoverflow.com/questions/25927660/how-to-get-the-current-function-name runtime.CallersFrames を使って呼び出し元を特定できる。</description></item><item><title>Go checksumの照合について</title><link>https://ikorihn.github.io/digitalgarden/note/Go-checksum%E3%81%AE%E7%85%A7%E5%90%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link><pubDate>Mon, 10 Jul 2023 14:54:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-checksum%E3%81%AE%E7%85%A7%E5%90%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid><description>Go のモジュールを JFrog Artifactory にアップして取得する運用をしているのだが、モジュールをGitリポジトリから取得した場合とJFrogから取得した場合でハッ</description></item><item><title>Go 複数のLambdaで共通で実行する処理をmiddlewareで書く</title><link>https://ikorihn.github.io/digitalgarden/note/Go-%E8%A4%87%E6%95%B0%E3%81%AELambda%E3%81%A7%E5%85%B1%E9%80%9A%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E5%87%A6%E7%90%86%E3%82%92middleware%E3%81%A7%E6%9B%B8%E3%81%8F/</link><pubDate>Sat, 17 Jun 2023 23:33:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-%E8%A4%87%E6%95%B0%E3%81%AELambda%E3%81%A7%E5%85%B1%E9%80%9A%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E5%87%A6%E7%90%86%E3%82%92middleware%E3%81%A7%E6%9B%B8%E3%81%8F/</guid><description>API Gateway向けの AWS Lambda のハンドラーをGoで作成する場合、普通に書くとこのように、main関数から特定のシグネチャの関数を lambda.Start で呼び出す。 https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html</description></item><item><title>Go oapi-codegenでparametersを独自型にバインドする</title><link>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%81%A7parameters%E3%82%92%E7%8B%AC%E8%87%AA%E5%9E%8B%E3%81%AB%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B/</link><pubDate>Thu, 08 Jun 2023 11:27:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%81%A7parameters%E3%82%92%E7%8B%AC%E8%87%AA%E5%9E%8B%E3%81%AB%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B/</guid><description/></item><item><title>Go GORMでPrepareStmt trueにしたときにメモリリークが発生した</title><link>https://ikorihn.github.io/digitalgarden/note/Go-GORM%E3%81%A7PrepareStmt-true%E3%81%AB%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%97%E3%81%9F/</link><pubDate>Thu, 08 Jun 2023 10:35:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-GORM%E3%81%A7PrepareStmt-true%E3%81%AB%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%97%E3%81%9F/</guid><description>パフォーマンス向上のため、PrepareStmtをtrueにした。 https://gorm.io/docs/performance.html#Caches-Prepared-Statement これは標準パッケージの PrepareContext の実行結果の sql.Stmt をキャッシュしておいて、2回目以降</description></item><item><title>Go oapi-codegenを使ったコード生成</title><link>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</link><pubDate>Mon, 29 May 2023 12:05:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-oapi-codegen%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</guid><description>導入した結果 仕様書とコードが一致するようになった それぞれの言語向けにAPIレスポンスのコードを実装するコストが減った フロントエンドとバックエ</description></item><item><title>chromedpを使ってGoでChromeを自動操作する</title><link>https://ikorihn.github.io/digitalgarden/blog/chromedp%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7Chrome%E3%82%92%E8%87%AA%E5%8B%95%E6%93%8D%E4%BD%9C%E3%81%99%E3%82%8B/</link><pubDate>Sun, 28 May 2023 18:29:44 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/blog/chromedp%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7Chrome%E3%82%92%E8%87%AA%E5%8B%95%E6%93%8D%E4%BD%9C%E3%81%99%E3%82%8B/</guid><description>普段の業務でWebページを開いてグラフをキャプチャしたり、勤怠入力をしたりといったルーチンの作業を自動化できないかなと思いました。 こうしたブ</description></item><item><title>Go GORMでSQL実行前後に実行されるHookを登録する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-GORM%E3%81%A7SQL%E5%AE%9F%E8%A1%8C%E5%89%8D%E5%BE%8C%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8BHook%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B/</link><pubDate>Fri, 19 May 2023 17:54:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-GORM%E3%81%A7SQL%E5%AE%9F%E8%A1%8C%E5%89%8D%E5%BE%8C%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8BHook%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B/</guid><description>構造体単位で適用する gorm.DB全体に適用する Plugin を使ってGlobalに設定することも可能 定義済みのcallbackはこちら https://github.com/go-gorm/gorm/blob/master/callbacks/callbacks.go Query() に対して gorm:query と</description></item><item><title>Go Neovimでtemplateのsyntax highlightを効かせる</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Neovim%E3%81%A7template%E3%81%AEsyntax-highlight%E3%82%92%E5%8A%B9%E3%81%8B%E3%81%9B%E3%82%8B/</link><pubDate>Fri, 19 May 2023 11:55:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Neovim%E3%81%A7template%E3%81%AEsyntax-highlight%E3%82%92%E5%8A%B9%E3%81%8B%E3%81%9B%E3%82%8B/</guid><description>これを入れた GitHub - ngalaiko/tree-sitter-go-template: Golang template grammar for tree-sitter Golang template grammar for tree-sitter. Contribute to ngalaiko/tree-sitter-go-template development by creating an account on GitHub. text/template の nvim-treesitter 向けのパーサー セットアップ 公式の通りだがメモしておく parserに追加したあ</description></item><item><title>go モジュールのタグを別のコミットハッシュにつけ直したらcacheが残っていてパッケージうまく読み込めなかった</title><link>https://ikorihn.github.io/digitalgarden/note/go-%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%BF%E3%82%B0%E3%82%92%E5%88%A5%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AB%E3%81%A4%E3%81%91%E7%9B%B4%E3%81%97%E3%81%9F%E3%82%89cache%E3%81%8C%E6%AE%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%81%A6%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%86%E3%81%BE%E3%81%8F%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F/</link><pubDate>Thu, 18 May 2023 19:25:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%BF%E3%82%B0%E3%82%92%E5%88%A5%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AB%E3%81%A4%E3%81%91%E7%9B%B4%E3%81%97%E3%81%9F%E3%82%89cache%E3%81%8C%E6%AE%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%81%A6%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%86%E3%81%BE%E3%81%8F%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F/</guid><description>そもそもそんなことしないほうがいいというのは承知で、開発中のパッケージなどでタグをうちまちがえたので修正したところ新しいコミットがダウンロー</description></item><item><title>Hugo 外部リンクをカードで表示する</title><link>https://ikorihn.github.io/digitalgarden/note/Hugo-%E5%A4%96%E9%83%A8%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E3%82%AB%E3%83%BC%E3%83%89%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</link><pubDate>Sun, 07 May 2023 16:19:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Hugo-%E5%A4%96%E9%83%A8%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E3%82%AB%E3%83%BC%E3%83%89%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</guid><description>Hugo で、ブログでよく見るリンクをカードで表示するやつをやりたい resources.GetRemote を利用することで、ビルドのタイミングで指定したURLへアクセスしてリソースを取</description></item><item><title>go 1.19アップデート内容</title><link>https://ikorihn.github.io/digitalgarden/note/go-1.19%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E5%86%85%E5%AE%B9/</link><pubDate>Fri, 05 May 2023 20:33:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-1.19%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E5%86%85%E5%AE%B9/</guid><description>Go Memory Modelを読む【入門編】 - Google スライド What is Soft Memory Limit? - Speaker Deck [shared] 20220815 What&amp;rsquo;s new in Go 1.19? - Google スライド Go1.19で採用された Pattern-defeating Quicksort の紹介 - Speaker Deck</description></item><item><title>AWS LambdaでGoのWebサーバーを動作させる</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:30:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7Go%E3%81%AEWeb%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%8B%95%E4%BD%9C%E3%81%95%E3%81%9B%E3%82%8B/</guid><description/></item><item><title>go カスタムエラー</title><link>https://ikorihn.github.io/digitalgarden/note/go-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A8%E3%83%A9%E3%83%BC/</link><pubDate>Fri, 05 May 2023 19:06:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A8%E3%83%A9%E3%83%BC/</guid><description>Go でカスタムエラーを作る aws-sdk-go-v2 でのエラーハンドリング https://github.com/aws/aws-sdk-go-v2/issues/1110 1 2 3 4 5 6 7 if err != nil { var myerr *MyError if errors.As(err, &amp;amp;myerr) { return nil, ErrHoge } return nil, err }</description></item><item><title>Hugo</title><link>https://ikorihn.github.io/digitalgarden/note/Hugo/</link><pubDate>Fri, 05 May 2023 10:08:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Hugo/</guid><description/></item><item><title>Hugo relative link</title><link>https://ikorihn.github.io/digitalgarden/note/Hugo-relative-link/</link><pubDate>Fri, 05 May 2023 10:04:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Hugo-relative-link/</guid><description>Relative linking in Hugo - Nick&amp;rsquo;s Blog and Digital Garden Hugo では相対パスでのリンクが現在サポートされていない。 かわりに、 ref と relerf を使って他のページヘのリンクを書くことができる Shortcodes | Hugo</description></item><item><title>OpenAPIでGoとTypeScriptのコード生成</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A7Go%E3%81%A8TypeScript%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</link><pubDate>Thu, 04 May 2023 23:09:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A7Go%E3%81%A8TypeScript%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E7%94%9F%E6%88%90/</guid><description>開発言語・環境 バックエンド Go 1.18 aws-lambda-go v1.32.0 AWS SAM (API Gateway + Lambda) oapi-codegen v1.11.0 フロントエンド TypeScript 4.6 Nuxt.js 2.16 axios v0.21.4 OpenAPI Generator 5.4.0 ※ コードを使った説明が多く出てきますが、各言語やライブラリ</description></item><item><title>Go</title><link>https://ikorihn.github.io/digitalgarden/note/Go/</link><pubDate>Thu, 04 May 2023 22:28:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go/</guid><description>Googleが開発したオープンソースのプログラミング言語 CやC++などの言語からの影響を受けており、静的型付け、メモリ安全性、ガベージコレク</description></item><item><title>Go ターミナルのプロンプトでpasswordを入力する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%A7password%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B/</link><pubDate>Wed, 26 Apr 2023 12:10:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88%E3%81%A7password%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B/</guid><description>ターミナル上でパスワードを入力するとき、画面上には表示されないようにしたい。 そんなときに golang.org/x/crypto の ssh/terminal が使える 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func askCred() (string, string)</description></item><item><title>Go OSのcredential管理を利用する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-OS%E3%81%AEcredential%E7%AE%A1%E7%90%86%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</link><pubDate>Wed, 26 Apr 2023 12:06:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-OS%E3%81%AEcredential%E7%AE%A1%E7%90%86%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</guid><description>パスワードを使用するツールを作っていて、設定ファイルにパスワードを書きたくなかったため、GoでOSの管理ツールに保存、取得する方法を調べた。</description></item><item><title>緯度経度で2地点間の距離を計算する</title><link>https://ikorihn.github.io/digitalgarden/note/%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6%E3%81%A72%E5%9C%B0%E7%82%B9%E9%96%93%E3%81%AE%E8%B7%9D%E9%9B%A2%E3%82%92%E8%A8%88%E7%AE%97%E3%81%99%E3%82%8B/</link><pubDate>Thu, 30 Mar 2023 17:44:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6%E3%81%A72%E5%9C%B0%E7%82%B9%E9%96%93%E3%81%AE%E8%B7%9D%E9%9B%A2%E3%82%92%E8%A8%88%E7%AE%97%E3%81%99%E3%82%8B/</guid><description>いろいろな計算式があり、精度と速度の一長一短 緯度経度を用いた3つの距離計算方法 測地線距離計算式・計算ライブラリの精度評価 - 330k info Haversine: 完全球体とみ</description></item><item><title>Go Echoサーバー</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC/</link><pubDate>Thu, 19 Jan 2023 10:14:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC/</guid><description>#Go エラーハンドリング Error Handling | Echo - High performance, minimalist Go web framework</description></item><item><title>LocustとBoomerを使ってGoで負荷試験のスクリプトを書く</title><link>https://ikorihn.github.io/digitalgarden/note/Locust%E3%81%A8Boomer%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8F/</link><pubDate>Thu, 05 Jan 2023 18:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Locust%E3%81%A8Boomer%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6Go%E3%81%A7%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8F/</guid><description>DMMプラットフォームを支える負荷試験基盤 - Speaker Deck gRPC + Locust + boomerで負荷試験をしてみた - Qiita Locust はPythonでスクリプトを書く。 Goで負荷</description></item><item><title>OpenAPIとGoでリクエストのバリデーションをする</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A8Go%E3%81%A7%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%99%E3%82%8B/</link><pubDate>Thu, 05 Jan 2023 15:51:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E3%81%A8Go%E3%81%A7%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%99%E3%82%8B/</guid><description>いつもoapi-codegenでopenapi.yamlからGoのコードを生成するようにしている。 oapi-codegenの使い方については</description></item><item><title>Go プライベートリポジトリに対してsshを使ってgo getする</title><link>https://ikorihn.github.io/digitalgarden/note/Go-%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6ssh%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6go-get%E3%81%99%E3%82%8B/</link><pubDate>Wed, 28 Dec 2022 18:05:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6ssh%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6go-get%E3%81%99%E3%82%8B/</guid><description>#Go #git go get 時にはgit cloneが動いているのでgitの設定でコントロールできる。 tl;dr 環境変数 GOPRIVATE=&amp;lt;private repository&amp;gt; を設定する 例 export GOPRIVATE=github.com/PRIVATE 秘密鍵などsshの設定をしたい</description></item><item><title>Go Sentryに送信する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Sentry%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link><pubDate>Tue, 27 Dec 2022 10:12:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Sentry%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid><description>#Go GoのコードでSentryにメッセージを送信するやり方 普通のGoのコード GoでSentryにエラーを送信する場合、 https://github.com/getsentry/sentry-go を使う。 以前はrave</description></item><item><title>Go vscode-goでgoimports時にlocalを指定する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-vscode-go%E3%81%A7goimports%E6%99%82%E3%81%ABlocal%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</link><pubDate>Thu, 22 Dec 2022 11:12:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-vscode-go%E3%81%A7goimports%E6%99%82%E3%81%ABlocal%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</guid><description>vscodeでGoのコードフォーマットに &amp;quot;go.formatTool&amp;quot;: &amp;quot;goimports&amp;quot; を指定していて、-local オプションが効かなかったので調べた。 -local は、-local &amp;quot;github.com/my/module&amp;quot; のように指定</description></item><item><title>Go http.ClientのConnection設定値について調査</title><link>https://ikorihn.github.io/digitalgarden/note/Go-http.Client%E3%81%AEConnection%E8%A8%AD%E5%AE%9A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E6%9F%BB/</link><pubDate>Tue, 20 Dec 2022 18:17:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-http.Client%E3%81%AEConnection%E8%A8%AD%E5%AE%9A%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E6%9F%BB/</guid><description>#Go Go言語: http.Client のコネクション管理 (HTTP/1.x) - Qiita [Go] 前方互換性を保ちながらhttp.DefaultTransportからチューニングしたhttp.Tra</description></item><item><title>Go http.ServerのGraceful shutdown</title><link>https://ikorihn.github.io/digitalgarden/note/Go-http.Server%E3%81%AEGraceful-shutdown/</link><pubDate>Sun, 18 Dec 2022 13:42:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-http.Server%E3%81%AEGraceful-shutdown/</guid><description>#Go Go 1.8 からはhttp.ServerにGraceful Shutdownを行うための仕組みが備わっている context.Contextを渡すこと</description></item><item><title>Go Revel入門</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Revel%E5%85%A5%E9%96%80/</link><pubDate>Wed, 14 Dec 2022 14:34:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Revel%E5%85%A5%E9%96%80/</guid><description>https://revel.github.io/tutorial/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # revelコマンドをインストール $ go install github.com/revel/cmd/revel@latest $ revel Usage: revel [OPTIONS] &amp;lt;command&amp;gt; Application Options: -v, --debug If set the logger is set to verbose --historic-run-mode If set the runmode is passed a string not</description></item><item><title>Go Ginに入門してみる</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Gin%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</link><pubDate>Tue, 13 Dec 2022 15:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Gin%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</guid><description>#Go Quickstart | Gin Web Framework 1 go get -u github.com/gin-gonic/gin main.go 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main() { r := gin.Default() r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;pong&amp;#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } Graceful shutdownを実装する https://gin-gonic.com/docs/examples/graceful-restart-or-stop/ Go h</description></item><item><title>AWS Lambdaでtmpを使うときの注意</title><link>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 30 Nov 2022 19:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/AWS-Lambda%E3%81%A7tmp%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</guid><description>#Go #Lambda https://aws.amazon.com/jp/about-aws/whats-new/2022/03/aws-lambda-configure-ephemeral-storage/ https://cloud5.jp/lambda_tmp_directory/ /tmp を一時領域として10GBまで使うことができる。 Lambdaは一定期間同じインスタンスが再利用され、/tmp 領域も使い回される。 zi</description></item><item><title>GoのメトリクスをPrometheusで収集する</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AE%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9%E3%82%92Prometheus%E3%81%A7%E5%8F%8E%E9%9B%86%E3%81%99%E3%82%8B/</link><pubDate>Tue, 22 Nov 2022 16:48:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AE%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9%E3%82%92Prometheus%E3%81%A7%E5%8F%8E%E9%9B%86%E3%81%99%E3%82%8B/</guid><description>http.ServerのメトリクスをPrometheusで出力する https://prometheus.io/docs/tutorials/instrumenting_http_server_in_go/ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/prometheus/client_golang/prometheus&amp;#34;</description></item><item><title>Go echoサーバーのテスト</title><link>https://ikorihn.github.io/digitalgarden/note/Go-echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Tue, 22 Nov 2022 16:42:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-echo%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description>#Go echoのHandlerのテストは基本公式ドキュメントの通りにやればできる https://echo.labstack.com/guide/testing/ ファイルのアップロードとテキストのパラメータを同時に送る https://stackoverflow.com/questions/7223616/http-post-file-multipart 1 2</description></item><item><title>Go circuit breakerパターンを実装する</title><link>https://ikorihn.github.io/digitalgarden/note/Go-circuit-breaker%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B/</link><pubDate>Fri, 18 Nov 2022 10:01:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-circuit-breaker%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B/</guid><description>#Go https://learn.microsoft.com/en-us/azure/architecture/framework/resiliency/reliability-patterns Make resilient Go net/http servers using timeouts, deadlines and context cancellation · Ilija Eftimov 👨‍🚀 マイクロサービスにおいてサービスがダウンしているときに一定時間アクセスを行わないようにすることで回復さ</description></item><item><title>Go gomock を使ったテスト</title><link>https://ikorihn.github.io/digitalgarden/note/Go-gomock-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Thu, 17 Nov 2022 13:50:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-gomock-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%86%E3%82%B9%E3%83%88/</guid><description>#Go https://github.com/golang/mock Goのinterfaceからmockを生成するツール + 生成したコードをテストコード内で利用するためのライブラリ s3api.go 1 2 3 4 5 type S3Api interface { DeleteObject(ctx context.Context, params</description></item><item><title>記事メモ ZOZOTOWNのGo言語におけるマイクロサービス開発の共通規約を守るための取り組み</title><link>https://ikorihn.github.io/digitalgarden/note/%E8%A8%98%E4%BA%8B%E3%83%A1%E3%83%A2-ZOZOTOWN%E3%81%AEGo%E8%A8%80%E8%AA%9E%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E9%96%8B%E7%99%BA%E3%81%AE%E5%85%B1%E9%80%9A%E8%A6%8F%E7%B4%84%E3%82%92%E5%AE%88%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF/</link><pubDate>Tue, 04 Oct 2022 23:31:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/%E8%A8%98%E4%BA%8B%E3%83%A1%E3%83%A2-ZOZOTOWN%E3%81%AEGo%E8%A8%80%E8%AA%9E%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E9%96%8B%E7%99%BA%E3%81%AE%E5%85%B1%E9%80%9A%E8%A6%8F%E7%B4%84%E3%82%92%E5%AE%88%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF/</guid><description>ZOZOTOWNのGo言語におけるマイクロサービス開発の共通規約を守るための取り組み - ZOZO TECH BLOG 開発テンプレートを用意しておいて、各マイクロサー</description></item><item><title>Goでhttpコネクションを再利用されるように書く</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7http%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E6%9B%B8%E3%81%8F/</link><pubDate>Fri, 06 May 2022 19:31:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7http%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%95%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E6%9B%B8%E3%81%8F/</guid><description>#Go responseを捨ててしまうと、resp.Body.Close() ができなくなるのでだめ 最後まで読み切ってCloseしてないとkeep-</description></item><item><title>Go Conference 2022 Spring</title><link>https://ikorihn.github.io/digitalgarden/note/Go-Conference-2022-Spring/</link><pubDate>Sat, 23 Apr 2022 10:36:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go-Conference-2022-Spring/</guid><description>#Go #meetup https://gocon.jp/2022spring/schedule/#day_2022-04-23 資料まとめ Go Conference 2022 Spring参加メモ 静的解析 go/ast めっちゃ便利じゃん、意外と難しくない ファイルを読み込んでastでパースするといい感じにツ</description></item><item><title>go-taskを使ってGo,Echoの環境でホットリロードする</title><link>https://ikorihn.github.io/digitalgarden/note/go-task%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6GoEcho%E3%81%AE%E7%92%B0%E5%A2%83%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</link><pubDate>Mon, 18 Apr 2022 13:07:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go-task%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6GoEcho%E3%81%AE%E7%92%B0%E5%A2%83%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</guid><description>#Go GoのホットリロードはRealizeやAirを使っていたが、 go-task がいい感じにMakefileを置き換えてくれてホットリロードも実現できるので</description></item><item><title>OpenAPI仕様書からGoの構造体を作る</title><link>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E4%BB%95%E6%A7%98%E6%9B%B8%E3%81%8B%E3%82%89Go%E3%81%AE%E6%A7%8B%E9%80%A0%E4%BD%93%E3%82%92%E4%BD%9C%E3%82%8B/</link><pubDate>Fri, 08 Apr 2022 16:28:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/OpenAPI%E4%BB%95%E6%A7%98%E6%9B%B8%E3%81%8B%E3%82%89Go%E3%81%AE%E6%A7%8B%E9%80%A0%E4%BD%93%E3%82%92%E4%BD%9C%E3%82%8B/</guid><description>https://github.com/OpenAPITools/openapi-generator https://github.com/deepmap/oapi-codegen 1 $ oapi-codegen -generate &amp;#34;types,server&amp;#34; -package &amp;#34;openapi&amp;#34; openapi.yaml &amp;gt; openapi.gen.go oapi-codegen で生成したstructにURLパラメータをバインドできない https://github.com/deepmap/oapi-codegen/issues/500 oapi-codegen -generate &amp;quot;types&amp;quot; -package &amp;quot;openapi&amp;quot; openapi.yaml で以下のようなコードが生成される 1 2 3 4 5</description></item><item><title>Lambdaでタイムアウトしたときに処理をしたい</title><link>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Thu, 09 Dec 2021 18:14:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Lambda%E3%81%A7%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</guid><description>#Go #Lambda Go の AWS Lambda context オブジェクト - AWS Lambda Lambda では実行時に context.Context を受け取ることができ、 Lambda が起動した時間＋Lambdaのタイムアウト秒を DeadLine として取得することが</description></item><item><title>aws-sdk-go-v2 でのエラーハンドリング</title><link>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2-%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/</link><pubDate>Wed, 01 Dec 2021 10:54:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2-%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/</guid><description>#Go #AWS aws-sdk-go-v2 でのエラーハンドリング https://aws.github.io/aws-sdk-go-v2/docs/migrating/#errors-types v1ではawserrパッケージがあったが、v2では github.com/aws/aws-sdk-go-v2/service/&amp;lt;service&amp;gt;/types に該当のエラーの型があるのでcastする 1 2 3 4 5 6 7 8 9</description></item><item><title>goでDBに絡むテストをしたい</title><link>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7DB%E3%81%AB%E7%B5%A1%E3%82%80%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</link><pubDate>Sun, 28 Nov 2021 22:29:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7DB%E3%81%AB%E7%B5%A1%E3%82%80%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E3%81%97%E3%81%9F%E3%81%84/</guid><description>#Go GolangでDBアクセスがあるユニットテストのやり方を考える - Qiita SQLが実行される箇所をmockする(実際にDBに接続してSQLの結果を</description></item><item><title>zap.Loggerでログ出力時にSentryにも出力する</title><link>https://ikorihn.github.io/digitalgarden/note/zap.Logger%E3%81%A7%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E6%99%82%E3%81%ABSentry%E3%81%AB%E3%82%82%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</link><pubDate>Thu, 30 Sep 2021 21:15:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/zap.Logger%E3%81%A7%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E6%99%82%E3%81%ABSentry%E3%81%AB%E3%82%82%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/</guid><description>https://docs.sentry.io/platforms/go/ zap初期化時に、Hookを登録することができる。 zapcore.Entryを引数に取るので、そこからメッセージやログレベルを取得してやれ</description></item><item><title>aws-sdk-go-v2を使う</title><link>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Wed, 18 Aug 2021 12:13:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/aws-sdk-go-v2%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>AWS を Go で操作するライブラリ aws-sdk-go-v2が2021-01-19にリリースされた。 AWS SDK for Go のバージョン 2 が一般公開されました https://aws.amazon.com/jp/sdk-for-go/ AWS SDK</description></item><item><title>go_mockery</title><link>https://ikorihn.github.io/digitalgarden/note/go_mockery/</link><pubDate>Wed, 14 Jul 2021 20:41:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go_mockery/</guid><description>go_testifyを使う でtestify/mockを使ったが、 mockを手で作成するのは骨が折れる そこでtestifyのmock生成には mockery</description></item><item><title>go_jsonにmapをmarshalする</title><link>https://ikorihn.github.io/digitalgarden/note/go_json%E3%81%ABmap%E3%82%92marshal%E3%81%99%E3%82%8B/</link><pubDate>Wed, 07 Jul 2021 12:08:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go_json%E3%81%ABmap%E3%82%92marshal%E3%81%99%E3%82%8B/</guid><description>#Go map[string]interface{} をmarshal,unmarshalできる 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type required struct { Name string Age int</description></item><item><title>GoでJSONの時刻を扱う場合</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7JSON%E3%81%AE%E6%99%82%E5%88%BB%E3%82%92%E6%89%B1%E3%81%86%E5%A0%B4%E5%90%88/</link><pubDate>Mon, 05 Jul 2021 10:59:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%A7JSON%E3%81%AE%E6%99%82%E5%88%BB%E3%82%92%E6%89%B1%E3%81%86%E5%A0%B4%E5%90%88/</guid><description>#Go JSONのmarshal/unmarshalで日時フォーマットを指定する データをJSONに変換するときに任意のフォーマットを設定する - Qiita Marshaler,</description></item><item><title>goでsingleton</title><link>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7singleton/</link><pubDate>Fri, 02 Jul 2021 17:59:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/go%E3%81%A7singleton/</guid><description>#Go How singleton pattern works with Golang | by Jefferson Otoni Lima | Golang Issue | Medium Go 言語における Singleton Pattern | text.Baldanders.info よくやるやつ なにも考えずにつくるとこうなる 1 2 3 4 5 6 7 8 var instance *Config func GetInstance() *Config { if instance == nil { instance</description></item><item><title>Goに三項演算子が採用されない理由</title><link>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AB%E4%B8%89%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%8C%E6%8E%A1%E7%94%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E7%90%86%E7%94%B1/</link><pubDate>Sun, 20 Jun 2021 23:30:20 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Go%E3%81%AB%E4%B8%89%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%8C%E6%8E%A1%E7%94%A8%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E7%90%86%E7%94%B1/</guid><description>#Go Goに三項演算子が採用されない理由 if-elseは長くなるが間違いない、明確 結局、分岐は行をわけて分岐が目で追えるほうがデバッグしやすい カ</description></item><item><title>gomplate</title><link>https://ikorihn.github.io/digitalgarden/note/gomplate/</link><pubDate>Wed, 09 Jun 2021 18:59:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/gomplate/</guid><description>#Go https://docs.gomplate.ca/installing/ goのテンプレートエンジン 使い方 1 2 3 $ echo &amp;#39;My voice is my {{.Env.THING}}. {{(datasource &amp;#34;vault&amp;#34;).value}}&amp;#39; \ | docker run -i -e THING=passport -v /home/me/.vault-token:/root/.vault-token hairyhenderson/gomplate -d vault=vault:///secret/sneakers -f - My voice is my passport. Verify me.</description></item><item><title>NatureRemo</title><link>https://ikorihn.github.io/digitalgarden/note/NatureRemo/</link><pubDate>Mon, 09 Nov 2020 19:42:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/NatureRemo/</guid><description>2020-11-18 Nature Remo Go 勉強会 シングルバイナリにこだわる (@fujiwara) Go で Lambda ランタイムの寿命に影響されにくい 起動が早い LambdaでもCLIでも動く一個のバイナリを置い</description></item><item><title>pver_with_cobra</title><link>https://ikorihn.github.io/digitalgarden/note/pver_with_cobra/</link><pubDate>Sat, 26 Sep 2020 16:02:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/pver_with_cobra/</guid><description>pver_with_cobra cobra init cobra add new関数でコマンドを初期化 DIのためと思ってそうしたけど、後でroot.go内で初期化するようにしたので必要なかった rootコマ</description></item></channel></rss>