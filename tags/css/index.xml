<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>css on</title><link>https://ikorihn.github.io/digitalgarden/tags/css/</link><description>Recent content in css on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Jun 2021 17:18:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/tags/css/index.xml" rel="self" type="application/rss+xml"/><item><title>Semanticとは</title><link>https://ikorihn.github.io/digitalgarden/note/Semantic%E3%81%A8%E3%81%AF/</link><pubDate>Mon, 07 Jun 2021 17:18:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Semantic%E3%81%A8%E3%81%AF/</guid><description>#css
意味論的 という単語
HTMLタグや、cssのクラス名を、画面内の意味に即したものを選択したり名付けたりするというようなこと、と理解</description></item><item><title>TailwindCSS</title><link>https://ikorihn.github.io/digitalgarden/note/TailwindCSS/</link><pubDate>Mon, 07 Jun 2021 17:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/TailwindCSS/</guid><description>#TailwindCSS #css
https://tailwindcss.com/
ユーティリティファーストでCSSクラスを組み合わせることでデザインする
“Best practices” don’t actually work.
伝統的な semantic class name(スタイル名ではなく、パーツの画面内での意味で名前をつけるみたいなこと) がベストプラクティスとされてきたが、実際にやってみるとメンテナンスを困難にしていることがわかる
TailwindCSS入門 ~ Utility First + デザインシステムの構築 ~ - Qiita #article</description></item><item><title>Vue-Storybook-Tailwind-Sassのセットアップ</title><link>https://ikorihn.github.io/digitalgarden/note/Vue-Storybook-Tailwind-Sass%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/</link><pubDate>Sun, 30 May 2021 18:55:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/Vue-Storybook-Tailwind-Sass%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/</guid><description>Vue-Storybook-Tailwind-Sass ~/.storybook/main.js
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 webpackFinal: async (config) =&amp;gt; { config.</description></item><item><title>css 吹き出しをつくる</title><link>https://ikorihn.github.io/digitalgarden/note/css-%E5%90%B9%E3%81%8D%E5%87%BA%E3%81%97%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B/</link><pubDate>Sun, 30 May 2021 18:49:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/css-%E5%90%B9%E3%81%8D%E5%87%BA%E3%81%97%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B/</guid><description>CSSで吹き出しを作る https://lpeg.info/html/css_bubble.html
Vueコンポーネント+TailwindCSSでの書き方
したむきの枠線つき吹き出し
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;speech-balloon relative inline-block rounded-3xl border border-gray-2 py-xxs px-m bg-white text-black text-center text-base&amp;#34; @click=&amp;#34;$emit(&amp;#39;click&amp;#39;)&amp;#34; &amp;gt; {{ text }} &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script lang=&amp;#34;ts&amp;#34;&amp;gt; import { Vue, Component, Prop } from &amp;#39;vue-property-decorator&amp;#39; /** * 吹き出し */ @Component export default class SpeechBalloon extends Vue { @Prop({ required: true, type: String }) readonly text!</description></item><item><title>CSSでドット縦線をつくる</title><link>https://ikorihn.github.io/digitalgarden/note/CSS%E3%81%A7%E3%83%89%E3%83%83%E3%83%88%E7%B8%A6%E7%B7%9A%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B/</link><pubDate>Sun, 30 May 2021 18:48:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/note/CSS%E3%81%A7%E3%83%89%E3%83%83%E3%83%88%E7%B8%A6%E7%B7%9A%E3%82%92%E3%81%A4%E3%81%8F%E3%82%8B/</guid><description>#css
https://developer.mozilla.org/ja/docs/Web/CSS/radial-gradient() https://www.esz.co.jp/blog/2766.html</description></item></channel></rss>