{"/":{"title":"🪴 Quartz 3.3","content":"\nHost your second brain and [digital garden](https://jzhao.xyz/posts/networked-thought) for free. Quartz features\n\n1. Extremely fast natural-language [[notes/search]]\n2. Customizable and hackable design based on [Hugo](https://gohugo.io/)\n3. Automatically generated backlinks, link previews, and local graph\n4. Built-in [[notes/CJK + Latex Support (测试) | CJK + Latex Support]] and [[notes/callouts | Admonition-style callouts]]\n5. Support for both Markdown Links and Wikilinks\n\nCheck out some of the [amazing gardens that community members](notes/showcase.md) have published with Quartz or read about [why I made Quartz](notes/philosophy.md) to begin with.\n\n## Get Started\n\u003e 📚 Step 1: [Setup your own digital garden using Quartz](notes/setup.md)\n\nReturning user? Figure out how to [[notes/updating|update]] your existing Quartz garden.\n\nIf you prefer browsing the contents of this site through a list instead of a graph, you see a list of all [setup-related notes](/tags/setup).\n\n### Troubleshooting\n- 🚧 [Troubleshooting and FAQ](notes/troubleshooting.md)\n- 🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n- 👀 [Discord Community](https://discord.gg/cRFFHYye7t)\n\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":[]},"/notes/%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E5%85%A5%E9%96%80":{"title":"ターミナル入門","content":"\n## 私のターミナル歴\n\n* 2015 新卒入社 Windows時代 まだコマンドプロンプトって黒い画面で怖いと思っていた\n  * コマンドプロンプトでantのbuildをする程度\n* 2016\n  * batファイルを触ることが増えてきた\n* 2017 gvimで初めてvimに触れる。これまでサクラエディタとか秀丸を使っていたし周りでもvimという単語を聞いたことがなかったので、マイナーなエディタを使っている俺かっけーと思っていた。どうやら2大エディタらしいと知るのはもう少しあとになってから\n  * 簡単な作業をbatファイル書いてやらせたりし始めた\n* 2018\n  * mac\n  * \n\n## 基本操作\n\n* tabでバシバシ補完する\n* \n\n## キーバインドを覚えよう\n\n* ターミナルではemacs風のキーバインドが使える\n  * ホームポジションから動かずにカーソル操作ができるようになる\n  * macの場合はだいたいのアプリでも同じなので覚えておくと便利\n* `ctrl-n/p`: next/previous\n* `ctrl-f/b`: front/back\n* `ctrl-h/d`: backspace/delete\n* `ctrl-a/e`: ahead/end\n\n## .zshrc\n\n````shell\n# ヒストリの設定\nexport HISTFILE=~/.zsh_history\nexport HISTSIZE=1000000\nexport SAVEHIST=1000000\n````\n\n## PATHってなに\n\n## aliasを設定しよう\n\n## 見た目をかっこよくしよう\n\n## fuzzy finder(fzf, peco)を使おう\n\n* \n\n## tabでファイル名をfzfで選択するウィンドウを表示させる\n\n````shell\n# 補完機能を有効にする\nautoload -Uz compinit\ncompinit\n````\n\nzinit\n\n````shell\n#######\n# https://github.com/Aloxaf/fzf-tab\n#######\nzinit light \"Aloxaf/fzf-tab\"\nenable-fzf-tab\n# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\nzstyle ':fzf-tab:*' fzf-bindings 'ctrl-j:accept' 'ctrl-a:toggle-all' 'ctrl-space:toggle+down'\n# disable sort when completing `git checkout`\nzstyle ':completion:*:git-checkout:*' sort false\n# set descriptions format to enable group support\nzstyle ':completion:*:descriptions' format '[%d]'\n# set list-colors to enable filename colorizing\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n# preview directory's content with exa when completing cd\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\n# switch group using `,` and `.`\nzstyle ':fzf-tab:*' switch-group ',' '.'\n````\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":["#terminal"]},"/notes/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88":{"title":"ネットワークに応じて処理を振り分けるスクリプト","content":"\n\\#shell\n\n## ネットワークに応じて処理を振り分けるスクリプト\n\n````shell:switch_location.sh\n#!/bin/zsh\n\n# ネットワーク環境を切り替える\nswitchNetwork() {\n  local location=$1\n  currentLocation=$(networksetup -getcurrentlocation)\n  if test $currentLocation = $location; then\n    return\n  fi\n\n  scselect $(scselect | grep $location | awk '{ print $1 }')\n  osascript -e 'display notification \"'\"Switch network location to ${1}\"'\" with title \"'\"${0##*/}\"'\" '\n}\n\n# Git リポジトリ設定を切り替える\nswitchGitConfig() {\n  local location=$1\n\n  case \"$location\" in\n    Home)\n      git config --global --replace-all http.$GIT_REPO_URL_HTTPS.proxy $PROXY_URL\n      git config --global --replace-all url.$GIT_REPO_URL_HTTPS.insteadOf $GIT_REPO_URL_SSH\n      git config --global --replace-all url.$GIT_REPO_URL_HTTPS.insteadOf ssh://$GIT_REPO_URL_SSH --add\n      ;;\n    Office)\n      git config --global --unset-all http.$GIT_REPO_URL_HTTPS.proxy\n      git config --global --unset-all url.$GIT_REPO_URL_HTTPS.insteadOf\n      ;;\n  esac\n}\n\nmain() {\n  set -x\n  ADAPTER=en0\n\n  # Wi-FiがONになっているか\n  airportpower=$(networksetup -getairportpower $ADAPTER | awk -F': ' '{ print $2 }')\n  if test ${airportpower} = 'Off'; then\n    echo 'Wifi is Off.'\n    exit\n  fi\n\n  # SSIDを取得\n  ssid=$(networksetup -getairportnetwork $ADAPTER | awk -F': ' '{ print $2 }')\n\n  location=Automatic\n  case \"$ssid\" in\n    $SSID_HOME)\n      location=Home\n      ;;\n    $SSID_OFFICE)\n      location=Office\n      ;;\n  esac\n\n  switchNetwork $location\n  switchGitConfig $location\n  set +x\n}\n\nmain\n````\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":["#shell"]},"/notes/%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%A2%E3%83%B3%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B":{"title":"マイクのミュート・アンミュートを切り替える","content":"\n\\#Mac\n\n````oascript\nset micVolume to toggleMic()\ndisplay notification micVolume with title \"Mic\"\nreturn micVolume\n\non toggleMic()\n\tset inputVolume to input volume of (get volume settings)\n\tif inputVolume ≤ 5 then\n\t\tset inputVolume to 100\n\t\tset micVal to \"🔈 unmuted\"\n\telse\n\t\tset inputVolume to 0\n\t\tset micVal to \"🔇 muted\"\n\tend if\n\tset volume input volume inputVolume\n\treturn micVal\nend toggleMic\n````\n\nAutomator \u003e Quick Action から作成して、システム設定 \u003e キーボード \u003e ショートカット \u003e サービス でキーボードショートカットを設定すれば一発で切り替えられるようになる\n\n[macのマイクをボリュームで擬似的にON/OFF - Qiita](https://qiita.com/okoshi/items/35b17c0865c83e20ea0c)\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":["#Mac"]},"/notes/%E6%84%9B%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bvim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3":{"title":"愛用しているvimプラグイン","content":"\n### gina\n\nhttps://github.com/lambdalisue/gina.vim\n[gina.vimとGitHubの連携を向上させる | Input中心のブログ](https://kitagry.github.io/blog/programmings/2020/09/gina-browse/)\n\nfugitiveのほうが `:Git log` などが見やすい気がする\n`:Gina! log` で同じようなことはできる模様。\n`:Gina!!` と double bang にすると生のgitコマンドが実行される。\nfzf-previewと連携しやすいのでGinaにしてみた。\n\n### fzf-preview\n\n[TypeScriptでVimのファジーファインダーを実装して開発体験が最高になっている話](https://zenn.dev/yano/articles/vim_with_fzf_preview_is_best_experience)\n[Vimにたくさんあるファジーファインダー系プラグインを比較してみる](https://zenn.dev/yutakatay/articles/vim-fuzzy-finder)\n[無人島に持っていく(Neo)vimプラグイン10選 (TS開発環境編)](https://zenn.dev/yano/articles/vim_plugin_top_10)\n\nCOC版を入れた。\nfzf.vimで良かった気もする\n\n### vim-ripgrep\n\n[vim-ripgrepを作った話](https://zenn.dev/kyoh86/articles/67c1408d6ef950)\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":["#vim"]},"/notes/%E8%87%AA%E5%AE%85%E3%81%A8%E8%81%B7%E5%A0%B4%E3%81%A7proxy%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%81%9F%E3%81%84":{"title":"自宅と職場でproxy設定を切り替えたい","content":"\n\\#Mac #Network #shell\n\n出社時と在宅時で、プロキシの接続情報を変更する必要がある。\n手で切り替えるのを忘れて社内システムにつながらない…ということがよく発生するので、自動化することにした。\n\n## 切り替えたい対象\n\n* プロキシ設定\n* git proxyの設定を環境に応じて変更\n\n## 実現方法\n\n* proxy.pac をローカルのhttpサーバーで配布\n* Macのネットワーク設定 \u003e Location で自宅と職場でproxy.pacのURLをそれぞれ設定\n* git proxyをset,unsetするコマンドを実行\n* wifiのSSIDが家か職場を判定して分岐する\n* トリガーはスリープからの復帰時\n\n### プロキシ設定について\n\nプロキシの設定はproxy.pacを使って行う。\n職場では社内で配布されるproxy.pacのURLを入力すればいいが、\n自宅では、自前のproxy.pacを作って設定したい。\n\nしかし、Mojaveからローカルのproxy.pacを `file://` で設定することができなくなった\n\n[macOS 10.14 Mojave 以降で pac ファイルを使って proxy の設定を行いたいけど出来なかった話 - Qiita](https://qiita.com/orange634nty/items/9ef5cadd039592e8344a)\n\n \u003e \n \u003e #### Deprecations\n \u003e \n \u003e The `ftp://` and `file://` URL schemes for Proxy Automatic Configuration (PAC) are deprecated. HTTP and HTTPS are the only supported URL schemes for PAC. This affects all PAC configurations including, but not limited to, configurations set via Settings, System Preferences, profiles, and [`URLSession`](https://developer.apple.com/documentation/foundation/urlsession) APIs such as [`connectionProxyDictionary`](https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1411499-connectionproxydictionary), and [`CFNetworkExecuteProxyAutoConfigurationURL(_:_:_:_:)`](https://developer.apple.com/documentation/cfnetwork/1426392-cfnetworkexecuteproxyautoconfigu). (37811761)\n\nそのため、ローカルにhttpサーバーを立てて `http://localhost` を設定する方法をとる\n\n## proxy.pacをローカルのhttpサーバーで配布\n\n### httpdをインストール、自動起動\n\n````shell\n$ brew install httpd\n\n# M1 Macの場合 /opt/homebrew/etc に設定ファイルがある\n$ vim /opt/homebrew/etc/httpd/httpd.conf\n=\u003e Listenポートを任意に設定する(私は80に設定)\n\n$ brew services start httpd\n==\u003e Successfully started `httpd` (label: homebrew.mxcl.httpd)\n\n# `brew services start` するとlaunchdに登録され、自動起動するようになる (`brew services stop` すると停止、自動起動も解除される)\n$ launchctl list | rg brew\n63000   0       homebrew.mxcl.httpd\n$ cat ~/Library/LaunchAgents/homebrew.mxcl.httpd.plist\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\n\u003cplist version=\"1.0\"\u003e\n\u003cdict\u003e\n        \u003ckey\u003eEnvironmentVariables\u003c/key\u003e\n        \u003cdict\u003e\n                \u003ckey\u003ePATH\u003c/key\u003e\n                \u003cstring\u003e/opt/homebrew/bin:/opt/homebrew/sbin:/usr/bin:/bin:/usr/sbin:/sbin\u003c/string\u003e\n        \u003c/dict\u003e\n        \u003ckey\u003eLabel\u003c/key\u003e\n        \u003cstring\u003ehomebrew.mxcl.httpd\u003c/string\u003e\n        \u003ckey\u003eProgramArguments\u003c/key\u003e\n        \u003carray\u003e\n                \u003cstring\u003e/opt/homebrew/opt/httpd/bin/httpd\u003c/string\u003e\n                \u003cstring\u003e-D\u003c/string\u003e\n                \u003cstring\u003eFOREGROUND\u003c/string\u003e\n        \u003c/array\u003e\n        \u003ckey\u003eRunAtLoad\u003c/key\u003e\n        \u003ctrue/\u003e\n\u003c/dict\u003e\n\u003c/plist\u003e\n````\n\n### proxy.pacを配置\n\n`/opt/homebrew/var/www/` にproxy.pacを置く\n\n\u003chttp://localhost/proxy.pac\u003e で取得できるようになる\n\n## Macのネットワーク設定 \u003e Location で自宅と職場でproxy.pacのURLをそれぞれ設定\n\n![Pasted-image-20211008123230.png](static/Pasted-image-20211008123230.png)\n\nそれぞれのLocationで、proxy.pacのURLを入力する\n\n自宅: `http://localhost/proxy.pac`\n職場: `社内のproxy.pacのURL`\n![Pasted-image-20211008124722.png](static/Pasted-image-20211008124722.png)\n\n## ネットワーク切り替え時に実行するスクリプトを作成\n\n[ネットワークに応じて処理を振り分けるスクリプト](%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88.md)\n\n## sleep復帰時にスクリプトを実行する\n\n### sleepwatcherをインストール\n\n[Macスリープ時・復帰時に処理を動かす](Mac%E3%82%B9%E3%83%AA%E3%83%BC%E3%83%97%E6%99%82%E3%83%BB%E5%BE%A9%E5%B8%B0%E6%99%82%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99.md)\n\nスリープ前や復帰時にスクリプトを実行できるようになる\n\n````shell\nbrew install sleepwatcher\n````\n\n### plistファイルを作成する\n\n`~/Library/LaunchAgents` 以下にファイルを作成\n\n````xml:~/Library/LaunchAgents/sleepwatcher.plist\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\n\u003cplist version=\"1.0\"\u003e\n\u003cdict\u003e\n    \u003ckey\u003eLabel\u003c/key\u003e\n    \u003cstring\u003esleepwatcher\u003c/string\u003e\n    \u003ckey\u003eProgramArguments\u003c/key\u003e\n    \u003carray\u003e\n        \u003cstring\u003e/usr/local/sbin/sleepwatcher\u003c/string\u003e\n        \u003cstring\u003e-V\u003c/string\u003e\n        \u003cstring\u003e-w /path/to/switch_location.sh\u003c/string\u003e\n    \u003c/array\u003e\n    \u003ckey\u003eRunAtLoad\u003c/key\u003e\n    \u003ctrue/\u003e\n    \u003ckey\u003eKeepAlive\u003c/key\u003e\n    \u003ctrue/\u003e\n\u003c/dict\u003e\n\u003c/plist\u003e\n````\n\n* `-w` スリープ復帰（Wake Up）時に実行するコマンド\n* `-s` スリープ（Sleep）時に実行するコマンド\n\n### launchdに登録\n\n````shell\n$ launchctl load ~/Library/LaunchAgents/sleepwatcher.plist\n````\n\n## 参考\n\n[Mac のスリープ／復帰時にスクリプトを実行する - Qiita](https://qiita.com/fiftystorm36/items/5fe936a92445cbf4ad9a)\n[Macの起動/スリープ復帰時に自動でVPNに接続する / LOG](https://log.brdr.jp/post/887)\n[Mac でネットワーク環境を使う方法 - Apple サポート (日本)](https://support.apple.com/ja-jp/HT202480)\n[macOS 10.14 Mojave 以降で pac ファイルを使って proxy の設定を行いたいけど出来なかった話 - Qiita](https://qiita.com/orange634nty/items/9ef5cadd039592e8344a)\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":["#Mac","#Network","#shell"]},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = -1$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":[]},"/notes/Mac%E3%82%B9%E3%83%AA%E3%83%BC%E3%83%97%E6%99%82%E5%BE%A9%E5%B8%B0%E6%99%82%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99":{"title":"Macスリープ時・復帰時に処理を動かす","content":"\n[macOSのスリープ時にEC2を落とそう - サーバーワークスエンジニアブログ](https://blog.serverworks.co.jp/tech/2019/08/17/sleepwatcher/)\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["#Mac"]},"/notes/Raycast":{"title":"Raycast","content":"\n[RaycastはただのLauncherツールにとどまらない](https://zenn.dev/rinchsan/articles/1c26913a87a5aa)\n[ランチャーツールRaycastの使い方と設定 | DevelopersIO](https://dev.classmethod.jp/articles/eetann-used-raycast/)\n\n## 自分の設定\n\n* Authy\n\n### マイク\n\n[Raycastでマイクのミュートを切り替える](Raycast%E3%81%A7%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B.md)\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["#2023/01/06","#Raycast","#Mac"]},"/notes/Raycast%E3%81%A7%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B":{"title":"Raycastでマイクのミュートを切り替える","content":"\n[Raycast](Raycast.md) を使ってマイクのミュートを切り替えます\n\nRaycastの設定 \u003e Extensions \u003e +ボタン \u003e Create Script Command \u003e templateをApple Scriptにして任意の場所に作成\n\n![Pasted-image-20220311122221.png](static/Pasted-image-20220311122221.png)\n\n````applescript:mute.applescript\n#!/usr/bin/osascript\n\n# Required parameters:\n# @raycast.schemaVersion 1\n# @raycast.title mic mute\n# @raycast.mode compact\n\n# Optional parameters:\n# @raycast.icon 🤖\n\nset micVolume to muteMic()\ndisplay notification micVolume with title \"Mic\"\nreturn micVolume\n\non muteMic()\n\tset inputVolume to 0\n\tset micVal to \"🔇 muted\"\n\tset volume input volume inputVolume\n\treturn micVal\nend muteMic\n````\n\n同様にして、 `unmute.applescript` を作成\n\n````applescript:mute.applescript\n#!/usr/bin/osascript\n\n# Required parameters:\n# @raycast.schemaVersion 1\n# @raycast.title mic unmute\n# @raycast.mode compact\n\n# Optional parameters:\n# @raycast.icon 🤖\n\nset micVolume to unmuteMic()\ndisplay notification micVolume with title \"Mic\"\nreturn micVolume\n\non unmuteMic()\n\tset inputVolume to 80\n\tset micVal to \"🔈 unmuted\"\n\tset volume input volume inputVolume\n\treturn micVal\nend unmuteMic\n````\n\nRaycastの設定 \u003e Extensions から、コマンドにショートカットを設定することができます。\n私はアンミュートを `Cmd + Opt + m` , ミュートを `Cmd + Shift + Opt + m` に設定しています。\n\nトグルのほうがいい場合は [マイクのミュート・アンミュートを切り替える](%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B.md) のスクリプトを作成する。\n自分は現在の状態がミュートアンミュートのどちらであっても同じ動作をさせたいためそれぞれのコマンドを登録しています。\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["#Mac","#Raycast"]},"/notes/build-typescript-on-netlify":{"title":"TypeScriptのGatsbyをNetlifyでビルドしたときのエラーに対応した","content":"\n## 事象\n\nTypeScript化したGatsbyをNetlifyでビルドした際に以下のエラーが発生しました。\n\n````shell\n$ gatsby build\nerror Error in \"/opt/build/repo/gatsby-node.js\": Unexpected token '.'\n\n\n  Error: /opt/build/repo/src/gatsby-node/index.ts:28\n      const posts = result.data?.allMarkdownRemark.nodes;\n                                ^\n  SyntaxError: Unexpected token '.'\n````\n\n## 対応\n\nNetlifyのビルドログに `Now using node v12.18.0 (npm v6.14.4)` とあるようにデフォルトではv12.18.0が使われるようです。\nOptional ChainingはNode.js v14から使用できる機能のため、v14以上が使用されるように設定します。\n\n[Manage build dependencies | Netlify Docs](https://docs.netlify.com/configure-builds/manage-dependencies/)\n\n環境変数 `NODE_VERSION` で指定できるため以下のように設定しました。\n\n![public/static/2021-10-31-17-31-50.png](static/2021-10-31-17-31-50.png)\n\nこれでビルドが通るようになりました。\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["Gatsby","Netlify"]},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/Editing+and+formatting/Callouts).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":[]},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to render mermaid diagrams\nenableMermaid: true\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.3\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["setup"]},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":[]},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n      - HUGO_LIVERELOADPORT=-1\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["setup"]},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so, otherwise the generated page will not have a title!\n\nYou can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["setup"]},"/notes/fish-history-to-zsh-history":{"title":"fishのhistoryをzshに移行する","content":"\n一年くらいfishを使っていたが、文法があまりにbash/zshと異なり辛いため、zshに戻すことにした。\nコマンド履歴に頼る人間なので、直近1年の履歴がなくなってしまうのは困る。\nそこでfishのhistoryファイルをzshのhistoryファイルに移行することにした。\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## 移行ツール\n\n移行するためのツールを作った。\n\n\u003chttps://github.com/ikorihn/zhistconv\u003e\n\n使い方\n\n````shell\n# fish_hisoryをzsh_historyに変換して追記(事前にバックアップを取ることを推奨)\n$ zhistconv fish fish_hist \u003e\u003e ~/.zsh_history\n$ history -E 1\n=\u003e 結合されたhistoryが表示される\n````\n\n以下詳細\n\n## fishのhistoryファイルをzshのhistoryファイルの形式に変換する\n\n### fishのhistoryファイル\n\n`~/.local/share/fish/fish_history`\n\n````yaml\n- cmd: echo hello\n  when: 1621067042\n- cmd: git pull\n  when: 1621067359\n````\n\nyaml形式で保存されているので、yamlをロードして変換してあげればいい\n\n### zshのhistoryファイル\n\n`~/.zsh_history`\n\n````txt\n: 1621066935:0;echo hello\n: 1621066935:0;cd\n````\n\n`: \u003cunix timestamp\u003e:0:\u003ccommand\u003e` 形式(真ん中の0が何を意味しているかは調べてない)\n\n## zshのマルチバイト文字の扱いについて\n\n一つ問題があった。移行ツールをわざわざ作ったのはほとんどこの仕様のため\n\n`~/.zsh_history` をUTF-8で開くと、日本語が文字化けしていた。\nhistoryコマンドの結果は文字化けしていない。\n\nどうやらマルチバイト文字が特殊な扱いをされているらしい。\n\n[.zsh_historyにおける非ASCII文字の扱いについて - 生涯未熟](https://syossan.hateblo.jp/entry/2017/10/09/181928)\n[unmetafy unicode when zsh by rogerdehe · Pull Request #416 · dvorka/hstr](https://github.com/dvorka/hstr/pull/416)\n\nmetafy/unmetafyという処理をしているらしく、\nメタなバイトがあったら直前に `0x83` を挿入して、`0x20`とのxorを取り6bit目を反転させているようだ。\n\n\u003chttps://github.com/zsh-users/zsh/blob/master/Src/utils.c#L4921-L4933\u003e\n\n````c\nmod_export char *\nunmetafy(char *s, int *len)\n{\n    char *p, *t;\n\n    for (p = s; *p \u0026\u0026 *p != Meta; p++);\n    for (t = p; (*t = *p++);)\n\tif (*t++ == Meta \u0026\u0026 *p)\n\t    t[-1] = *p++ ^ 32;\n    if (len)\n\t*len = t - s;\n    return s;\n}\n````\n\n単純にfish_historyを変換してzsh_historyに貼り付けるだけでは、日本語部分が文字化けしてしまう。\n\n### 文字化けしたzsh_historyファイルを読めるようにする\n\n`ぁあぃいぅうぜそぞただちぢっつづ` という文字列を使って調べていく。\nこれらは頭2バイトが `e381`、末尾1バイトがそれぞれいかのようになる。\n\n* `ぁ`: `81`\n* `あ`: `82`\n* `ぃ`: `83`\n* `い`: `84`\n* `ぅ`: `85`\n* `う`: `86`\n* `ぜ`: `9c`\n* `そ`: `9d`\n* `ぞ`: `9e`\n* `た`: `9f`\n* `だ`: `a0`\n* `ち`: `a1`\n* `ぢ`: `a2`\n* `っ`: `a3`\n* `つ`: `a4`\n* `づ`: `a5`\n\nzsh_historyで見ると以下のようなバイト列になっている(わかりやすいよう適宜スペースを入れている)\n\n````txt\nE38181 E38182 E38183A3 E38183A4 E38183A5 E38183A6 E38183BC E38183BD E38183BE E38183BF E3818380 E3818381 E3818382 E381A3 E381A4 E381A5\n````\n\nzsh_historyの文字コードはlatin1なのでほぼUTF-8と同じ。\n文字コード表をもとに当てはまる文字に戻すと、 `0x83-0xA2` のとき、直前に `0x83` を入れてから6bit目を反転させていることがわかる。\n\n````txt\nE38181 E38182 E38183A3 E38183A4 E38183A5 E38183A6 E38183BC E38183BD E38183BE E38183BF E3818380 E3818381 E3818382 E381A3 E381A4 E381A5\n````\n\n`0x83` を消して、直後の6bit目を反転させると以下のようになる\n\n````txt\nE38181 E38182 E38183 E38184 E38185 E38186 E3819C E3819D E3819E E3819F E381A0 E381A1 E381A2 E381A3 E381A4 E381A5\n````\n\nこれがもとの文字列のバイト列に一致する。\n\nマルチバイト文字をzsh_historyの形式に変換するには上と逆のことをすればいい。\nつまり、`0x83-0xA2` のとき、直前に `0x83` を入れてから6bit目を反転させる。\n\n### Goでzsh_historyをパースするプログラムを書いてみる\n\n````go\npackage zhistconv\n\nconst (\n\t// zsh_historyの仕様で、各バイトが0x83~0xA2のとき、その前に0x83を入れて6bit目を反転させる\n\tx83 = 131\n\txA2 = 162\n\tx20 = 32\n)\n\nfunc ParseZshHistory(latin1Byte []byte) []byte {\n\tisMarking := false\n\tvar byteBuffer []byte\n\n\tfor _, codePoint := range latin1Byte {\n\t\tif codePoint == x83 {\n\t\t\tisMarking = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif isMarking {\n\t\t\t// 6bit目を反転させるために0x20をXORする\n\t\t\tinvertCodePoint := codePoint ^ x20\n\t\t\tbyteBuffer = append(byteBuffer, invertCodePoint)\n\t\t\tisMarking = false\n\t\t} else {\n\t\t\tbyteBuffer = append(byteBuffer, codePoint)\n\t\t}\n\t}\n\n\treturn byteBuffer\n}\n\nfunc ConvertToZshHistory(latin1Byte []byte) []byte {\n\tvar byteBuffer []byte\n\n\tfor _, codePoint := range latin1Byte {\n\t\t// 131は0metacharの10進数表現\n\t\tif x83 \u003c= codePoint \u0026\u0026 codePoint \u003c= xA2 {\n\t\t\t// 6bit目を反転させるために0x20をXORする\n\t\t\tinvertCodePoint := codePoint ^ x20\n\t\t\tbyteBuffer = append(byteBuffer, x83)\n\t\t\tbyteBuffer = append(byteBuffer, invertCodePoint)\n\t\t} else {\n\t\t\tbyteBuffer = append(byteBuffer, codePoint)\n\t\t}\n\t}\n\n\treturn byteBuffer\n}\n````\n\n## 作ったツールについて\n\n[urfave/cli: A simple, fast, and fun package for building command line apps in Go](https://github.com/urfave/cli)\n\nこちらを使ってcliツールを作った。\n\n* `zhistconv fish`: fish_historyをzsh_historyの形式に変換して標準出力する\n* `zhistconv parse`: zsh_historyをUTF-8に変換する\n* `zhistconv reverse`: UTF-8で書かれたzsh_historyのマルチバイト文字をzsh_historyの仕様に変換する\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["fish","zsh"]},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions Permissions\nBy default, GitHub disables workflows from modifying your files (for good reason!). However, Quartz needs this to write the actual site files back to GitHub.\n\nHead to `Settings \u003e Action \u003e General \u003e Workflow Permissions` and choose `Read and Write Permissions`\n\n![[notes/images/github-actions.png]]\n*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n## Docker Support\nIf you don't want to use a hosting service, you can host using [Docker](notes/docker.md) instead!\nI would *not use this method* unless you know what you are doing.\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":["setup"]},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2023-04-23T12:01:21.311370984Z","tags":[]},"/notes/jenkins-ui-customize":{"title":"Jenkinsの見た目をカスタマイズ","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## モチベーション\n\nJenkins のデフォルトの見た目は古臭いので、好きなテーマに変更したい。\nまた、環境ごとの違いをひと目でわかりやすくすることで事故を防ぐ。\n\n## jenkins-material-theme をダウンロード\n\n\u003chttp://afonsof.com/jenkins-material-theme/\u003e\nから色とロゴを指定してテーマをダウンロードする。\n\n## プラグインを設定\n\n\\[Jenkinsの管理\\] -\u003e \\[プラグインの管理\\] -\u003e \\[利用可能\\] -\u003e [Simple Theme Plugin](https://plugins.jenkins.io/simple-theme-plugin/) をインストール\n\nダウンロードしたスタイルシートのファイル（jenkins-material-theme.css）を Jenkins フォルダの userContent フォルダへ配置する\n\n* Jenkinsを置いてあるサーバにSSHログイン\n* `\u003cドキュメントルート(/var/lib/jenkins/など)\u003e/userContent/jenkins-material-theme.css`\n\nJenkinsの管理のシステムの設定でダウンロードしたテーマを指定する。\n\nURL of theme CSSにこちらを入力して保存: `/userContent/jenkins-material-theme.css`\n\n## material-theme を適用したときに、pipelineエディタでカーソル位置と実際に編集される位置がずれる\n\n`:not(div.ace_editor)` に `font-family: Roboto, sans-serif!important` が設定されているため等幅フォントになっていない。\n\n[Main Script -- Replay -- the cursor in the editor is out of phase · Issue #184 · afonsof/jenkins-material-theme](https://github.com/afonsof/jenkins-material-theme/issues/184)\n\n等幅フォントを設定してあげればよい。\n自分でカスタマイズできるのが利点\n\n````css:jenkins-material-theme.css\n#main-panel\u003epre *,\n.ace_editor .ace_scroller .ace_content * {\n  font-family: Roboto Mono, monospace !important;\n}\n\ndiv.ace_editor.ace-tomorrow,\ndiv.ace_editor.ace-tomorrow * {\n  font: 12px/normal Roboto Mono, monospace !important;\n}\n````\n\n## 参考\n\n[Jenkinsのテーマ(UI)を変えてみた | レコチョクのエンジニアブログ](https://techblog.recochoku.jp/2021)\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["Jenkins"]},"/notes/karabiner-elements-recommend":{"title":"Karabiner-Elementsで個人的におすすめのキーバインド","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## Karabiner-Elements とは\n\nMacのキーボードをカスタマイズするためのツールです。\nこれを使えばUSキーボードでもJIS配列のようにかな/英数キーを割り当てるなどが可能になります。\n\nここでは個人的に使っているキーバインドを紹介します。\nインストールや設定方法については色々なサイトで紹介されているので省略します。\n\nルールについては \u003chttps://ke-complex-modifications.pqrs.org/\u003e から探すことができます。\nKarabiner-ElementsのPreferences -\u003e Complex modifications -\u003e Import more rules from the Internet から飛べます。\n\n![public/static/2021-08-15-16-28-21.png](static/2021-08-15-16-28-21.png)\n\n## Change spacebar to left_shift if pressed with other keys (Post spacebar when pressed alone)\n\n[Change spacebar](https://ke-complex-modifications.pqrs.org/#spacebar)\n\nスペースキーにShiftを割り当て、スペースキー単独で押したときにはスペースが入力されます。\nいわゆる `SandS (Space and Shift)` というものです。\n\n特にShift+数字の入力が遠く感じてミスが多かったのが、かなり改善されました。\n\n注意としては、スペース押しっぱなしにしても1つしか入力されないので、連続入力したい場合連打が必要になります。\n\n## Post escape if left_control is pressed alone\n\n[Change control key](https://ke-complex-modifications.pqrs.org/#control)\n\nCtrlキーを単独で押したときにECSが入力されます。\n\n自身がvimmerであり、vim以外のエディタにもvimキーバインドを設定しているので、ECSをよく押すのですが、\n指を動かす距離が減って楽になりました。\n\nvimでECSを `jj` や `C-[` などにバインドしている人や、vimmer以外には恩恵を感じにくいかもしれません。\n\n## Quit application by holding command-q\n\n[Prevent unintended command-q (rev 2)](https://ke-complex-modifications.pqrs.org/#command_q)\n\nCmd+q を長押しでアプリケーションを終了するようになります。\n\nタブを閉じようとしてしょっちゅう `Cmd+w` と `Cmd+q` を打ち間違えるため導入しました。\n\n## コマンドキーを単体で押したときに、英数・かなキーを送信する。（左コマンドキーは英数、右コマンドキーはかな）\n\n[For Japanese （日本語環境向けの設定）](https://ke-complex-modifications.pqrs.org/#japanese)\n\n記号の配置の好みや、リターンキーの押しやすさからUS配列を使用しています。\nUS配列のキーボードでは、英数やかなのキーがなく、日本語切り替えは `Cmd+Space` や `Ctrl+Space` で行います。\n\n切り替えの場合、現在の入力状態を把握している必要があるので、できればJIS配列と同じように単一のキーを押すと必ず英数/ローマ字入力に変わってほしいところです。\n\nこの設定を行うと、左Commandが英数キー、右Commandがかなキーに割り当てられます。\nCommandのmodifierとしての機能は維持され、コピーやペーストなどのショートカットも利用できます。\n\n## Vonng/Capslock\n\n\u003chttps://github.com/Vonng/Capslock\u003e\n\nCapsLockキーを、いろいろなことができるmodifierに変化させる設定です。\n*Make CapsLock Great Again!* と銘打つだけあって、アプリ起動のホットキーを作ったり、矢印キーでマウスカーソルを移動させたりといったことができるようになります。\n\n`karabiner://karabiner/assets/complex_modifications/import?url=https://vonng.com/capslock.json` からインストールできます。\n\n### Application\n\nアプリケーション起動のホットキーを登録できます。\n例: `CapsLock+e` でSafariが起動する(起動済みだったらウィンドウが切り替わる)\n\nCmd+Tabでアプリを切り替えたり、Mission ControlやDockで探したりといった手間がなくなります。\n\n私はkarabinerの設定ファイル(`~/.config/karabiner/karabiner.json`) を書き換えて、よく使うアプリを左手のキーに登録しています。\n\n* `CapsLock+s`: Slack\n* `CapsLock+g`: Chrome\n* `CapsLock+v`: Visual Studio Code\n* `CapsLock+f`: iTerm2\n* `CapsLock+Cmd+f`: Finder\n\n### Functional\n\n`CapsLock+数字列` をFunctionキーにします。\nFunctionキーのないキーボードを使っている場合に便利です。\n\n### Navigation\n\nVimスタイルの移動が可能になります。どんな場所でも `hjkl` で移動できるようになります。\nほかにも `u` が `PgUp`、`i` が `Home` になったり、\n`CapsLock+Opt+hjkl` がマウスカーソル移動になったりします。\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["Mac","keyboard"]},"/notes/look-back-2021":{"title":"2021年振り返り","content":"\n## 2021年にやったこと\n\n### Kotlin + Spring Boot\n\n1月〜3月ごろはKotlin + Spring Boot を触っていました。\nKotlinで初めてサーバーサイドを1から作れていい経験になりました。\nSpring BootはWebサーバーつくるにあたってほしい機能が一通り揃っていて助かりました。\nSpringもほぼ初めてで悩むことはありましたが、Kotlinだから詰まったということはなかったように思います。\n\nMockKできっちりテスト書きながら進められたのもよかったです。\nSpringがとにかくDI周りのことを何も考えなくてもやってくれるので、\nとくにハマることもなくinjectionしてmockしたらテストがかけてストレスが少なかったです。\n\nこの時期は技術的には楽しいことをやれていましたが、負荷も高くて疲れてもいました。\n\n### Go + Lambda\n\nAWS Lambdaでバッチを書いたりAPIサーバー作ったりと、何かと触る機会が多かったです。\n何回か書いていくうちにテストのしやすさやメンテしやすさを考慮した設計ができるようになったと思います。\n\nリリースされたばかりの[aws-sdk-go-v2](https://github.com/aws/aws-sdk-go-v2)も使いながら、知見を貯めることができました。\n\n### 競プロ\n\n計算量とかアルゴリズムをちゃんと意識できるようにならなきゃいかんと思って、\n2月〜3月ごろは競プロにハマってC++を勉強したり\n[問題解決力を鍛える！アルゴリズムとデータ構造](https://www.amazon.co.jp/dp/B08PV83L3N) を読んだりしていました。\n\nAtCoder茶色になったくらいで離れてしまいましたが、また再開したいと思っています。\n\n業務上はそんなに活かせてないですが、データ量が大きいときにループしているコードを見て「これ1秒以上かかるけど大丈夫？」のような勘が働くようになったのは良かったと思います。\n\n### Obsidian\n\n[Obsidian](https://obsidian.md/) でメモを取るようになりました。\nmarkdownで全て管理できるのが気に入ってます。\nあまり使いこなせてる気はしませんが、markdownなので特定のツールにロックインされることがないのが嬉しいです。\n\nGoogle KeepメモやEvernoteにためていたノート類もエクスポートして、markdown管理にしています。\n一発でmarkdownにすることができなかったので、一度Notionにインポートしてからmarkdownでエクスポートしました。\n\n作業記録やタスクもObsidian上で管理するようになりました。\nいままでもTogglやTodoistは使っていましたが、ぜんぜん続かず思い出したときにだけ書くからあまり意味がなかったのですが、\nObsidianは書くことのストレスが少なく、フォーマットも自由にいじれるので自分にあっているようです。\n\n[Day Planner](https://pouhon.net/obsidian-planner/6033/)の機能を使っています。\n\n細かく記録をつけようと思うならTogglなどをきっちり使ったほうがいいんだと思いますが、\n大雑把に何時間くらい何をしていたか程度の把握にしか使っていないので十分でした。\n\nあとからこの日何をしていたか振り返ることができるので今後も続けていきたいです。\n\n### 今年見て良かったもの\n\n#### 映画\n\n* 閃光のハサウェイ\n* シン・エヴァンゲリオン\n* 映画大好きポンポさん\n* 子供はわかってあげない\n* フリーガイ\n* コングvsゴジラ\n* ディパーテッド\n* ノクターナル・アニマルズ\n* リチャードジュエル\n* アップグレード\n* 新感染 ファイナル・エクスプレス\n* ブラック・レイン\n\n#### アニメ\n\n* 呪術廻戦\n* 無職転生\n* ODD TAXI\n* ブルーピリオド\n\n#### ドラマ\n\n* クイーンズ・ギャンビット\n* ファルコン\u0026ウィンターソルジャー\n* 浅草キッド\n\n#### 漫画\n\n* 推しの子\n* 左利きのエレン\n* チェンソーマン\n\n### マラソン\n\n月間100kmを目標に概ね達成しました。\n\n![public/static/2022-01-01-00-16-08.png](static/2022-01-01-00-16-08.png) \n\n合計: 1260km\n平均ペース: 5分1秒\n\nピクミンブルームの花植えが捗りました。\n\n## 2022年\n\n* インプット・アウトプットを増やす(小並感)\n  * 最近本を読んだり技術習得したりできていないので、もっとアウトプットを意識したインプットをしていく\n  * レガシーコードを頑張って読み解いて、長年積み重なった山を崩さないようにしながらどうにか動かすみたいな仕事が多かったので、来年はもっと大幅にきれいにしたい\n* 引っ越し\n  * 今後も毎日出社にはならないであろうと信じて、多少遠くても住みやすくて広いところに住みたい\n* マラソン\n  * 2年ほど大会に出れていないので、ハーフ 1:40、フル サブ3.5 を目標にして大会にでたい\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["振り返り"]},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\nOpen Settings \u003e Files \u0026 Links and look for these two items:\n\n1. Set the **New link format** to **Absolute Path in vault**. If you have a completely flat vault (no folders), this step isn't necessary.\n2. Turn **on** the **Automatically update internal links** setting.\n\n\n![[notes/images/obsidian-settings.png]]*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n\u003e [!WARNING]\n\u003e \n\u003e **If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["setup"]},"/notes/open-google-meet-at-time":{"title":"Googleカレンダーの予定時刻になったらMeetを自動で開くようにする","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## モチベーション\n\nオンラインミーティングをGoogle Meetでやっているのですが、気づいたら開始時間を過ぎていることがあります(本当によくない)\n通知が来たときに開始までに少し時間があるので別な作業をしてしまうパターンが多いです。\n\n時間になったらMeetの画面を自動で開いて、強制的に作業を中断すればそんなことがなくなる気がします。\n\n## 方針\n\nGoogleカレンダーから予定を取得して、時間になったらそのMeetのURLをブラウザで開くようにしたいと思います。\n\nやり方はいろいろあると思います。\nChrome拡張でカレンダーにアクセスする、Calendar APIでスケジュール一覧を取得する、…\n\n今回は諸般の事情でCalendar APIを直接使えなかったため、以下の方針にしました。\nOSはMacです。\n\n* Google Apps Script(GAS) でカレンダーから一日のスケジュールをJSONで取得する\n* このGASをWebアプリとして公開して、HTTP GETで取得できるようにする\n* スケジュールの時刻に `at` コマンドをセットして、`open \u003cMeetのURL\u003e` を実行する\n\nターミナルで `at` をセットするのは今のところ手で朝に実行しています。\n\nもっといいやり方がある気はしますが、とりあえずこれでやりたいことは出来ました。\n以下、各手順となります。\n\n## スケジュール取得GASを作成する\n\n\u003chttps://script.google.com/home\u003e から新しいスクリプトを作成する\n\n### GASのCalendar APIを有効化\n\n標準の [CalendarApp](https://developers.google.com/apps-script/reference/calendar) では取れる情報が少なくMeetのURLがとれないため、[Calendar API](https://developers.google.com/apps-script/advanced/calendar) を使用する\n\nGASのエディタ \u003e サービス \u003e Calendar を有効化\n\n### dayjs を使えるようにする\n\n標準の [Utilities.formatDate](https://developers.google.com/apps-script/reference/utilities/utilities) でも日付フォーマットはできるが、もう少し日付をうまく扱うためにライブラリを入れる。\nMoment.jsは開発が止まっているので、dayjsを使う。\n\nGASのエディタ \u003e ライブラリを追加 \u003e dayjs のスクリプトID `1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB` を入力\n\n#### 余談\n\nライブラリのスクリプトIDを検索する方法がわからない…\n仕方なく個人ブログやQiitaから情報を得たけど、公式情報じゃないので気持ち悪い\n\nスクリプトIDのエディタのURLを開くと、たしかにdayjsのコードのよう\n\u003chttps://script.google.com/home/projects/1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB/edit\u003e\n\n### カレンダーから予定を取得してJSONで返却する実装\n\nWebアプリとして使えるようにするため、`doGet` 関数をエントリーポイントに実装する\n\n````javascript:code.gs\nfunction doGet(e) {\n    return ContentService.createTextOutput(JSON.stringify(getSchedule()));\n}\n\nfunction getSchedule() {\n  const now = new Date();\n  const begin = dayjs.dayjs(now);\n  const end = dayjs.dayjs(now).endOf('day');\n    \n  // デフォルトカレンダーのID\n  const calendarId = CalendarApp.getDefaultCalendar().getId();\n\n  // Calendar APIで本日の予定を取得する\n  const events = Calendar.Events.list(calendarId, {\n    timeMin: begin.toISOString(),\n    timeMax: end.toISOString(),\n    singleEvents: true,\n    orderBy: 'startTime',\n  })\n\n  const todayEvent = events.items.map(event =\u003e {\n    let start;\n    if (event.start.date) {\n      // All-day event.\n      start = new Date(event.start.date);\n    } else {\n      start = new Date(event.start.dateTime);\n    }\n\n    // atコマンドで扱いやすい時間形式にフォーマット\n    return {\n      title: event.summary,\n      start: dayjs.dayjs(start).subtract(1, 'minute').format(\"YYYYMMDDHHmm\"),\n      meetUrl: event.hangoutLink,\n    }\n  })\n\n  return todayEvent;\n}\n````\n\n### Webアプリとして公開\n\nデプロイ \u003e 新しいデプロイ \u003e 説明を入力してデプロイ \u003e WebアプリのURLを取得\n\n## atコマンドを有効化\n\nMacのatコマンドはデフォルトでは無効になっているので有効化する。\n\n[Macでatコマンドが実行できないときの対処法 - Qiita](https://qiita.com/shge/items/6c43947a77abd9d2d1b2)\n[MacOS で at コマンドを有効化して使ってみる - Neo's World](https://neos21.net/blog/2019/09/13-02.html)\n\n````shell\nsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist\n````\n\n`/usr/libexec/atrun` にフルディスクアクセスをつける\n\n## ターミナルで予定一覧を取得して、atコマンドで設定\n\n````shell\ncurl -L \"\u003cGASのWebアプリURL\u003e\" | jq -r '.[] | .title + \",\" + .start + \",\" + .meetUrl' | awk -F ',' '{ print system(\"echo open \" $3 \" | at -t \" $2 ) }'\n````\n\n## まとめ\n\n毎朝手動でatコマンドを仕込むようにしていて、そこだけは手間だがいまのところこれのおかげで時間になったら作業を止めることができている。\n\natコマンドはデフォルトで無効になっていて、Macでスケジュール実行のコマンドはlaunchdを使ったほうがいいのではという気がしている。\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["GAS","shell"]},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":[]},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, the following\ninstructions guide you through installing the proper dependencies to run it locally.\n\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly (see [[notes/troubleshooting#`command not found: hugo-obsidian`|the troubleshooting page]])! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e [!INFO] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker`\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated! Now, let's get it hosted online.\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["setup"]},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://beta.operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Login or Register for a new Operand account. Click the verification link sent to your email, and you'll be redirected to the dashboard. (Note) You do not need to enter a credit card to create an account, or get started with the Operand API. The first $10 of usage each month is free. To learn more, see pricing. If you go over your free quota, we'll (politely) reach out and ask you to configure billing.\n2. Create your first index. On the dashboard, under \"Indexes\", enter the name and description of your index, and click \"Create Index\". Note down the ID of the index (obtained by clicking on the index name in the list of indexes), as you'll need it in the next step. IDs are unique to each index, and look something like `uqv1duxxbdxu`.\n3. Click into the index you've created. Under \"Index Something\", select \"SITEMAP\" from the dropdown and click \"Add Source\".\n4. For the \"Sitemap.xml URL\", put your deployed site's base URL followed by `sitemap.xml`. For example, for `quartz.jzhao.xyz`, put `https://quartz.jzhao.xyz/sitemap.xml`. Leave the URL Regex empty. \n5. Get your API key. On the dashboard, under \"API Keys\", you can manage your API keys. If you don't already have an API key, click \"Create API Key\". You'll need this for the next step.\n6. Open `data/config.yaml`. Set `enableSemanticSearch` to `true`, `operandApiKey` to your copied key, and `operandIndexId` to the ID of the index we created from earlier..\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nsearch:\n  enableSemanticSearch: true\n  operandApiKey: \"jp9k5hudse2a828z98kxd6z3payi8u90rnjf\"\n  operandIndexId: \"s0kf3bd6tldw\"\n```\n7. Push your changes to the site and wait for it to deploy.\n8. Check the Operand dashboard and wait for your site to index. Enjoy natural language search powered by Operand!\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":[]},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. **Make sure that when you fork, you _uncheck_ the 'Copy the `hugo` branch only' option**.\n\nIf you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n![[notes/images/fork.png]]\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command in your terminal replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["setup"]},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n- [Data Dictionary 🧠](https://glossary.airbyte.com/)\n- [sspaeti.com's Second Brain](https://brain.sspaeti.com/)\n- [oldwinterの数字花园](https://garden.oldwinter.top/)\n- [SethMB Work](https://sethmb.xyz/)\n- [Abhijeet's Math Wiki](https://abhmul.github.io/quartz/Math-Wiki/)\n- [Mike's AI Garden 🤖🪴](https://mwalton.me/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":[]},"/notes/start-blog-with-gatsby":{"title":"Gatsbyでブログを作ったので、構築ログを残す","content":"\n## Gatsby.js について\n\n\u003chttps://www.gatsbyjs.com/\u003e\n\nReactでつくられた静的サイトジェネレータ\n\nReactをビルド時に1回だけ実行し、HTML,JSを生成する。\n生成されたファイルをホスティングサービスにデプロイするだけで見られるようになる。\n\n### GraphQL\n\n* Gatsby.jsではビルド時のさまざまなデータをGraphQLで取得する。\n* Markdown形式で書いた情報を、ファイルシステムから読み込んで、GraphQL経由で取得し、Reactコンポーネント内で表示する。\n* GatsbyではMarkdownファイルに限らず、様々なデータを `data source`, `data transformer` という枠組みで一般化することで、多様な処理を統一的にかつ簡潔に記述することができている。\n* クライアントはビルド時に形成されたGraphQL DBの全体は必要ないので、「クエリの結果」のみをJSONとして合わせてデプロイする。\n\n## starterを使ってblogを作成\n\nテンプレートを利用してブログを構築しました。\n\n````shell\nnpx gatsby new gatsby-starter https://github.com/gatsbyjs/gatsby-starter-blog\n````\n\n※最初、[Leonids](https://www.gatsbyjs.com/starters/renyuanz/leonids/) で構築しましたがいまいち気に入らなかったので、[gatsby-starter-blog](https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog) で作り直しました。\n作り直すにあたっては、別ディレクトリでstarterから作成 → ファイル一式をコピー → TypeScriptへの変換等で地道に行いました。\n\n## TypeScript化する\n\ntsxに変更\nGraphQLのクエリ結果を型解決する\n\n## TailwindCSS\n\nTailwindCSSのユーティリティを組み合わせる思想が好きでよく使用するので、本ブログでも\n\u003chttps://www.gatsbyjs.com/docs/how-to/styling/tailwind-css/\u003e\nに沿って設定していきます。\n\n### インストール、初期設定\n\n````shell\nyarn add -D tailwindcss@npm:@tailwindcss/postcss7-compat autoprefixer\nnpx tailwindcss init\n````\n\n### PostCSSで適用する\n\n````shell\nyarn add postcss gatsby-plugin-postcss\n````\n\n````javascript:title=gatsby-config.js\nplugins: [`gatsby-plugin-postcss`],\n````\n\n````javascript:title=postcss.config.js\nmodule.exports = () =\u003e ({\n  plugins: [require(\"tailwindcss\")],\n})\n````\n\n### base CSSを追加する\n\n`@tailwind` ディレクティブを使用してTailwindの `base`, `components`, `utilities` をCSSに挿入します。\n\n````css:title=src/index.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n````\n\nカスタムCSSにTailwindのクラスを適用したい場合以下のように書ける\n\n````css:title=src/index.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@import popup.css body {\n  @apply bg-purple-200;\n}\n````\n\n`gatsby-browser.js` で読み込む\n\n````javascript:title=gatsby-browser.js\nimport \"./src/index.css\"\n````\n\n### Purge を設定する\n\nデフォルトではTailwindCSS全体がビルドに含まれるため、ファイルサイズ削減のために必要なclassのみにpurgeする。\n\n````javascript:title=tailwind.config.js\nmodule.exports = {\n  purge: [\"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {},\n  variants: {},\n  plugins: [],\n}\n````\n\n## TOCを追加\n\n[gatsby-remark-autolink-headers](https://www.gatsbyjs.com/plugins/gatsby-remark-autolink-headers/) で見出しにアンカーがつくようにする\n\n````shell\nyarn add gatsby-remark-autolink-headers\n````\n\n````javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-autolink-headers`,\n            options: {\n              offsetY: 80,\n              icon: false,\n              maintainCase: false,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n````\n\n### TOCコンポーネントを作成してページのコンポーネントに追加\n\n````typescript:toc.tsx\nimport * as React from 'react'\n\ntype Props = {\n  tocHtml?: string\n}\nconst Toc: React.FC\u003cProps\u003e = ({tocHtml}) =\u003e {\n  if (tocHtml === undefined) {\n    return \u003c\u003e\u003c/\u003e\n  }\n  return (\n    \u003cdiv className=\"toc bg-code-block px-4 py-1 my-2\"\u003e\n      \u003ch4 className=\"toc__title mt-2\"\u003e目次\u003c/h4\u003e\n      \u003cdiv\n        className=\"toc__content\"\n        dangerouslySetInnerHTML={{\n          __html: tocHtml,\n        }}\n      /\u003e\n    \u003c/div\u003e\n  )\n}\n\nexport default Toc\n````\n\n````typescript:bolg-post.tsx\n// ....\n  return (\n    \u003cLayout location={location} title={siteTitle}\u003e\n\n      \u003carticle\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      \u003e\n        \u003cheader\u003e\n          \u003ch1 itemProp=\"headline\"\u003e{post.frontmatter.title}\u003c/h1\u003e\n          \u003cp\u003e{post.frontmatter.date}\u003c/p\u003e\n        \u003c/header\u003e\n        \u003csection\n          className=\"blog-post__description\"\n        \u003e\n          {post.frontmatter.description}\n        \u003c/section\u003e\n        \u003cToc\n          tocHtml={post.tableOfContents}\n        /\u003e\n// ...\n    \u003c/Layout\u003e\n  )\n````\n\n## コードブロックにタイトルを設定\n\n参考: [Gatsbyにシンタックスハイライトを入れてコードをきれいに表示する | littlebylittle](https://littlebylittle.work/2020/01/gatsby-syntax-highlighting/)\n\n[gatsby-remark-code-titles](https://www.gatsbyjs.com/plugins/gatsby-remark-code-titles/) を使って、コードブロックにタイトルをつけます\n\n````shell\nyarn add gatsby-remark-code-titles\n````\n\n````javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          'gatsby-remark-code-titles',\n          `gatsby-remark-prismjs`,\n        ],\n      },\n    },\n  ],\n}\n````\n\nコードタイトル用のスタイルを追加\n\n````css:title=index.css\n.gatsby-code-title {\n  @apply bg-code-block text-text-light;\n  margin-bottom: -0.6rem;\n  padding: 6px 12px;\n  font-size: 0.8em;\n  line-height: 1;\n  font-weight: bold;\n  display: table;\n  border-radius: 4px 4px 0 0;\n}\n````\n","lastmodified":"2023-04-23T12:01:21.315371027Z","tags":["Gatsby","Netlify"]},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile (~/.zshrc if you are on Mac)\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile # again, (~/.zshrc if you are on Mac)\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup analytics?\nQuartz by default uses [Plausible](https://plausible.io/) for analytics. \n\nIf you would prefer to use Google Analytics, you can follow this [guide in the Hugo documentation](https://gohugo.io/templates/internal/#google-analytics). \n\nAlternatively, you can also import your Google Analytics data into Plausible by [following this guide](https://plausible.io/docs/google-analytics-import).\n\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":[]},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":[]},"/notes/zplug-to-zinit":{"title":"zplugをzinitに移行する","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## 移行理由\n\n自分がターミナルで使用しているシェルの変遷\n\n* 2016 ~ 2020/04 zsh zplug\n* 2020/04 ~ 2021/04 fishに移行した\n* 2021/04 ~ zshに戻った\n\nzshのカスタマイズが面倒なのと、シェルの起動が遅かったので、カスタマイズが簡単なfishに移行したが、以下の理由でまたzshに戻ってきた\n\n* fishはPOSIX非互換なのでコマンドを調べるのが手間\n* bash/zshで作ったスクリプトを書き換える必要がある\n\nzinitは起動が早いと聞いたので、zplugからzinitに移行する\n\n## インストール\n\n[公式の推奨手順](https://github.com/zdharma/zinit#automatic-installation-recommended)\n\n````shell\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)\"\n````\n\n`~/.zinit` (`$ZDOTDIR` が設定されていれば `$ZDOTDIR/.zinit`) にインストールされる。\nまた、 `~/.zshrc` にzinitの設定が追記されるので、リロードし、Zinitをコンパイルする。\n\n````shell\nsource ~/.zshrc\nzinit self-update\n````\n\n## プラグインの設定\n\n完全な例\n\n````shell\n### Added by Zinit's installer\nif [[ ! -f $ZDOTDIR/.zinit/bin/zinit.zsh ]]; then\n    print -P \"%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f\"\n    command mkdir -p \"$HOME/.zsh/.zinit\" \u0026\u0026 command chmod g-rwX \"$HOME/.zsh/.zinit\"\n    command git clone https://github.com/zdharma/zinit \"$HOME/.zsh/.zinit/bin\" \u0026\u0026 \\\n        print -P \"%F{33}▓▒░ %F{34}Installation successful.%f%b\" || \\\n        print -P \"%F{160}▓▒░ The clone has failed.%f%b\"\nfi\n\nsource \"$ZDOTDIR/.zinit/bin/zinit.zsh\"\nautoload -Uz _zinit\n(( ${+_comps} )) \u0026\u0026 _comps[zinit]=_zinit\n\n# Load a few important annexes, without Turbo\n# (this is currently required for annexes)\nzinit light-mode for \\\n    zinit-zsh/z-a-rust \\\n    zinit-zsh/z-a-as-monitor \\\n    zinit-zsh/z-a-patch-dl \\\n    zinit-zsh/z-a-bin-gem-node\n\n### End of Zinit's installer chunk\n\nzinit ice wait'1' lucid; zinit light \"zdharma/fast-syntax-highlighting\"\nzinit light \"zsh-users/zsh-autosuggestions\"\nzinit light \"zsh-users/zsh-completions\"\nzinit light \"zsh-users/zsh-history-substring-search\"\nbindkey '^[[A' history-substring-search-up\nbindkey '^[[B' history-substring-search-down\n\nzinit ice wait'1' lucid pick'init.sh'; zinit light \"b4b4r07/enhancd\"\nzinit ice wait'1' lucid; zinit light \"reegnz/jq-zsh-plugin\"\n\nzinit ice wait'1' lucid; zinit light \"b4b4r07/emoji-cli\"\nzinit ice wait'1' lucid; zinit light \"mollifier/cd-gitroot\"\nzinit light \"Aloxaf/fzf-tab\"\n\nzinit ice wait'1' lucid; zinit light \"lukechilds/zsh-better-npm-completion\"\n\n#######\n# https://github.com/Aloxaf/fzf-tab\n#######\nenable-fzf-tab\n# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\nzstyle ':fzf-tab:*' fzf-bindings 'ctrl-j:accept' 'ctrl-a:toggle-all' 'ctrl-space:toggle+down'\n# disable sort when completing `git checkout`\nzstyle ':completion:*:git-checkout:*' sort false\n# set descriptions format to enable group support\nzstyle ':completion:*:descriptions' format '[%d]'\n# set list-colors to enable filename colorizing\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n# preview directory's content with exa when completing cd\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\n# switch group using `,` and `.`\nzstyle ':fzf-tab:*' switch-group ',' '.'\n````\n\n`End of Zinit's installer chunk` までは、インストーラが追記した部分。\n\n### プラグインのダウンロード、有効化\n\n````shell\nzinit ice wait'1' lucid\nzinit light \"zdharma/fast-syntax-highlighting\"\n\nzinit load \"zdharma/history-search-multi-word\"\n````\n\nzinitには2つのプラグインロード方法がある\n\n* `zinit load`\n  * トラッキング機能を有効にする。zinit report で一覧表示ができたり、zinit unload でプラグインを無効化できるなどの利点があるが、ロードは遅くなる\n* `zinit light`\n  * トラッキング機能が無効になる。一覧等の機能が使えない代わりに高速\n\nめったにトラッキング機能を使わないため、基本的に `zinit light` でロードすることにした\n\n### zinit ice\n\n後続の `zinit load`, `zinit light` の挙動を制御する\n\n````shell\nzinit ice wait'1' lucid pick'init.sh'\nzinit light \"b4b4r07/enhancd\"\n# zinit ice wait'1' lucid pick'init.sh'; zinit light \"b4b4r07/enhancd\" と同義\n````\n\n* wait\n  * zshが起動したあとにプラグインを遅延ロードする秒数を指定する\n* lucid\n  * 遅延ロードしたときに、コンソールにロード情報が出力されるのを抑制する\n* pick\n  * sourceするファイルを指定する。pluginが `*.plugin.zsh` ファイルを起点にしていない場合、明示的に指定する\n\n## 結果\n\n2秒くらいかかっていた起動時間が0.6秒前後くらいになった。\nまた、zplugだと複数シェルを同時に起動すると競合して状態がおかしくるのか、同じプラグインが複数回ロードされることがまれにあったが、\nこういった問題も起こらなくなった。\n","lastmodified":"2023-04-23T12:01:21.319371071Z","tags":["zinit","zsh"]}}