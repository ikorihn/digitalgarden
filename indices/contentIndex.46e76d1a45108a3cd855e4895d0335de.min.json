{"/":{"title":"ikorihn Digital Garden","content":"\n[Quartz](https://github.com/jackyzha0/quartz) で作成した [digital garden](https://jzhao.xyz/posts/networked-thought) です。\nObsidian のノートから一部を公開しています。\n\n- [Tags](/tags)\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":[]},"/notes/%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E5%85%A5%E9%96%80":{"title":"ターミナル入門","content":"\n## 私のターミナル歴\n\n* 2015 新卒入社 Windows時代 まだコマンドプロンプトって黒い画面で怖いと思っていた\n  * コマンドプロンプトでantのbuildをする程度\n* 2016\n  * batファイルを触ることが増えてきた\n* 2017 gvimで初めてvimに触れる。これまでサクラエディタとか秀丸を使っていたし周りでもvimという単語を聞いたことがなかったので、マイナーなエディタを使っている俺かっけーと思っていた。どうやら2大エディタらしいと知るのはもう少しあとになってから\n  * 簡単な作業をbatファイル書いてやらせたりし始めた\n* 2018\n  * mac\n  * \n\n## 基本操作\n\n* tabでバシバシ補完する\n* \n\n## キーバインドを覚えよう\n\n* ターミナルではemacs風のキーバインドが使える\n  * ホームポジションから動かずにカーソル操作ができるようになる\n  * macの場合はだいたいのアプリでも同じなので覚えておくと便利\n* `ctrl-n/p`: next/previous\n* `ctrl-f/b`: front/back\n* `ctrl-h/d`: backspace/delete\n* `ctrl-a/e`: ahead/end\n\n## .zshrc\n\n````shell\n# ヒストリの設定\nexport HISTFILE=~/.zsh_history\nexport HISTSIZE=1000000\nexport SAVEHIST=1000000\n````\n\n## PATHってなに\n\n## aliasを設定しよう\n\n## 見た目をかっこよくしよう\n\n## fuzzy finder(fzf, peco)を使おう\n\n* \n\n## tabでファイル名をfzfで選択するウィンドウを表示させる\n\n````shell\n# 補完機能を有効にする\nautoload -Uz compinit\ncompinit\n````\n\nzinit\n\n````shell\n#######\n# https://github.com/Aloxaf/fzf-tab\n#######\nzinit light \"Aloxaf/fzf-tab\"\nenable-fzf-tab\n# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\nzstyle ':fzf-tab:*' fzf-bindings 'ctrl-j:accept' 'ctrl-a:toggle-all' 'ctrl-space:toggle+down'\n# disable sort when completing `git checkout`\nzstyle ':completion:*:git-checkout:*' sort false\n# set descriptions format to enable group support\nzstyle ':completion:*:descriptions' format '[%d]'\n# set list-colors to enable filename colorizing\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n# preview directory's content with exa when completing cd\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\n# switch group using `,` and `.`\nzstyle ':fzf-tab:*' switch-group ',' '.'\n````\n","lastmodified":"2023-04-23T14:30:10.396788382Z","tags":["#terminal"]},"/notes/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88":{"title":"ネットワークに応じて処理を振り分けるスクリプト","content":"\n\\#shell\n\n## ネットワークに応じて処理を振り分けるスクリプト\n\n````shell:switch_location.sh\n#!/bin/zsh\n\n# ネットワーク環境を切り替える\nswitchNetwork() {\n  local location=$1\n  currentLocation=$(networksetup -getcurrentlocation)\n  if test $currentLocation = $location; then\n    return\n  fi\n\n  scselect $(scselect | grep $location | awk '{ print $1 }')\n  osascript -e 'display notification \"'\"Switch network location to ${1}\"'\" with title \"'\"${0##*/}\"'\" '\n}\n\n# Git リポジトリ設定を切り替える\nswitchGitConfig() {\n  local location=$1\n\n  case \"$location\" in\n    Home)\n      git config --global --replace-all http.$GIT_REPO_URL_HTTPS.proxy $PROXY_URL\n      git config --global --replace-all url.$GIT_REPO_URL_HTTPS.insteadOf $GIT_REPO_URL_SSH\n      git config --global --replace-all url.$GIT_REPO_URL_HTTPS.insteadOf ssh://$GIT_REPO_URL_SSH --add\n      ;;\n    Office)\n      git config --global --unset-all http.$GIT_REPO_URL_HTTPS.proxy\n      git config --global --unset-all url.$GIT_REPO_URL_HTTPS.insteadOf\n      ;;\n  esac\n}\n\nmain() {\n  set -x\n  ADAPTER=en0\n\n  # Wi-FiがONになっているか\n  airportpower=$(networksetup -getairportpower $ADAPTER | awk -F': ' '{ print $2 }')\n  if test ${airportpower} = 'Off'; then\n    echo 'Wifi is Off.'\n    exit\n  fi\n\n  # SSIDを取得\n  ssid=$(networksetup -getairportnetwork $ADAPTER | awk -F': ' '{ print $2 }')\n\n  location=Automatic\n  case \"$ssid\" in\n    $SSID_HOME)\n      location=Home\n      ;;\n    $SSID_OFFICE)\n      location=Office\n      ;;\n  esac\n\n  switchNetwork $location\n  switchGitConfig $location\n  set +x\n}\n\nmain\n````\n","lastmodified":"2023-04-23T14:30:10.396788382Z","tags":["#shell"]},"/notes/%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%A2%E3%83%B3%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B":{"title":"マイクのミュート・アンミュートを切り替える","content":"\n\\#Mac\n\n````oascript\nset micVolume to toggleMic()\ndisplay notification micVolume with title \"Mic\"\nreturn micVolume\n\non toggleMic()\n\tset inputVolume to input volume of (get volume settings)\n\tif inputVolume ≤ 5 then\n\t\tset inputVolume to 100\n\t\tset micVal to \"🔈 unmuted\"\n\telse\n\t\tset inputVolume to 0\n\t\tset micVal to \"🔇 muted\"\n\tend if\n\tset volume input volume inputVolume\n\treturn micVal\nend toggleMic\n````\n\nAutomator \u003e Quick Action から作成して、システム設定 \u003e キーボード \u003e ショートカット \u003e サービス でキーボードショートカットを設定すれば一発で切り替えられるようになる\n\n[macのマイクをボリュームで擬似的にON/OFF - Qiita](https://qiita.com/okoshi/items/35b17c0865c83e20ea0c)\n","lastmodified":"2023-04-23T14:30:10.396788382Z","tags":["#Mac"]},"/notes/%E6%84%9B%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bvim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3":{"title":"愛用しているvimプラグイン","content":"\n### gina\n\nhttps://github.com/lambdalisue/gina.vim\n[gina.vimとGitHubの連携を向上させる | Input中心のブログ](https://kitagry.github.io/blog/programmings/2020/09/gina-browse/)\n\nfugitiveのほうが `:Git log` などが見やすい気がする\n`:Gina! log` で同じようなことはできる模様。\n`:Gina!!` と double bang にすると生のgitコマンドが実行される。\nfzf-previewと連携しやすいのでGinaにしてみた。\n\n### fzf-preview\n\n[TypeScriptでVimのファジーファインダーを実装して開発体験が最高になっている話](https://zenn.dev/yano/articles/vim_with_fzf_preview_is_best_experience)\n[Vimにたくさんあるファジーファインダー系プラグインを比較してみる](https://zenn.dev/yutakatay/articles/vim-fuzzy-finder)\n[無人島に持っていく(Neo)vimプラグイン10選 (TS開発環境編)](https://zenn.dev/yano/articles/vim_plugin_top_10)\n\nCOC版を入れた。\nfzf.vimで良かった気もする\n\n### vim-ripgrep\n\n[vim-ripgrepを作った話](https://zenn.dev/kyoh86/articles/67c1408d6ef950)\n","lastmodified":"2023-04-23T14:30:10.396788382Z","tags":["#vim"]},"/notes/%E8%87%AA%E5%AE%85%E3%81%A8%E8%81%B7%E5%A0%B4%E3%81%A7proxy%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%81%9F%E3%81%84":{"title":"自宅と職場でproxy設定を切り替えたい","content":"\n\\#Mac #Network #shell\n\n出社時と在宅時で、プロキシの接続情報を変更する必要がある。\n手で切り替えるのを忘れて社内システムにつながらない…ということがよく発生するので、自動化することにした。\n\n## 切り替えたい対象\n\n* プロキシ設定\n* git proxyの設定を環境に応じて変更\n\n## 実現方法\n\n* proxy.pac をローカルのhttpサーバーで配布\n* Macのネットワーク設定 \u003e Location で自宅と職場でproxy.pacのURLをそれぞれ設定\n* git proxyをset,unsetするコマンドを実行\n* wifiのSSIDが家か職場を判定して分岐する\n* トリガーはスリープからの復帰時\n\n### プロキシ設定について\n\nプロキシの設定はproxy.pacを使って行う。\n職場では社内で配布されるproxy.pacのURLを入力すればいいが、\n自宅では、自前のproxy.pacを作って設定したい。\n\nしかし、Mojaveからローカルのproxy.pacを `file://` で設定することができなくなった\n\n[macOS 10.14 Mojave 以降で pac ファイルを使って proxy の設定を行いたいけど出来なかった話 - Qiita](https://qiita.com/orange634nty/items/9ef5cadd039592e8344a)\n\n \u003e \n \u003e #### Deprecations\n \u003e \n \u003e The `ftp://` and `file://` URL schemes for Proxy Automatic Configuration (PAC) are deprecated. HTTP and HTTPS are the only supported URL schemes for PAC. This affects all PAC configurations including, but not limited to, configurations set via Settings, System Preferences, profiles, and [`URLSession`](https://developer.apple.com/documentation/foundation/urlsession) APIs such as [`connectionProxyDictionary`](https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1411499-connectionproxydictionary), and [`CFNetworkExecuteProxyAutoConfigurationURL(_:_:_:_:)`](https://developer.apple.com/documentation/cfnetwork/1426392-cfnetworkexecuteproxyautoconfigu). (37811761)\n\nそのため、ローカルにhttpサーバーを立てて `http://localhost` を設定する方法をとる\n\n## proxy.pacをローカルのhttpサーバーで配布\n\n### httpdをインストール、自動起動\n\n````shell\n$ brew install httpd\n\n# M1 Macの場合 /opt/homebrew/etc に設定ファイルがある\n$ vim /opt/homebrew/etc/httpd/httpd.conf\n=\u003e Listenポートを任意に設定する(私は80に設定)\n\n$ brew services start httpd\n==\u003e Successfully started `httpd` (label: homebrew.mxcl.httpd)\n\n# `brew services start` するとlaunchdに登録され、自動起動するようになる (`brew services stop` すると停止、自動起動も解除される)\n$ launchctl list | rg brew\n63000   0       homebrew.mxcl.httpd\n$ cat ~/Library/LaunchAgents/homebrew.mxcl.httpd.plist\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\n\u003cplist version=\"1.0\"\u003e\n\u003cdict\u003e\n        \u003ckey\u003eEnvironmentVariables\u003c/key\u003e\n        \u003cdict\u003e\n                \u003ckey\u003ePATH\u003c/key\u003e\n                \u003cstring\u003e/opt/homebrew/bin:/opt/homebrew/sbin:/usr/bin:/bin:/usr/sbin:/sbin\u003c/string\u003e\n        \u003c/dict\u003e\n        \u003ckey\u003eLabel\u003c/key\u003e\n        \u003cstring\u003ehomebrew.mxcl.httpd\u003c/string\u003e\n        \u003ckey\u003eProgramArguments\u003c/key\u003e\n        \u003carray\u003e\n                \u003cstring\u003e/opt/homebrew/opt/httpd/bin/httpd\u003c/string\u003e\n                \u003cstring\u003e-D\u003c/string\u003e\n                \u003cstring\u003eFOREGROUND\u003c/string\u003e\n        \u003c/array\u003e\n        \u003ckey\u003eRunAtLoad\u003c/key\u003e\n        \u003ctrue/\u003e\n\u003c/dict\u003e\n\u003c/plist\u003e\n````\n\n### proxy.pacを配置\n\n`/opt/homebrew/var/www/` にproxy.pacを置く\n\n\u003chttp://localhost/proxy.pac\u003e で取得できるようになる\n\n## Macのネットワーク設定 \u003e Location で自宅と職場でproxy.pacのURLをそれぞれ設定\n\n![Pasted-image-20211008123230.png](static/Pasted-image-20211008123230.png)\n\nそれぞれのLocationで、proxy.pacのURLを入力する\n\n自宅: `http://localhost/proxy.pac`\n職場: `社内のproxy.pacのURL`\n![Pasted-image-20211008124722.png](static/Pasted-image-20211008124722.png)\n\n## ネットワーク切り替え時に実行するスクリプトを作成\n\n[ネットワークに応じて処理を振り分けるスクリプト](%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88.md)\n\n## sleep復帰時にスクリプトを実行する\n\n### sleepwatcherをインストール\n\n[Macスリープ時・復帰時に処理を動かす](Mac%E3%82%B9%E3%83%AA%E3%83%BC%E3%83%97%E6%99%82%E3%83%BB%E5%BE%A9%E5%B8%B0%E6%99%82%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99.md)\n\nスリープ前や復帰時にスクリプトを実行できるようになる\n\n````shell\nbrew install sleepwatcher\n````\n\n### plistファイルを作成する\n\n`~/Library/LaunchAgents` 以下にファイルを作成\n\n````xml:~/Library/LaunchAgents/sleepwatcher.plist\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\n\u003cplist version=\"1.0\"\u003e\n\u003cdict\u003e\n    \u003ckey\u003eLabel\u003c/key\u003e\n    \u003cstring\u003esleepwatcher\u003c/string\u003e\n    \u003ckey\u003eProgramArguments\u003c/key\u003e\n    \u003carray\u003e\n        \u003cstring\u003e/usr/local/sbin/sleepwatcher\u003c/string\u003e\n        \u003cstring\u003e-V\u003c/string\u003e\n        \u003cstring\u003e-w /path/to/switch_location.sh\u003c/string\u003e\n    \u003c/array\u003e\n    \u003ckey\u003eRunAtLoad\u003c/key\u003e\n    \u003ctrue/\u003e\n    \u003ckey\u003eKeepAlive\u003c/key\u003e\n    \u003ctrue/\u003e\n\u003c/dict\u003e\n\u003c/plist\u003e\n````\n\n* `-w` スリープ復帰（Wake Up）時に実行するコマンド\n* `-s` スリープ（Sleep）時に実行するコマンド\n\n### launchdに登録\n\n````shell\n$ launchctl load ~/Library/LaunchAgents/sleepwatcher.plist\n````\n\n## 参考\n\n[Mac のスリープ／復帰時にスクリプトを実行する - Qiita](https://qiita.com/fiftystorm36/items/5fe936a92445cbf4ad9a)\n[Macの起動/スリープ復帰時に自動でVPNに接続する / LOG](https://log.brdr.jp/post/887)\n[Mac でネットワーク環境を使う方法 - Apple サポート (日本)](https://support.apple.com/ja-jp/HT202480)\n[macOS 10.14 Mojave 以降で pac ファイルを使って proxy の設定を行いたいけど出来なかった話 - Qiita](https://qiita.com/orange634nty/items/9ef5cadd039592e8344a)\n","lastmodified":"2023-04-23T14:30:10.396788382Z","tags":["#Mac","#Network","#shell"]},"/notes/Mac%E3%82%B9%E3%83%AA%E3%83%BC%E3%83%97%E6%99%82%E5%BE%A9%E5%B8%B0%E6%99%82%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99":{"title":"Macスリープ時・復帰時に処理を動かす","content":"\n[macOSのスリープ時にEC2を落とそう - サーバーワークスエンジニアブログ](https://blog.serverworks.co.jp/tech/2019/08/17/sleepwatcher/)\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["#Mac"]},"/notes/Raycast":{"title":"Raycast","content":"\n[RaycastはただのLauncherツールにとどまらない](https://zenn.dev/rinchsan/articles/1c26913a87a5aa)\n[ランチャーツールRaycastの使い方と設定 | DevelopersIO](https://dev.classmethod.jp/articles/eetann-used-raycast/)\n\n## 自分の設定\n\n* Authy\n\n### マイク\n\n[Raycastでマイクのミュートを切り替える](Raycast%E3%81%A7%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B.md)\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["#2023/01/06","#Raycast","#Mac"]},"/notes/Raycast%E3%81%A7%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B":{"title":"Raycastでマイクのミュートを切り替える","content":"\n[Raycast](Raycast.md) を使ってマイクのミュートを切り替えます\n\nRaycastの設定 \u003e Extensions \u003e +ボタン \u003e Create Script Command \u003e templateをApple Scriptにして任意の場所に作成\n\n![Pasted-image-20220311122221.png](static/Pasted-image-20220311122221.png)\n\n````applescript:mute.applescript\n#!/usr/bin/osascript\n\n# Required parameters:\n# @raycast.schemaVersion 1\n# @raycast.title mic mute\n# @raycast.mode compact\n\n# Optional parameters:\n# @raycast.icon 🤖\n\nset micVolume to muteMic()\ndisplay notification micVolume with title \"Mic\"\nreturn micVolume\n\non muteMic()\n\tset inputVolume to 0\n\tset micVal to \"🔇 muted\"\n\tset volume input volume inputVolume\n\treturn micVal\nend muteMic\n````\n\n同様にして、 `unmute.applescript` を作成\n\n````applescript:mute.applescript\n#!/usr/bin/osascript\n\n# Required parameters:\n# @raycast.schemaVersion 1\n# @raycast.title mic unmute\n# @raycast.mode compact\n\n# Optional parameters:\n# @raycast.icon 🤖\n\nset micVolume to unmuteMic()\ndisplay notification micVolume with title \"Mic\"\nreturn micVolume\n\non unmuteMic()\n\tset inputVolume to 80\n\tset micVal to \"🔈 unmuted\"\n\tset volume input volume inputVolume\n\treturn micVal\nend unmuteMic\n````\n\nRaycastの設定 \u003e Extensions から、コマンドにショートカットを設定することができます。\n私はアンミュートを `Cmd + Opt + m` , ミュートを `Cmd + Shift + Opt + m` に設定しています。\n\nトグルのほうがいい場合は [マイクのミュート・アンミュートを切り替える](%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%83%BB%E3%82%A2%E3%83%B3%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B.md) のスクリプトを作成する。\n自分は現在の状態がミュートアンミュートのどちらであっても同じ動作をさせたいためそれぞれのコマンドを登録しています。\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["#Mac","#Raycast"]},"/notes/build-typescript-on-netlify":{"title":"TypeScriptのGatsbyをNetlifyでビルドしたときのエラーに対応した","content":"\n## 事象\n\nTypeScript化したGatsbyをNetlifyでビルドした際に以下のエラーが発生しました。\n\n````shell\n$ gatsby build\nerror Error in \"/opt/build/repo/gatsby-node.js\": Unexpected token '.'\n\n\n  Error: /opt/build/repo/src/gatsby-node/index.ts:28\n      const posts = result.data?.allMarkdownRemark.nodes;\n                                ^\n  SyntaxError: Unexpected token '.'\n````\n\n## 対応\n\nNetlifyのビルドログに `Now using node v12.18.0 (npm v6.14.4)` とあるようにデフォルトではv12.18.0が使われるようです。\nOptional ChainingはNode.js v14から使用できる機能のため、v14以上が使用されるように設定します。\n\n[Manage build dependencies | Netlify Docs](https://docs.netlify.com/configure-builds/manage-dependencies/)\n\n環境変数 `NODE_VERSION` で指定できるため以下のように設定しました。\n\n![public/static/2021-10-31-17-31-50.png](static/2021-10-31-17-31-50.png)\n\nこれでビルドが通るようになりました。\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["Gatsby","Netlify"]},"/notes/fish-history-to-zsh-history":{"title":"fishのhistoryをzshに移行する","content":"\n一年くらいfishを使っていたが、文法があまりにbash/zshと異なり辛いため、zshに戻すことにした。\nコマンド履歴に頼る人間なので、直近1年の履歴がなくなってしまうのは困る。\nそこでfishのhistoryファイルをzshのhistoryファイルに移行することにした。\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## 移行ツール\n\n移行するためのツールを作った。\n\n\u003chttps://github.com/ikorihn/zhistconv\u003e\n\n使い方\n\n````shell\n# fish_hisoryをzsh_historyに変換して追記(事前にバックアップを取ることを推奨)\n$ zhistconv fish fish_hist \u003e\u003e ~/.zsh_history\n$ history -E 1\n=\u003e 結合されたhistoryが表示される\n````\n\n以下詳細\n\n## fishのhistoryファイルをzshのhistoryファイルの形式に変換する\n\n### fishのhistoryファイル\n\n`~/.local/share/fish/fish_history`\n\n````yaml\n- cmd: echo hello\n  when: 1621067042\n- cmd: git pull\n  when: 1621067359\n````\n\nyaml形式で保存されているので、yamlをロードして変換してあげればいい\n\n### zshのhistoryファイル\n\n`~/.zsh_history`\n\n````txt\n: 1621066935:0;echo hello\n: 1621066935:0;cd\n````\n\n`: \u003cunix timestamp\u003e:0:\u003ccommand\u003e` 形式(真ん中の0が何を意味しているかは調べてない)\n\n## zshのマルチバイト文字の扱いについて\n\n一つ問題があった。移行ツールをわざわざ作ったのはほとんどこの仕様のため\n\n`~/.zsh_history` をUTF-8で開くと、日本語が文字化けしていた。\nhistoryコマンドの結果は文字化けしていない。\n\nどうやらマルチバイト文字が特殊な扱いをされているらしい。\n\n[.zsh_historyにおける非ASCII文字の扱いについて - 生涯未熟](https://syossan.hateblo.jp/entry/2017/10/09/181928)\n[unmetafy unicode when zsh by rogerdehe · Pull Request #416 · dvorka/hstr](https://github.com/dvorka/hstr/pull/416)\n\nmetafy/unmetafyという処理をしているらしく、\nメタなバイトがあったら直前に `0x83` を挿入して、`0x20`とのxorを取り6bit目を反転させているようだ。\n\n\u003chttps://github.com/zsh-users/zsh/blob/master/Src/utils.c#L4921-L4933\u003e\n\n````c\nmod_export char *\nunmetafy(char *s, int *len)\n{\n    char *p, *t;\n\n    for (p = s; *p \u0026\u0026 *p != Meta; p++);\n    for (t = p; (*t = *p++);)\n\tif (*t++ == Meta \u0026\u0026 *p)\n\t    t[-1] = *p++ ^ 32;\n    if (len)\n\t*len = t - s;\n    return s;\n}\n````\n\n単純にfish_historyを変換してzsh_historyに貼り付けるだけでは、日本語部分が文字化けしてしまう。\n\n### 文字化けしたzsh_historyファイルを読めるようにする\n\n`ぁあぃいぅうぜそぞただちぢっつづ` という文字列を使って調べていく。\nこれらは頭2バイトが `e381`、末尾1バイトがそれぞれいかのようになる。\n\n* `ぁ`: `81`\n* `あ`: `82`\n* `ぃ`: `83`\n* `い`: `84`\n* `ぅ`: `85`\n* `う`: `86`\n* `ぜ`: `9c`\n* `そ`: `9d`\n* `ぞ`: `9e`\n* `た`: `9f`\n* `だ`: `a0`\n* `ち`: `a1`\n* `ぢ`: `a2`\n* `っ`: `a3`\n* `つ`: `a4`\n* `づ`: `a5`\n\nzsh_historyで見ると以下のようなバイト列になっている(わかりやすいよう適宜スペースを入れている)\n\n````txt\nE38181 E38182 E38183A3 E38183A4 E38183A5 E38183A6 E38183BC E38183BD E38183BE E38183BF E3818380 E3818381 E3818382 E381A3 E381A4 E381A5\n````\n\nzsh_historyの文字コードはlatin1なのでほぼUTF-8と同じ。\n文字コード表をもとに当てはまる文字に戻すと、 `0x83-0xA2` のとき、直前に `0x83` を入れてから6bit目を反転させていることがわかる。\n\n````txt\nE38181 E38182 E38183A3 E38183A4 E38183A5 E38183A6 E38183BC E38183BD E38183BE E38183BF E3818380 E3818381 E3818382 E381A3 E381A4 E381A5\n````\n\n`0x83` を消して、直後の6bit目を反転させると以下のようになる\n\n````txt\nE38181 E38182 E38183 E38184 E38185 E38186 E3819C E3819D E3819E E3819F E381A0 E381A1 E381A2 E381A3 E381A4 E381A5\n````\n\nこれがもとの文字列のバイト列に一致する。\n\nマルチバイト文字をzsh_historyの形式に変換するには上と逆のことをすればいい。\nつまり、`0x83-0xA2` のとき、直前に `0x83` を入れてから6bit目を反転させる。\n\n### Goでzsh_historyをパースするプログラムを書いてみる\n\n````go\npackage zhistconv\n\nconst (\n\t// zsh_historyの仕様で、各バイトが0x83~0xA2のとき、その前に0x83を入れて6bit目を反転させる\n\tx83 = 131\n\txA2 = 162\n\tx20 = 32\n)\n\nfunc ParseZshHistory(latin1Byte []byte) []byte {\n\tisMarking := false\n\tvar byteBuffer []byte\n\n\tfor _, codePoint := range latin1Byte {\n\t\tif codePoint == x83 {\n\t\t\tisMarking = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif isMarking {\n\t\t\t// 6bit目を反転させるために0x20をXORする\n\t\t\tinvertCodePoint := codePoint ^ x20\n\t\t\tbyteBuffer = append(byteBuffer, invertCodePoint)\n\t\t\tisMarking = false\n\t\t} else {\n\t\t\tbyteBuffer = append(byteBuffer, codePoint)\n\t\t}\n\t}\n\n\treturn byteBuffer\n}\n\nfunc ConvertToZshHistory(latin1Byte []byte) []byte {\n\tvar byteBuffer []byte\n\n\tfor _, codePoint := range latin1Byte {\n\t\t// 131は0metacharの10進数表現\n\t\tif x83 \u003c= codePoint \u0026\u0026 codePoint \u003c= xA2 {\n\t\t\t// 6bit目を反転させるために0x20をXORする\n\t\t\tinvertCodePoint := codePoint ^ x20\n\t\t\tbyteBuffer = append(byteBuffer, x83)\n\t\t\tbyteBuffer = append(byteBuffer, invertCodePoint)\n\t\t} else {\n\t\t\tbyteBuffer = append(byteBuffer, codePoint)\n\t\t}\n\t}\n\n\treturn byteBuffer\n}\n````\n\n## 作ったツールについて\n\n[urfave/cli: A simple, fast, and fun package for building command line apps in Go](https://github.com/urfave/cli)\n\nこちらを使ってcliツールを作った。\n\n* `zhistconv fish`: fish_historyをzsh_historyの形式に変換して標準出力する\n* `zhistconv parse`: zsh_historyをUTF-8に変換する\n* `zhistconv reverse`: UTF-8で書かれたzsh_historyのマルチバイト文字をzsh_historyの仕様に変換する\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["fish","zsh"]},"/notes/jenkins-ui-customize":{"title":"Jenkinsの見た目をカスタマイズ","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## モチベーション\n\nJenkins のデフォルトの見た目は古臭いので、好きなテーマに変更したい。\nまた、環境ごとの違いをひと目でわかりやすくすることで事故を防ぐ。\n\n## jenkins-material-theme をダウンロード\n\n\u003chttp://afonsof.com/jenkins-material-theme/\u003e\nから色とロゴを指定してテーマをダウンロードする。\n\n## プラグインを設定\n\n\\[Jenkinsの管理\\] -\u003e \\[プラグインの管理\\] -\u003e \\[利用可能\\] -\u003e [Simple Theme Plugin](https://plugins.jenkins.io/simple-theme-plugin/) をインストール\n\nダウンロードしたスタイルシートのファイル（jenkins-material-theme.css）を Jenkins フォルダの userContent フォルダへ配置する\n\n* Jenkinsを置いてあるサーバにSSHログイン\n* `\u003cドキュメントルート(/var/lib/jenkins/など)\u003e/userContent/jenkins-material-theme.css`\n\nJenkinsの管理のシステムの設定でダウンロードしたテーマを指定する。\n\nURL of theme CSSにこちらを入力して保存: `/userContent/jenkins-material-theme.css`\n\n## material-theme を適用したときに、pipelineエディタでカーソル位置と実際に編集される位置がずれる\n\n`:not(div.ace_editor)` に `font-family: Roboto, sans-serif!important` が設定されているため等幅フォントになっていない。\n\n[Main Script -- Replay -- the cursor in the editor is out of phase · Issue #184 · afonsof/jenkins-material-theme](https://github.com/afonsof/jenkins-material-theme/issues/184)\n\n等幅フォントを設定してあげればよい。\n自分でカスタマイズできるのが利点\n\n````css:jenkins-material-theme.css\n#main-panel\u003epre *,\n.ace_editor .ace_scroller .ace_content * {\n  font-family: Roboto Mono, monospace !important;\n}\n\ndiv.ace_editor.ace-tomorrow,\ndiv.ace_editor.ace-tomorrow * {\n  font: 12px/normal Roboto Mono, monospace !important;\n}\n````\n\n## 参考\n\n[Jenkinsのテーマ(UI)を変えてみた | レコチョクのエンジニアブログ](https://techblog.recochoku.jp/2021)\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["Jenkins"]},"/notes/karabiner-elements-recommend":{"title":"Karabiner-Elementsで個人的におすすめのキーバインド","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## Karabiner-Elements とは\n\nMacのキーボードをカスタマイズするためのツールです。\nこれを使えばUSキーボードでもJIS配列のようにかな/英数キーを割り当てるなどが可能になります。\n\nここでは個人的に使っているキーバインドを紹介します。\nインストールや設定方法については色々なサイトで紹介されているので省略します。\n\nルールについては \u003chttps://ke-complex-modifications.pqrs.org/\u003e から探すことができます。\nKarabiner-ElementsのPreferences -\u003e Complex modifications -\u003e Import more rules from the Internet から飛べます。\n\n![public/static/2021-08-15-16-28-21.png](static/2021-08-15-16-28-21.png)\n\n## Change spacebar to left_shift if pressed with other keys (Post spacebar when pressed alone)\n\n[Change spacebar](https://ke-complex-modifications.pqrs.org/#spacebar)\n\nスペースキーにShiftを割り当て、スペースキー単独で押したときにはスペースが入力されます。\nいわゆる `SandS (Space and Shift)` というものです。\n\n特にShift+数字の入力が遠く感じてミスが多かったのが、かなり改善されました。\n\n注意としては、スペース押しっぱなしにしても1つしか入力されないので、連続入力したい場合連打が必要になります。\n\n## Post escape if left_control is pressed alone\n\n[Change control key](https://ke-complex-modifications.pqrs.org/#control)\n\nCtrlキーを単独で押したときにECSが入力されます。\n\n自身がvimmerであり、vim以外のエディタにもvimキーバインドを設定しているので、ECSをよく押すのですが、\n指を動かす距離が減って楽になりました。\n\nvimでECSを `jj` や `C-[` などにバインドしている人や、vimmer以外には恩恵を感じにくいかもしれません。\n\n## Quit application by holding command-q\n\n[Prevent unintended command-q (rev 2)](https://ke-complex-modifications.pqrs.org/#command_q)\n\nCmd+q を長押しでアプリケーションを終了するようになります。\n\nタブを閉じようとしてしょっちゅう `Cmd+w` と `Cmd+q` を打ち間違えるため導入しました。\n\n## コマンドキーを単体で押したときに、英数・かなキーを送信する。（左コマンドキーは英数、右コマンドキーはかな）\n\n[For Japanese （日本語環境向けの設定）](https://ke-complex-modifications.pqrs.org/#japanese)\n\n記号の配置の好みや、リターンキーの押しやすさからUS配列を使用しています。\nUS配列のキーボードでは、英数やかなのキーがなく、日本語切り替えは `Cmd+Space` や `Ctrl+Space` で行います。\n\n切り替えの場合、現在の入力状態を把握している必要があるので、できればJIS配列と同じように単一のキーを押すと必ず英数/ローマ字入力に変わってほしいところです。\n\nこの設定を行うと、左Commandが英数キー、右Commandがかなキーに割り当てられます。\nCommandのmodifierとしての機能は維持され、コピーやペーストなどのショートカットも利用できます。\n\n## Vonng/Capslock\n\n\u003chttps://github.com/Vonng/Capslock\u003e\n\nCapsLockキーを、いろいろなことができるmodifierに変化させる設定です。\n*Make CapsLock Great Again!* と銘打つだけあって、アプリ起動のホットキーを作ったり、矢印キーでマウスカーソルを移動させたりといったことができるようになります。\n\n`karabiner://karabiner/assets/complex_modifications/import?url=https://vonng.com/capslock.json` からインストールできます。\n\n### Application\n\nアプリケーション起動のホットキーを登録できます。\n例: `CapsLock+e` でSafariが起動する(起動済みだったらウィンドウが切り替わる)\n\nCmd+Tabでアプリを切り替えたり、Mission ControlやDockで探したりといった手間がなくなります。\n\n私はkarabinerの設定ファイル(`~/.config/karabiner/karabiner.json`) を書き換えて、よく使うアプリを左手のキーに登録しています。\n\n* `CapsLock+s`: Slack\n* `CapsLock+g`: Chrome\n* `CapsLock+v`: Visual Studio Code\n* `CapsLock+f`: iTerm2\n* `CapsLock+Cmd+f`: Finder\n\n### Functional\n\n`CapsLock+数字列` をFunctionキーにします。\nFunctionキーのないキーボードを使っている場合に便利です。\n\n### Navigation\n\nVimスタイルの移動が可能になります。どんな場所でも `hjkl` で移動できるようになります。\nほかにも `u` が `PgUp`、`i` が `Home` になったり、\n`CapsLock+Opt+hjkl` がマウスカーソル移動になったりします。\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["Mac","keyboard"]},"/notes/look-back-2021":{"title":"2021年振り返り","content":"\n## 2021年にやったこと\n\n### Kotlin + Spring Boot\n\n1月〜3月ごろはKotlin + Spring Boot を触っていました。\nKotlinで初めてサーバーサイドを1から作れていい経験になりました。\nSpring BootはWebサーバーつくるにあたってほしい機能が一通り揃っていて助かりました。\nSpringもほぼ初めてで悩むことはありましたが、Kotlinだから詰まったということはなかったように思います。\n\nMockKできっちりテスト書きながら進められたのもよかったです。\nSpringがとにかくDI周りのことを何も考えなくてもやってくれるので、\nとくにハマることもなくinjectionしてmockしたらテストがかけてストレスが少なかったです。\n\nこの時期は技術的には楽しいことをやれていましたが、負荷も高くて疲れてもいました。\n\n### Go + Lambda\n\nAWS Lambdaでバッチを書いたりAPIサーバー作ったりと、何かと触る機会が多かったです。\n何回か書いていくうちにテストのしやすさやメンテしやすさを考慮した設計ができるようになったと思います。\n\nリリースされたばかりの[aws-sdk-go-v2](https://github.com/aws/aws-sdk-go-v2)も使いながら、知見を貯めることができました。\n\n### 競プロ\n\n計算量とかアルゴリズムをちゃんと意識できるようにならなきゃいかんと思って、\n2月〜3月ごろは競プロにハマってC++を勉強したり\n[問題解決力を鍛える！アルゴリズムとデータ構造](https://www.amazon.co.jp/dp/B08PV83L3N) を読んだりしていました。\n\nAtCoder茶色になったくらいで離れてしまいましたが、また再開したいと思っています。\n\n業務上はそんなに活かせてないですが、データ量が大きいときにループしているコードを見て「これ1秒以上かかるけど大丈夫？」のような勘が働くようになったのは良かったと思います。\n\n### Obsidian\n\n[Obsidian](https://obsidian.md/) でメモを取るようになりました。\nmarkdownで全て管理できるのが気に入ってます。\nあまり使いこなせてる気はしませんが、markdownなので特定のツールにロックインされることがないのが嬉しいです。\n\nGoogle KeepメモやEvernoteにためていたノート類もエクスポートして、markdown管理にしています。\n一発でmarkdownにすることができなかったので、一度Notionにインポートしてからmarkdownでエクスポートしました。\n\n作業記録やタスクもObsidian上で管理するようになりました。\nいままでもTogglやTodoistは使っていましたが、ぜんぜん続かず思い出したときにだけ書くからあまり意味がなかったのですが、\nObsidianは書くことのストレスが少なく、フォーマットも自由にいじれるので自分にあっているようです。\n\n[Day Planner](https://pouhon.net/obsidian-planner/6033/)の機能を使っています。\n\n細かく記録をつけようと思うならTogglなどをきっちり使ったほうがいいんだと思いますが、\n大雑把に何時間くらい何をしていたか程度の把握にしか使っていないので十分でした。\n\nあとからこの日何をしていたか振り返ることができるので今後も続けていきたいです。\n\n### 今年見て良かったもの\n\n#### 映画\n\n* 閃光のハサウェイ\n* シン・エヴァンゲリオン\n* 映画大好きポンポさん\n* 子供はわかってあげない\n* フリーガイ\n* コングvsゴジラ\n* ディパーテッド\n* ノクターナル・アニマルズ\n* リチャードジュエル\n* アップグレード\n* 新感染 ファイナル・エクスプレス\n* ブラック・レイン\n\n#### アニメ\n\n* 呪術廻戦\n* 無職転生\n* ODD TAXI\n* ブルーピリオド\n\n#### ドラマ\n\n* クイーンズ・ギャンビット\n* ファルコン\u0026ウィンターソルジャー\n* 浅草キッド\n\n#### 漫画\n\n* 推しの子\n* 左利きのエレン\n* チェンソーマン\n\n### マラソン\n\n月間100kmを目標に概ね達成しました。\n\n![public/static/2022-01-01-00-16-08.png](static/2022-01-01-00-16-08.png) \n\n合計: 1260km\n平均ペース: 5分1秒\n\nピクミンブルームの花植えが捗りました。\n\n## 2022年\n\n* インプット・アウトプットを増やす(小並感)\n  * 最近本を読んだり技術習得したりできていないので、もっとアウトプットを意識したインプットをしていく\n  * レガシーコードを頑張って読み解いて、長年積み重なった山を崩さないようにしながらどうにか動かすみたいな仕事が多かったので、来年はもっと大幅にきれいにしたい\n* 引っ越し\n  * 今後も毎日出社にはならないであろうと信じて、多少遠くても住みやすくて広いところに住みたい\n* マラソン\n  * 2年ほど大会に出れていないので、ハーフ 1:40、フル サブ3.5 を目標にして大会にでたい\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["振り返り"]},"/notes/open-google-meet-at-time":{"title":"Googleカレンダーの予定時刻になったらMeetを自動で開くようにする","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## モチベーション\n\nオンラインミーティングをGoogle Meetでやっているのですが、気づいたら開始時間を過ぎていることがあります(本当によくない)\n通知が来たときに開始までに少し時間があるので別な作業をしてしまうパターンが多いです。\n\n時間になったらMeetの画面を自動で開いて、強制的に作業を中断すればそんなことがなくなる気がします。\n\n## 方針\n\nGoogleカレンダーから予定を取得して、時間になったらそのMeetのURLをブラウザで開くようにしたいと思います。\n\nやり方はいろいろあると思います。\nChrome拡張でカレンダーにアクセスする、Calendar APIでスケジュール一覧を取得する、…\n\n今回は諸般の事情でCalendar APIを直接使えなかったため、以下の方針にしました。\nOSはMacです。\n\n* Google Apps Script(GAS) でカレンダーから一日のスケジュールをJSONで取得する\n* このGASをWebアプリとして公開して、HTTP GETで取得できるようにする\n* スケジュールの時刻に `at` コマンドをセットして、`open \u003cMeetのURL\u003e` を実行する\n\nターミナルで `at` をセットするのは今のところ手で朝に実行しています。\n\nもっといいやり方がある気はしますが、とりあえずこれでやりたいことは出来ました。\n以下、各手順となります。\n\n## スケジュール取得GASを作成する\n\n\u003chttps://script.google.com/home\u003e から新しいスクリプトを作成する\n\n### GASのCalendar APIを有効化\n\n標準の [CalendarApp](https://developers.google.com/apps-script/reference/calendar) では取れる情報が少なくMeetのURLがとれないため、[Calendar API](https://developers.google.com/apps-script/advanced/calendar) を使用する\n\nGASのエディタ \u003e サービス \u003e Calendar を有効化\n\n### dayjs を使えるようにする\n\n標準の [Utilities.formatDate](https://developers.google.com/apps-script/reference/utilities/utilities) でも日付フォーマットはできるが、もう少し日付をうまく扱うためにライブラリを入れる。\nMoment.jsは開発が止まっているので、dayjsを使う。\n\nGASのエディタ \u003e ライブラリを追加 \u003e dayjs のスクリプトID `1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB` を入力\n\n#### 余談\n\nライブラリのスクリプトIDを検索する方法がわからない…\n仕方なく個人ブログやQiitaから情報を得たけど、公式情報じゃないので気持ち悪い\n\nスクリプトIDのエディタのURLを開くと、たしかにdayjsのコードのよう\n\u003chttps://script.google.com/home/projects/1ShsRhHc8tgPy5wGOzUvgEhOedJUQD53m-gd8lG2MOgs-dXC_aCZn9lFB/edit\u003e\n\n### カレンダーから予定を取得してJSONで返却する実装\n\nWebアプリとして使えるようにするため、`doGet` 関数をエントリーポイントに実装する\n\n````javascript:code.gs\nfunction doGet(e) {\n    return ContentService.createTextOutput(JSON.stringify(getSchedule()));\n}\n\nfunction getSchedule() {\n  const now = new Date();\n  const begin = dayjs.dayjs(now);\n  const end = dayjs.dayjs(now).endOf('day');\n    \n  // デフォルトカレンダーのID\n  const calendarId = CalendarApp.getDefaultCalendar().getId();\n\n  // Calendar APIで本日の予定を取得する\n  const events = Calendar.Events.list(calendarId, {\n    timeMin: begin.toISOString(),\n    timeMax: end.toISOString(),\n    singleEvents: true,\n    orderBy: 'startTime',\n  })\n\n  const todayEvent = events.items.map(event =\u003e {\n    let start;\n    if (event.start.date) {\n      // All-day event.\n      start = new Date(event.start.date);\n    } else {\n      start = new Date(event.start.dateTime);\n    }\n\n    // atコマンドで扱いやすい時間形式にフォーマット\n    return {\n      title: event.summary,\n      start: dayjs.dayjs(start).subtract(1, 'minute').format(\"YYYYMMDDHHmm\"),\n      meetUrl: event.hangoutLink,\n    }\n  })\n\n  return todayEvent;\n}\n````\n\n### Webアプリとして公開\n\nデプロイ \u003e 新しいデプロイ \u003e 説明を入力してデプロイ \u003e WebアプリのURLを取得\n\n## atコマンドを有効化\n\nMacのatコマンドはデフォルトでは無効になっているので有効化する。\n\n[Macでatコマンドが実行できないときの対処法 - Qiita](https://qiita.com/shge/items/6c43947a77abd9d2d1b2)\n[MacOS で at コマンドを有効化して使ってみる - Neo's World](https://neos21.net/blog/2019/09/13-02.html)\n\n````shell\nsudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist\n````\n\n`/usr/libexec/atrun` にフルディスクアクセスをつける\n\n## ターミナルで予定一覧を取得して、atコマンドで設定\n\n````shell\ncurl -L \"\u003cGASのWebアプリURL\u003e\" | jq -r '.[] | .title + \",\" + .start + \",\" + .meetUrl' | awk -F ',' '{ print system(\"echo open \" $3 \" | at -t \" $2 ) }'\n````\n\n## まとめ\n\n毎朝手動でatコマンドを仕込むようにしていて、そこだけは手間だがいまのところこれのおかげで時間になったら作業を止めることができている。\n\natコマンドはデフォルトで無効になっていて、Macでスケジュール実行のコマンドはlaunchdを使ったほうがいいのではという気がしている。\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["GAS","shell"]},"/notes/start-blog-with-gatsby":{"title":"Gatsbyでブログを作ったので、構築ログを残す","content":"\n## Gatsby.js について\n\n\u003chttps://www.gatsbyjs.com/\u003e\n\nReactでつくられた静的サイトジェネレータ\n\nReactをビルド時に1回だけ実行し、HTML,JSを生成する。\n生成されたファイルをホスティングサービスにデプロイするだけで見られるようになる。\n\n### GraphQL\n\n* Gatsby.jsではビルド時のさまざまなデータをGraphQLで取得する。\n* Markdown形式で書いた情報を、ファイルシステムから読み込んで、GraphQL経由で取得し、Reactコンポーネント内で表示する。\n* GatsbyではMarkdownファイルに限らず、様々なデータを `data source`, `data transformer` という枠組みで一般化することで、多様な処理を統一的にかつ簡潔に記述することができている。\n* クライアントはビルド時に形成されたGraphQL DBの全体は必要ないので、「クエリの結果」のみをJSONとして合わせてデプロイする。\n\n## starterを使ってblogを作成\n\nテンプレートを利用してブログを構築しました。\n\n````shell\nnpx gatsby new gatsby-starter https://github.com/gatsbyjs/gatsby-starter-blog\n````\n\n※最初、[Leonids](https://www.gatsbyjs.com/starters/renyuanz/leonids/) で構築しましたがいまいち気に入らなかったので、[gatsby-starter-blog](https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog) で作り直しました。\n作り直すにあたっては、別ディレクトリでstarterから作成 → ファイル一式をコピー → TypeScriptへの変換等で地道に行いました。\n\n## TypeScript化する\n\ntsxに変更\nGraphQLのクエリ結果を型解決する\n\n## TailwindCSS\n\nTailwindCSSのユーティリティを組み合わせる思想が好きでよく使用するので、本ブログでも\n\u003chttps://www.gatsbyjs.com/docs/how-to/styling/tailwind-css/\u003e\nに沿って設定していきます。\n\n### インストール、初期設定\n\n````shell\nyarn add -D tailwindcss@npm:@tailwindcss/postcss7-compat autoprefixer\nnpx tailwindcss init\n````\n\n### PostCSSで適用する\n\n````shell\nyarn add postcss gatsby-plugin-postcss\n````\n\n````javascript:title=gatsby-config.js\nplugins: [`gatsby-plugin-postcss`],\n````\n\n````javascript:title=postcss.config.js\nmodule.exports = () =\u003e ({\n  plugins: [require(\"tailwindcss\")],\n})\n````\n\n### base CSSを追加する\n\n`@tailwind` ディレクティブを使用してTailwindの `base`, `components`, `utilities` をCSSに挿入します。\n\n````css:title=src/index.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n````\n\nカスタムCSSにTailwindのクラスを適用したい場合以下のように書ける\n\n````css:title=src/index.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@import popup.css body {\n  @apply bg-purple-200;\n}\n````\n\n`gatsby-browser.js` で読み込む\n\n````javascript:title=gatsby-browser.js\nimport \"./src/index.css\"\n````\n\n### Purge を設定する\n\nデフォルトではTailwindCSS全体がビルドに含まれるため、ファイルサイズ削減のために必要なclassのみにpurgeする。\n\n````javascript:title=tailwind.config.js\nmodule.exports = {\n  purge: [\"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {},\n  variants: {},\n  plugins: [],\n}\n````\n\n## TOCを追加\n\n[gatsby-remark-autolink-headers](https://www.gatsbyjs.com/plugins/gatsby-remark-autolink-headers/) で見出しにアンカーがつくようにする\n\n````shell\nyarn add gatsby-remark-autolink-headers\n````\n\n````javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-autolink-headers`,\n            options: {\n              offsetY: 80,\n              icon: false,\n              maintainCase: false,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n````\n\n### TOCコンポーネントを作成してページのコンポーネントに追加\n\n````typescript:toc.tsx\nimport * as React from 'react'\n\ntype Props = {\n  tocHtml?: string\n}\nconst Toc: React.FC\u003cProps\u003e = ({tocHtml}) =\u003e {\n  if (tocHtml === undefined) {\n    return \u003c\u003e\u003c/\u003e\n  }\n  return (\n    \u003cdiv className=\"toc bg-code-block px-4 py-1 my-2\"\u003e\n      \u003ch4 className=\"toc__title mt-2\"\u003e目次\u003c/h4\u003e\n      \u003cdiv\n        className=\"toc__content\"\n        dangerouslySetInnerHTML={{\n          __html: tocHtml,\n        }}\n      /\u003e\n    \u003c/div\u003e\n  )\n}\n\nexport default Toc\n````\n\n````typescript:bolg-post.tsx\n// ....\n  return (\n    \u003cLayout location={location} title={siteTitle}\u003e\n\n      \u003carticle\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      \u003e\n        \u003cheader\u003e\n          \u003ch1 itemProp=\"headline\"\u003e{post.frontmatter.title}\u003c/h1\u003e\n          \u003cp\u003e{post.frontmatter.date}\u003c/p\u003e\n        \u003c/header\u003e\n        \u003csection\n          className=\"blog-post__description\"\n        \u003e\n          {post.frontmatter.description}\n        \u003c/section\u003e\n        \u003cToc\n          tocHtml={post.tableOfContents}\n        /\u003e\n// ...\n    \u003c/Layout\u003e\n  )\n````\n\n## コードブロックにタイトルを設定\n\n参考: [Gatsbyにシンタックスハイライトを入れてコードをきれいに表示する | littlebylittle](https://littlebylittle.work/2020/01/gatsby-syntax-highlighting/)\n\n[gatsby-remark-code-titles](https://www.gatsbyjs.com/plugins/gatsby-remark-code-titles/) を使って、コードブロックにタイトルをつけます\n\n````shell\nyarn add gatsby-remark-code-titles\n````\n\n````javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          'gatsby-remark-code-titles',\n          `gatsby-remark-prismjs`,\n        ],\n      },\n    },\n  ],\n}\n````\n\nコードタイトル用のスタイルを追加\n\n````css:title=index.css\n.gatsby-code-title {\n  @apply bg-code-block text-text-light;\n  margin-bottom: -0.6rem;\n  padding: 6px 12px;\n  font-size: 0.8em;\n  line-height: 1;\n  font-weight: bold;\n  display: table;\n  border-radius: 4px 4px 0 0;\n}\n````\n","lastmodified":"2023-04-23T14:30:10.388788411Z","tags":["Gatsby","Netlify"]},"/notes/zplug-to-zinit":{"title":"zplugをzinitに移行する","content":"\n\n````toc\n# This code block gets replaced with the TOC\n````\n\n## 移行理由\n\n自分がターミナルで使用しているシェルの変遷\n\n* 2016 ~ 2020/04 zsh zplug\n* 2020/04 ~ 2021/04 fishに移行した\n* 2021/04 ~ zshに戻った\n\nzshのカスタマイズが面倒なのと、シェルの起動が遅かったので、カスタマイズが簡単なfishに移行したが、以下の理由でまたzshに戻ってきた\n\n* fishはPOSIX非互換なのでコマンドを調べるのが手間\n* bash/zshで作ったスクリプトを書き換える必要がある\n\nzinitは起動が早いと聞いたので、zplugからzinitに移行する\n\n## インストール\n\n[公式の推奨手順](https://github.com/zdharma/zinit#automatic-installation-recommended)\n\n````shell\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)\"\n````\n\n`~/.zinit` (`$ZDOTDIR` が設定されていれば `$ZDOTDIR/.zinit`) にインストールされる。\nまた、 `~/.zshrc` にzinitの設定が追記されるので、リロードし、Zinitをコンパイルする。\n\n````shell\nsource ~/.zshrc\nzinit self-update\n````\n\n## プラグインの設定\n\n完全な例\n\n````shell\n### Added by Zinit's installer\nif [[ ! -f $ZDOTDIR/.zinit/bin/zinit.zsh ]]; then\n    print -P \"%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f\"\n    command mkdir -p \"$HOME/.zsh/.zinit\" \u0026\u0026 command chmod g-rwX \"$HOME/.zsh/.zinit\"\n    command git clone https://github.com/zdharma/zinit \"$HOME/.zsh/.zinit/bin\" \u0026\u0026 \\\n        print -P \"%F{33}▓▒░ %F{34}Installation successful.%f%b\" || \\\n        print -P \"%F{160}▓▒░ The clone has failed.%f%b\"\nfi\n\nsource \"$ZDOTDIR/.zinit/bin/zinit.zsh\"\nautoload -Uz _zinit\n(( ${+_comps} )) \u0026\u0026 _comps[zinit]=_zinit\n\n# Load a few important annexes, without Turbo\n# (this is currently required for annexes)\nzinit light-mode for \\\n    zinit-zsh/z-a-rust \\\n    zinit-zsh/z-a-as-monitor \\\n    zinit-zsh/z-a-patch-dl \\\n    zinit-zsh/z-a-bin-gem-node\n\n### End of Zinit's installer chunk\n\nzinit ice wait'1' lucid; zinit light \"zdharma/fast-syntax-highlighting\"\nzinit light \"zsh-users/zsh-autosuggestions\"\nzinit light \"zsh-users/zsh-completions\"\nzinit light \"zsh-users/zsh-history-substring-search\"\nbindkey '^[[A' history-substring-search-up\nbindkey '^[[B' history-substring-search-down\n\nzinit ice wait'1' lucid pick'init.sh'; zinit light \"b4b4r07/enhancd\"\nzinit ice wait'1' lucid; zinit light \"reegnz/jq-zsh-plugin\"\n\nzinit ice wait'1' lucid; zinit light \"b4b4r07/emoji-cli\"\nzinit ice wait'1' lucid; zinit light \"mollifier/cd-gitroot\"\nzinit light \"Aloxaf/fzf-tab\"\n\nzinit ice wait'1' lucid; zinit light \"lukechilds/zsh-better-npm-completion\"\n\n#######\n# https://github.com/Aloxaf/fzf-tab\n#######\nenable-fzf-tab\n# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\nzstyle ':fzf-tab:*' fzf-bindings 'ctrl-j:accept' 'ctrl-a:toggle-all' 'ctrl-space:toggle+down'\n# disable sort when completing `git checkout`\nzstyle ':completion:*:git-checkout:*' sort false\n# set descriptions format to enable group support\nzstyle ':completion:*:descriptions' format '[%d]'\n# set list-colors to enable filename colorizing\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n# preview directory's content with exa when completing cd\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'\n# switch group using `,` and `.`\nzstyle ':fzf-tab:*' switch-group ',' '.'\n````\n\n`End of Zinit's installer chunk` までは、インストーラが追記した部分。\n\n### プラグインのダウンロード、有効化\n\n````shell\nzinit ice wait'1' lucid\nzinit light \"zdharma/fast-syntax-highlighting\"\n\nzinit load \"zdharma/history-search-multi-word\"\n````\n\nzinitには2つのプラグインロード方法がある\n\n* `zinit load`\n  * トラッキング機能を有効にする。zinit report で一覧表示ができたり、zinit unload でプラグインを無効化できるなどの利点があるが、ロードは遅くなる\n* `zinit light`\n  * トラッキング機能が無効になる。一覧等の機能が使えない代わりに高速\n\nめったにトラッキング機能を使わないため、基本的に `zinit light` でロードすることにした\n\n### zinit ice\n\n後続の `zinit load`, `zinit light` の挙動を制御する\n\n````shell\nzinit ice wait'1' lucid pick'init.sh'\nzinit light \"b4b4r07/enhancd\"\n# zinit ice wait'1' lucid pick'init.sh'; zinit light \"b4b4r07/enhancd\" と同義\n````\n\n* wait\n  * zshが起動したあとにプラグインを遅延ロードする秒数を指定する\n* lucid\n  * 遅延ロードしたときに、コンソールにロード情報が出力されるのを抑制する\n* pick\n  * sourceするファイルを指定する。pluginが `*.plugin.zsh` ファイルを起点にしていない場合、明示的に指定する\n\n## 結果\n\n2秒くらいかかっていた起動時間が0.6秒前後くらいになった。\nまた、zplugだと複数シェルを同時に起動すると競合して状態がおかしくるのか、同じプラグインが複数回ロードされることがまれにあったが、\nこういった問題も起こらなくなった。\n","lastmodified":"2023-04-23T14:30:10.396788382Z","tags":["zinit","zsh"]}}