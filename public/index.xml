<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Publics on</title><link>https://ikorihn.github.io/digitalgarden/public/</link><description>Recent content in Publics on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 May 2023 20:26:00 +0900</lastBuildDate><atom:link href="https://ikorihn.github.io/digitalgarden/public/index.xml" rel="self" type="application/rss+xml"/><item><title>NeovimとVSCode-Neovimで使用するプラグインや設定を分ける</title><link>https://ikorihn.github.io/digitalgarden/public/Neovim%E3%81%A8VSCode-Neovim%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%84%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%86%E3%81%91%E3%82%8B/</link><pubDate>Fri, 05 May 2023 20:26:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/Neovim%E3%81%A8VSCode-Neovim%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%84%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%86%E3%81%91%E3%82%8B/</guid><description>これは Vim駅伝 5/15 の記事です。
はじめに 私は普段 Neovim をメインにしていますが、 他の人と環境を合わせたいときなど VS Code もときどき使っています。
Vimの機能を利用するため VSCodeVim を入れている方も多いと思いますが、Undoの挙動が不安定だったりもっさりしていたりで不満があったため、 VSCode Neovim を使っています。
これはバックグラウンドでNeovimが動作するため、共通の設定ファイル(init.lua)が利用できて、Neovimのプラグインも動くところが嬉しいのですが、 VS Codeにはデフォルトで備わっている機能や、うまく動作しないプラグイン、一部のoptionや衝突するkey mappingは除外したいです。</description></item><item><title>愛用しているvimプラグイン</title><link>https://ikorihn.github.io/digitalgarden/public/%E6%84%9B%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bvim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3/</link><pubDate>Wed, 16 Mar 2022 12:55:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/%E6%84%9B%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bvim%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3/</guid><description>gina https://github.com/lambdalisue/gina.vim gina.vimとGitHubの連携を向上させる | Input中心のブログ
fugitiveのほうが :Git log などが見やすい気がする :Gina! log で同じようなことはできる模様。 :Gina!! と double bang にすると生のgitコマンドが実行される。 fzf-previewと連携しやすいのでGinaにしてみた。
fzf-preview TypeScriptでVimのファジーファインダーを実装して開発体験が最高になっている話 Vimにたくさんあるファジーファインダー系プラグインを比較してみる 無人島に持っていく(Neo)vimプラグイン10選 (TS開発環境編)</description></item><item><title>マイクのミュート・アンミュートを切り替える</title><link>https://ikorihn.github.io/digitalgarden/public/%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%A2%E3%83%B3%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B/</link><pubDate>Fri, 11 Mar 2022 12:23:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%A2%E3%83%B3%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B/</guid><description>#Mac
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 set micVolume to toggleMic() display notification micVolume with title &amp;#34;Mic&amp;#34; return micVolume on toggleMic() set inputVolume to input volume of (get volume settings) if inputVolume ≤ 5 then set inputVolume to 100 set micVal to &amp;#34;🔈 unmuted&amp;#34; else set inputVolume to 0 set micVal to &amp;#34;🔇 muted&amp;#34; end if set volume input volume inputVolume return micVal end toggleMic Automator &amp;gt; Quick Action から作成して、システム設定 &amp;gt; キーボード &amp;gt; ショートカット &amp;gt; サービス でキーボードショートカットを設定すれば一発で切り替えられるようになる</description></item><item><title>Raycastでマイクのミュートを切り替える</title><link>https://ikorihn.github.io/digitalgarden/public/Raycast%E3%81%A7%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B/</link><pubDate>Fri, 11 Mar 2022 12:19:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/Raycast%E3%81%A7%E3%83%9E%E3%82%A4%E3%82%AF%E3%81%AE%E3%83%9F%E3%83%A5%E3%83%BC%E3%83%88%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B/</guid><description>Raycast を使ってマイクのミュートを切り替えます
Raycastの設定 &amp;gt; Extensions &amp;gt; +ボタン &amp;gt; Create Script Command &amp;gt; templateをApple Scriptにして任意の場所に作成
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!</description></item><item><title>ネットワークに応じて処理を振り分けるスクリプト</title><link>https://ikorihn.github.io/digitalgarden/public/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><pubDate>Fri, 04 Mar 2022 10:40:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E5%87%A6%E7%90%86%E3%82%92%E6%8C%AF%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid><description>#shell
ネットワークに応じて処理を振り分けるスクリプト 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #!</description></item><item><title>ターミナル入門</title><link>https://ikorihn.github.io/digitalgarden/public/%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E5%85%A5%E9%96%80/</link><pubDate>Wed, 09 Feb 2022 10:18:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E5%85%A5%E9%96%80/</guid><description>私のターミナル歴 2015 新卒入社 Windows時代 まだコマンドプロンプトって黒い画面で怖いと思っていた コマンドプロンプトでantのbuildをする程度 2016 batファイルを触ることが増えてきた 2017 gvimで初めてvimに触れる。これまでサクラエディタとか秀丸を使っていたし周りでもvimという単語を聞いたことがなかったので、マイナーなエディタを使っている俺かっけーと思っていた。どうやら2大エディタらしいと知るのはもう少しあとになってから 簡単な作業をbatファイル書いてやらせたりし始めた 2018 mac 基本操作 tabでバシバシ補完する キーバインドを覚えよう ターミナルではemacs風のキーバインドが使える ホームポジションから動かずにカーソル操作ができるようになる macの場合はだいたいのアプリでも同じなので覚えておくと便利 ctrl-n/p: next/previous ctrl-f/b: front/back ctrl-h/d: backspace/delete ctrl-a/e: ahead/end .</description></item><item><title>2021年振り返り</title><link>https://ikorihn.github.io/digitalgarden/public/look-back-2021/</link><pubDate>Fri, 31 Dec 2021 23:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/look-back-2021/</guid><description>2021年にやったこと Kotlin + Spring Boot 1月〜3月ごろはKotlin + Spring Boot を触っていました。 Kotlinで初めてサーバーサイドを1から作れていい経験になりました。 Spring BootはWebサーバーつくるにあたってほしい機能が一通り揃っていて助かりました。 Springもほぼ初めてで悩むことはありましたが、Kotlinだから詰まったということはなかったように思います。
MockKできっちりテスト書きながら進められたのもよかったです。 SpringがとにかくDI周りのことを何も考えなくてもやってくれるので、 とくにハマることもなくinjectionしてmockしたらテストがかけてストレスが少なかったです。
この時期は技術的には楽しいことをやれていましたが、負荷も高くて疲れてもいました。
Go + Lambda AWS Lambdaでバッチを書いたりAPIサーバー作ったりと、何かと触る機会が多かったです。 何回か書いていくうちにテストのしやすさやメンテしやすさを考慮した設計ができるようになったと思います。</description></item><item><title>TypeScriptのGatsbyをNetlifyでビルドしたときのエラーに対応した</title><link>https://ikorihn.github.io/digitalgarden/public/build-typescript-on-netlify/</link><pubDate>Sun, 31 Oct 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/build-typescript-on-netlify/</guid><description>事象 TypeScript化したGatsbyをNetlifyでビルドした際に以下のエラーが発生しました。
1 2 3 4 5 6 7 8 $ gatsby build error Error in &amp;#34;/opt/build/repo/gatsby-node.js&amp;#34;: Unexpected token &amp;#39;.</description></item><item><title>Gatsbyでブログを作ったので、構築ログを残す</title><link>https://ikorihn.github.io/digitalgarden/public/start-blog-with-gatsby/</link><pubDate>Sun, 10 Oct 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/start-blog-with-gatsby/</guid><description>Gatsby.js について https://www.gatsbyjs.com/
Reactでつくられた静的サイトジェネレータ
Reactをビルド時に1回だけ実行し、HTML,JSを生成する。 生成されたファイルをホスティングサービスにデプロイするだけで見られるようになる。
GraphQL Gatsby.jsではビルド時のさまざまなデータをGraphQLで取得する。 Markdown形式で書いた情報を、ファイルシステムから読み込んで、GraphQL経由で取得し、Reactコンポーネント内で表示する。 GatsbyではMarkdownファイルに限らず、様々なデータを data source, data transformer という枠組みで一般化することで、多様な処理を統一的にかつ簡潔に記述することができている。 クライアントはビルド時に形成されたGraphQL DBの全体は必要ないので、「クエリの結果」のみをJSONとして合わせてデプロイする。 starterを使ってblogを作成 テンプレートを利用してブログを構築しました。</description></item><item><title>自宅と職場でproxy設定を切り替えたい</title><link>https://ikorihn.github.io/digitalgarden/public/%E8%87%AA%E5%AE%85%E3%81%A8%E8%81%B7%E5%A0%B4%E3%81%A7proxy%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%81%9F%E3%81%84/</link><pubDate>Fri, 08 Oct 2021 10:47:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/%E8%87%AA%E5%AE%85%E3%81%A8%E8%81%B7%E5%A0%B4%E3%81%A7proxy%E8%A8%AD%E5%AE%9A%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%81%9F%E3%81%84/</guid><description>出社時と在宅時で、プロキシの接続情報を変更する必要がある。 手で切り替えるのを忘れて社内システムにつながらない…ということがよく発生するので、自動化することにした。
切り替えたい対象 プロキシ設定 git proxyの設定を環境に応じて変更 実現方法 proxy.pac をローカルのhttpサーバーで配布 Macのネットワーク設定 &amp;gt; Location で自宅と職場でproxy.pacのURLをそれぞれ設定 git proxyをset,unsetするコマンドを実行 wifiのSSIDが家か職場を判定して分岐する トリガーはスリープからの復帰時 プロキシ設定について プロキシの設定はproxy.</description></item><item><title>Macスリープ時・復帰時に処理を動かす</title><link>https://ikorihn.github.io/digitalgarden/public/Mac%E3%82%B9%E3%83%AA%E3%83%BC%E3%83%97%E6%99%82%E5%BE%A9%E5%B8%B0%E6%99%82%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99/</link><pubDate>Thu, 07 Oct 2021 14:34:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/Mac%E3%82%B9%E3%83%AA%E3%83%BC%E3%83%97%E6%99%82%E5%BE%A9%E5%B8%B0%E6%99%82%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99/</guid><description>macOSのスリープ時にEC2を落とそう - サーバーワークスエンジニアブログ</description></item><item><title>Jenkinsの見た目をカスタマイズ</title><link>https://ikorihn.github.io/digitalgarden/public/jenkins-ui-customize/</link><pubDate>Mon, 27 Sep 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/jenkins-ui-customize/</guid><description>1 # This code block gets replaced with the TOC モチベーション Jenkins のデフォルトの見た目は古臭いので、好きなテーマに変更したい。 また、環境ごとの違いをひと目でわかりやすくすることで事故を防ぐ。
jenkins-material-theme をダウンロード http://afonsof.</description></item><item><title>Googleカレンダーの予定時刻になったらMeetを自動で開くようにする</title><link>https://ikorihn.github.io/digitalgarden/public/open-google-meet-at-time/</link><pubDate>Fri, 24 Sep 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/open-google-meet-at-time/</guid><description>1 # This code block gets replaced with the TOC モチベーション オンラインミーティングをGoogle Meetでやっているのですが、気づいたら開始時間を過ぎていることがあります(本当によくない) 通知が来たときに開始までに少し時間があるので別な作業をしてしまうパターンが多いです。
時間になったらMeetの画面を自動で開いて、強制的に作業を中断すればそんなことがなくなる気がします。
方針 Googleカレンダーから予定を取得して、時間になったらそのMeetのURLをブラウザで開くようにしたいと思います。</description></item><item><title>Karabiner-Elementsで個人的におすすめのキーバインド</title><link>https://ikorihn.github.io/digitalgarden/public/karabiner-elements-recommend/</link><pubDate>Sun, 15 Aug 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/karabiner-elements-recommend/</guid><description>1 # This code block gets replaced with the TOC Karabiner-Elements とは Macのキーボードをカスタマイズするためのツールです。 これを使えばUSキーボードでもJIS配列のようにかな/英数キーを割り当てるなどが可能になります。
ここでは個人的に使っているキーバインドを紹介します。 インストールや設定方法については色々なサイトで紹介されているので省略します。
ルールについては https://ke-complex-modifications.</description></item><item><title>zplugをzinitに移行する</title><link>https://ikorihn.github.io/digitalgarden/public/zplug-to-zinit/</link><pubDate>Mon, 21 Jun 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/zplug-to-zinit/</guid><description>1 # This code block gets replaced with the TOC 移行理由 自分がターミナルで使用しているシェルの変遷
2016 ~ 2020/04 zsh zplug 2020/04 ~ 2021/04 fishに移行した 2021/04 ~ zshに戻った zshのカスタマイズが面倒なのと、シェルの起動が遅かったので、カスタマイズが簡単なfishに移行したが、以下の理由でまたzshに戻ってきた</description></item><item><title>fishのhistoryをzshに移行する</title><link>https://ikorihn.github.io/digitalgarden/public/fish-history-to-zsh-history/</link><pubDate>Tue, 08 Jun 2021 19:00:00 +0900</pubDate><guid>https://ikorihn.github.io/digitalgarden/public/fish-history-to-zsh-history/</guid><description>一年くらいfishを使っていたが、文法があまりにbash/zshと異なり辛いため、zshに戻すことにした。 コマンド履歴に頼る人間なので、直近1年の履歴がなくなってしまうのは困る。 そこでfishのhistoryファイルをzshのhistoryファイルに移行することにした。
1 # This code block gets replaced with the TOC 移行ツール 移行するためのツールを作った。
https://github.com/ikorihn/zhistconv</description></item></channel></rss>